Script started on 2025-10-06 09:02:55+02:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="126" LINES="12"]
[?2004h[94mITINF25/lektion11
(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [H[2J[94mITINF25/lektion11
(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [H[2J[94mITINF25/lektion11
(B[m$ ls
[?2004lextext	grep  recordings
[?2004h[94mITINF25/lektion11
(B[m$ cd e[Kgrep/
[?2004l[?2004h[94mITINF25/lektion11/grep
(B[m$ [H[2J[94mITINF25/lektion11/grep
(B[m$ ls
[?2004lbehover_inte_kunna  viktigt_att_kunna
[?2004h[94mITINF25/lektion11/grep
(B[m$ cd viktigt_att_kunna/
[?2004l[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ ls
[?2004lex1
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ chmod +x ex1 '[K
[?2004l[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ cp ex1 [K[K[K[K[K[K[Kfor x in {}e{}x{}[C2}.}.}5}[C,txt[K[K[K[K.txt; do echo [K[K[K[K[Kcp ex1 $x; done[1@"[C[C[1@"[C[C[C[C[C[C
[?2004l[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true√∂[K; ./ex1 ; sleep 3 ; done[1@d[1@o[1@ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004lHej
Hej
^C
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do ./ex1 ; sleep 3 ; donel[C[1@ [1@c[1@l[1@e[1@a[1@r[1@;[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 ; sleep 3 ; done
[?2004l[H[2J[3JHej
[H[2J[3JHej
[H[2J[3JHejsan
[H[2J[3JHejsan
[H[2J[3JHejsan
[H[2J[3JHejsan
[H[2J[3JHejsan
[H[2J[3JHejsan
[H[2J[3JHejsan
[H[2J[3J[H[2J[3J^C
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 ; sleep 3 ; done[H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 ; sleep 3 ; done[C[C[K./ex1 
[?2004lls: cannot access './../extext/richard.txt': No such file or directory
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ ./ex1 
[?2004l../../extext/richard.txt
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ ./ex1 
[?2004l../../extext/richard.txt
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ ./ex1 
[?2004lRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activism
Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Stallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Stallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallman has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ ./ex1 [C[Cwhile true; do clear; ./ex1 ; sleep 3 ; done[H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 ; sleep 3 ; done
[?2004l[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activism
Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Stallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Stallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallman has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activism
Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Stallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Stallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallman has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activism
Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Stallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Stallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallman has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activism
Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Stallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Stallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallman has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

q^C
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 ; sleep 3 ; done[C[1@ [1@*[C[1@ [1P[1P[1@|[C[1@ [1@h[1@e[1@a[1@d[C[1@ [1@-[1@n[C[1@ [1@2[1@0[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 | head -n 20 ; sleep 3 ; done
[?2004l[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

^C
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 | head -n 20 ; sleep 3 ; done[1P[1P[1@2[1P[1@3
[?2004l[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3J[H[2J[3J[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]
[H[2J[3Jgrep: Unmatched [, [^, [:, [., or [=
[H[2J[3Jgrep: Unmatched [, [^, [:, [., or [=
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3Jgrep: Unmatched [, [^, [:, [., or [=
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1
 1
 1
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
^C
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ man grep
[?2004l[?1049h[22;0;0t[?1h=GREP(1)                                    User Commands                                    GREP(1)[m
[m
[1mNAME[0m[m
       grep, egrep, fgrep, rgrep - print lines that match patterns[m
[m
[1mSYNOPSIS[0m[m
       [1mgrep[0m [[4mOPTION[24m...] [4mPATTERNS[24m [[4mFILE[24m...][m
       [1mgrep[0m [[4mOPTION[24m...] [1m-e[0m [4mPATTERNS[24m ... [[4mFILE[24m...][m
       [1mgrep[0m [[4mOPTION[24m...] [1m-f[0m [4mPATTERN_FILE[24m ... [[4mFILE[24m...][m
[m
[1mDESCRIPTION[0m[m
       [1mgrep[0m  searches  for  [4mPATTERNS[24m  in  each [4mFILE[24m.  [4mPATTERNS[24m is one or more patterns separated by[m
       newline characters, and [1mgrep[0m prints each line that matches a  pattern.   Typically  [4mPATTERNS[24m[m
       should be quoted when [1mgrep[0m is used in a shell command.[m
[m
       A  [4mFILE[24m  of  ‚Äú[1m-[0m‚Äù stands for standard input.  If no [4mFILE[24m is given, recursive searches examine[m
       the working directory, and nonrecursive searches read standard input.[m
[7m Manual page grep(1) line 1 (press h for help or q to quit)[27m[K[K[m
       Debian also includes the variant programs [1megrep[0m, [1mfgrep[0m and [1mrgrep[0m.  These  programs  are  the[m
       same  as  [1mgrep[0m [1m-E[0m,  [1mgrep[0m [1m-F[0m,  and  [1mgrep[0m [1m-r[0m,  respectively.   These  variants  are deprecated[m
       upstream, but Debian provides for backward compatibility. For  portability  reasons,  it  is[m
       recommended to avoid the variant programs, and use [1mgrep[0m with the related option instead.[m
[m
[1mOPTIONS[0m[m
   [1mGeneric[0m [1mProgram[0m [1mInformation[0m[m
       [1m--help[0m Output a usage message and exit.[m
[m
       [1m-V[0m, [1m--version[0m[m
              Output the version number of [1mgrep[0m and exit.[m
[m
   [1mPattern[0m [1mSyntax[0m[m
       [1m-E[0m, [1m--extended-regexp[0m[m
              Interpret [4mPATTERNS[24m as extended regular expressions (EREs, see below).[m
[m
[7m Manual page grep(1) line 18 (press h for help or q to quit)[27m[K[K/[Kcc[Koo[Kll[Koo[Krr[K[1;1H[m
[2;1H       Debian also includes the variant programs [1megrep[0m, [1mfgrep[0m and [1mrgrep[0m.  These  programs  are  the[m
[3;1H       same  as  [1mgrep[0m [1m-E[0m,  [1mgrep[0m [1m-F[0m,  and  [1mgrep[0m [1m-r[0m,  respectively.   These  variants  are deprecated[m
[4;1H       upstream, but Debian provides for backward compatibility. For  portability  reasons,  it  is[m
[5;1H       recommended to avoid the variant programs, and use [1mgrep[0m with the related option instead.[m
[6;1H[m
[7;1H[1mOPTIONS[0m[m
[8;1H   [1mGeneric[0m [1mProgram[0m [1mInformation[0m[m
[9;1H       [1m--help[0m Output a usage message and exit.[m
[10;1H[m
[11;1H       [1m-V[0m, [1m--version[0m[m
[12;1H              Output the version number of [1mgrep[0m and exit.[m
[13;1H[m
[14;1H   [1mPattern[0m [1mSyntax[0m[m
[15;1H       [1m-E[0m, [1m--extended-regexp[0m[m
[16;1H              Interpret [4mPATTERNS[24m as extended regular expressions (EREs, see below).[m
[17;1H[m
[18;1H[1;1H[m
[2;1H       Debian also includes the variant programs [1megrep[0m, [1mfgrep[0m and [1mrgrep[0m.  These  programs  are  the[m
[3;1H       same  as  [1mgrep[0m [1m-E[0m,  [1mgrep[0m [1m-F[0m,  and  [1mgrep[0m [1m-r[0m,  respectively.   These  variants  are deprecated[m
[4;1H       upstream, but Debian provides for backward compatibility. For  portability  reasons,  it  is[m
[5;1H       recommended to avoid the variant programs, and use [1mgrep[0m with the related option instead.[m
[6;1H[m
[7;1H[1mOPTIONS[0m[m
[8;1H   [1mGeneric[0m [1mProgram[0m [1mInformation[0m[m
[9;1H       [1m--help[0m Output a usage message and exit.[m
[10;1H[m
[11;1H       [1m-V[0m, [1m--version[0m[m
[12;1H              Output the version number of [1mgrep[0m and exit.[m
[13;1H[m
[14;1H   [1mPattern[0m [1mSyntax[0m[m
[15;1H       [1m-E[0m, [1m--extended-regexp[0m[m
[16;1H              Interpret [4mPATTERNS[24m as extended regular expressions (EREs, see below).[m
[17;1H[m
[18;1H...skipping...
       [1m--[0m[1m[7mcolor[27m[0m[[1m=[0m[4mWHEN[24m], [1m--colour[0m[[1m=[0m[4mWHEN[24m][m
              Surround  the matched (non-empty) strings, matching lines, context lines, file names,[m
              line numbers, byte offsets, and separators (for fields and groups of  context  lines)[m
              with  escape  sequences  to  display  them  in [7mcolor[27m on the terminal.  The [7mcolor[27ms are[m
              defined by the environment variable [1mGREP_[0m[1m[7mCOLOR[27m[0m[1mS[0m.  [4mWHEN[24m is [1mnever[0m, [1malways[0m, or [1mauto[0m.[m
[m
       [1m-L[0m, [1m--files-without-match[0m[m
              Suppress normal output; instead print the name of  each  input  file  from  which  no[m
              output would normally have been printed.[m
[m
       [1m-l[0m, [1m--files-with-matches[0m[m
              Suppress  normal  output; instead print the name of each input file from which output[m
              would normally have been printed.  Scanning each input file stops upon first match.[m
[m
       [1m-m[0m [4mNUM[24m, [1m--max-count=[0m[4mNUM[24m[m
              Stop reading a file after [4mNUM[24m matching lines.  If [4mNUM[24m is zero, [1mgrep[0m stops right  away[m
              without  reading  input.   A [4mNUM[24m of -1 is treated as infinity and [1mgrep[0m does not stop;[m
[7m Manual page grep(1) line 88 (press h for help or q to quit)[27m[K[K[?1l>[?1049l[23;0;0t[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ man grep[C[Cwhile true; do clear; ./ex1 | head -n 3 ; sleep 3 ; done
[?2004l[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3Jgrep: Unmatched ( or \(
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16,[01;31m[K 1953[m[K), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October[01;31m[K 1985[m[K,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September[01;31m[K 1983[m[K to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In[01;31m[K 1989[m[K, he co-founded the League for Programming Freedom. Since the mid[01;31m[K-1990[m[Ks, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
[H[2J[3JRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
^C
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex1 | head -n 3 ; sleep 3 ; done[1P[1@2[H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ while true; do clear; ./ex2 | head -n 3 ; sleep 3 ; done[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
[H[2J[3J 1953
 1985
 1983
^C
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ man grep
[?2004l[?1049h[22;0;0t[?1h=GREP(1)                                    User Commands                                    GREP(1)[m
[m
[1mNAME[0m[m
       grep, egrep, fgrep, rgrep - print lines that match patterns[m
[m
[1mSYNOPSIS[0m[m
       [1mgrep[0m [[4mOPTION[24m...] [4mPATTERNS[24m [[4mFILE[24m...][m
       [1mgrep[0m [[4mOPTION[24m...] [1m-e[0m [4mPATTERNS[24m ... [[4mFILE[24m...][m
       [1mgrep[0m [[4mOPTION[24m...] [1m-f[0m [4mPATTERN_FILE[24m ... [[4mFILE[24m...][m
[m
[1mDESCRIPTION[0m[m
       [1mgrep[0m  searches  for  [4mPATTERNS[24m  in  each [4mFILE[24m.  [4mPATTERNS[24m is one or more patterns separated by[m
       newline characters, and [1mgrep[0m prints each line that matches a  pattern.   Typically  [4mPATTERNS[24m[m
       should be quoted when [1mgrep[0m is used in a shell command.[m
[m
       A  [4mFILE[24m  of  ‚Äú[1m-[0m‚Äù stands for standard input.  If no [4mFILE[24m is given, recursive searches examine[m
       the working directory, and nonrecursive searches read standard input.[m
[7m Manual page grep(1) line 1 (press h for help or q to quit)[27m[K[K-[K[7m Manual page grep(1) line 1 (press h for help or q to quit)[27m[K[K/[K--[Koo[K[1;1HGREP(1)                                    User Commands                                    GREP(1)[m
[2;1H[m
[3;1H[1mNAME[0m[m
[4;1H       grep, egrep, fgrep, rgrep - print lines that match patterns[m
[5;1H[m
[6;1H[1mSYNOPSIS[0m[m
[7;1H       [1mgrep[0m [[4mOPTION[24m...] [4mPATTERNS[24m [[4mFILE[24m...][m
[8;1H       [1mgrep[0m [[4mOPTION[24m...] [1m-e[0m [4mPATTERNS[24m ... [[4mFILE[24m...][m
[9;1H       [1mgrep[0m [[4mOPTION[24m...] [1m-f[0m [4mPATTERN_FILE[24m ... [[4mFILE[24m...][m
[10;1H[m
[11;1H[1mDESCRIPTION[0m[m
[12;1H       [1mgrep[0m  searches  for  [4mPATTERNS[24m  in  each [4mFILE[24m.  [4mPATTERNS[24m is one or more patterns separated by[m
[13;1H       newline characters, and [1mgrep[0m prints each line that matches a  pattern.   Typically  [4mPATTERNS[24m[m
[14;1H       should be quoted when [1mgrep[0m is used in a shell command.[m
[15;1H[m
[16;1H       A  [4mFILE[24m  of  ‚Äú[1m-[0m‚Äù stands for standard input.  If no [4mFILE[24m is given, recursive searches examine[m
[17;1H       the working directory, and nonrecursive searches read standard input.[m
[18;1H[1;1HGREP(1)                                    User Commands                                    GREP(1)[m
[2;1H[m
[3;1H[1mNAME[0m[m
[4;1H       grep, egrep, fgrep, rgrep - print lines that match patterns[m
[5;1H[m
[6;1H[1mSYNOPSIS[0m[m
[7;1H       [1mgrep[0m [[4mOPTION[24m...] [4mPATTERNS[24m [[4mFILE[24m...][m
[8;1H       [1mgrep[0m [[4mOPTION[24m...] [1m-e[0m [4mPATTERNS[24m ... [[4mFILE[24m...][m
[9;1H       [1mgrep[0m [[4mOPTION[24m...] [1m-f[0m [4mPATTERN_FILE[24m ... [[4mFILE[24m...][m
[10;1H[m
[11;1H[1mDESCRIPTION[0m[m
[12;1H       [1mgrep[0m  searches  for  [4mPATTERNS[24m  in  each [4mFILE[24m.  [4mPATTERNS[24m is one or more patterns separated by[m
[13;1H       newline characters, and [1mgrep[0m prints each line that matches a  pattern.   Typically  [4mPATTERNS[24m[m
[14;1H       should be quoted when [1mgrep[0m is used in a shell command.[m
[15;1H[m
[16;1H       A  [4mFILE[24m  of  ‚Äú[1m-[0m‚Äù stands for standard input.  If no [4mFILE[24m is given, recursive searches examine[m
[17;1H       the working directory, and nonrecursive searches read standard input.[m
[18;1H...skipping...
       [1m[7m-o[27m[0m, [1m-[0m[1m[7m-o[27m[0m[1mnly-matching[0m[m
              Print only the matched (non-empty) parts of a matching line, with each such part on a[m
              separate output line.[m
[m
       [1m-q[0m, [1m--quiet[0m, [1m--silent[0m[m
              Quiet; do not write anything to standard output.  Exit immediately with  zero  status[m
              if  any  match  is  found,  even  if  an  error  was  detected.   Also  see the [1m-s[0m or[m
              [1m--no-messages[0m option.[m
[m
       [1m-s[0m, [1m--no-messages[0m[m
              Suppress error messages about nonexistent or unreadable files.[m
[m
   [1mOutput[0m [1mLine[0m [1mPrefix[0m [1mControl[0m[m
       [1m-b[0m, [1m--byte[0m[1m[7m-o[27m[0m[1mffset[0m[m
              Print the 0-based byte offset within the input file before each line of  output.   If[m
              [1m[7m-o[27m[0m ([1m-[0m[1m[7m-o[27m[0m[1mnly-matching[0m) is specified, print the offset of the matching part itself.[m
[m
[7m Manual page grep(1) line 114 (press h for help or q to quit)[27m[K[K[?1l>[?1049l[23;0;0t[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ echo "alfa beta alfa"
[?2004lalfa beta alfa
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ echo "alfa beta alfa" | grep -o alfa[H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ echo "alfa beta alfa" | grep -o alfa
[?2004lalfa
alfa
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ ls[K[Krm *.txt
[?2004l[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [K(B[m$ [H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ man ls
[?2004l[?1049h[22;0;0t[?1h=LS(1)                                      User Commands                                      LS(1)[m
[m
[1mNAME[0m[m
       ls - list directory contents[m
[m
[1mSYNOPSIS[0m[m
       [1mls[0m [[4mOPTION[24m]... [[4mFILE[24m]...[m
[m
[1mDESCRIPTION[0m[m
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê[m
       ically if none of [1m-cftuvSUX[0m nor [1m--sort[0m is specified.[m
[m
       Mandatory arguments to long options are mandatory for short options too.[m
[7m Manual page ls(1) line 1 (press h for help or q to quit)[27m[K[K[m
       [1m-a[0m, [1m--all[0m[m
              do not ignore entries starting with .[m
[m
       [1m-A[0m, [1m--almost-all[0m[m
              do not list implied . and ..[m
[m
       [1m--author[0m[m
              with [1m-l[0m, print the author of each file[m
[m
       [1m-b[0m, [1m--escape[0m[m
              print C-style escapes for nongraphic characters[m
[m
[7m Manual page ls(1) line 14 (press h for help or q to quit)[27m[K[K       [1m--block-size[0m=[4mSIZE[24m[m
              with [1m-l[0m, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE[m
              format below[m
[m
       [1m-B[0m, [1m--ignore-backups[0m[m
              do not list implied entries ending with ~[m
[m
       [1m-c[0m     with [1m-lt[0m: sort by, and show, ctime (time of last modification of file status informa‚Äê[m
              tion); with [1m-l[0m: show ctime and sort by name; otherwise: sort by ctime, newest first[m
[m
       [1m-C[0m     list entries by columns[m
[m
       [1m--color[0m[=[4mWHEN[24m][m
[7m Manual page ls(1) line 27 (press h for help or q to quit)[27m[K[K              color the output WHEN; more info below[m
[m
       [1m-d[0m, [1m--directory[0m[m
              list directories themselves, not their contents[m
[m
       [1m-D[0m, [1m--dired[0m[m
              generate output designed for Emacs' dired mode[m
[m
       [1m-f[0m     list all entries in directory order[m
[m
       [1m-F[0m, [1m--classify[0m[=[4mWHEN[24m][m
              append indicator (one of */=>@|) to entries WHEN[m
[m
[7m Manual page ls(1) line 40 (press h for help or q to quit)[27m[K[K       [1m--file-type[0m[m
              likewise, except do not append '*'[m
[m
       [1m--format[0m=[4mWORD[24m[m
              across [1m-x[0m, commas [1m-m[0m, horizontal [1m-x[0m, long [1m-l[0m, single-column [1m-1[0m, verbose [1m-l[0m,  vertical[m
              [1m-C[0m[m
[m
       [1m--full-time[0m[m
              like [1m-l[0m [1m--time-style[0m=[4mfull-iso[24m[m
[m
       [1m-g[0m     like [1m-l[0m, but do not list owner[m
[m
       [1m--group-directories-first[0m[m
[7m Manual page ls(1) line 53 (press h for help or q to quit)[27m[K[K              group directories before files; can be augmented with a [1m--sort[0m option, but any use of[m
              [1m--sort[0m=[4mnone[24m ([1m-U[0m) disables grouping[m
[m
       [1m-G[0m, [1m--no-group[0m[m
              in a long listing, don't print group names[m
[m
       [1m-h[0m, [1m--human-readable[0m[m
              with [1m-l[0m and [1m-s[0m, print sizes like 1K 234M 2G etc.[m
[m
       [1m--si[0m   likewise, but use powers of 1000 not 1024[m
[m
       [1m-H[0m, [1m--dereference-command-line[0m[m
              follow symbolic links listed on the command line[m
[7m Manual page ls(1) line 66 (press h for help or q to quit)[27m[K[K[m
       [1m--dereference-command-line-symlink-to-dir[0m[m
              follow each command line symbolic link that points to a directory[m
[m
       [1m--hide[0m=[4mPATTERN[24m[m
              do not list implied entries matching shell PATTERN (overridden by [1m-a[0m or [1m-A[0m)[m
[m
       [1m--hyperlink[0m[=[4mWHEN[24m][m
              hyperlink file names WHEN[m
[m
       [1m--indicator-style[0m=[4mWORD[24m[m
              append indicator with  style  WORD  to  entry  names:  none  (default),  slash  ([1m-p[0m),[m
              file-type ([1m--file-type[0m), classify ([1m-F[0m)[m
[7m Manual page ls(1) line 79 (press h for help or q to quit)[27m[K[K[?1l>[?1049l[23;0;0t[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ man ls *[K| cat
[?2004lLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
       ically if none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
              format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              color the output WHEN; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     list all entries in directory order

       -F, --classify[=WHEN]
              append indicator (one of */=>@|) to entries WHEN

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files; can be augmented with a --sort option, but any use of
              --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)

       --hyperlink[=WHEN]
              hyperlink file names WHEN

       --indicator-style=WORD
              append indicator with  style  WORD  to  entry  names:  none  (default),  slash  (-p),
              file-type (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default  to  1024-byte blocks for file system usage; used only with -s and per direc‚Äê
              tory totals

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show information for the file  the
              link references rather than for the link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print entry names without quoting

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a
              terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style  WORD  for  entry  names:  literal,  locale,  shell,  shell-always,
              shell-escape,  shell-escape-always,  c,  escape  (overrides QUOTING_STYLE environment
              variable)

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size, largest first

       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version  (-v),  exten‚Äê
              sion (-X), width

       --time=WORD
              change the default of using modification times; access time (-u): atime, access, use;
              change time (-c): ctime, status; birth time: birth, creation;

              with -l, WORD determines which time to show; with --sort=time, sort by  WORD  (newest
              first)

       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below

       -t     sort by time, newest first; see --time

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name;
              otherwise: sort by access time, newest first

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              set output width to COLS.  0 means no limit

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       --zero end each output line with NUL, not newline

       -1     list one file per line

       --help display this help and exit

       --version
              output version information and exit

       The SIZE argument is an integer and optional unit (example:  10K  is  10*1024).   Units  are
       K,M,G,T,P,E,Z,Y  (powers  of  1024)  or  KB,MB,... (powers of 1000).  Binary prefixes can be
       used, too: KiB=K, MiB=M, and so on.

       The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.  FORMAT  is  in‚Äê
       terpreted  like  in  date(1).  If FORMAT is FORMAT1<newline>FORMAT2, then FORMAT1 applies to
       non-recent files and FORMAT2 to recent files.  TIME_STYLE prefixed with 'posix-'  takes  ef‚Äê
       fect  only  outside the POSIX locale.  Also the TIME_STYLE environment variable sets the de‚Äê
       fault style to use.

       The WHEN argument defaults to 'always' and can also be 'auto' or 'never'.

       Using color to distinguish file types is disabled both by default  and  with  --color=never.
       With  --color=auto,  ls emits color codes only when standard output is connected to a termi‚Äê
       nal.  The LS_COLORS environment variable can change the settings.  Use the dircolors(1) com‚Äê
       mand to set it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ¬© 2022 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later
       <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to
       the extent permitted by law.

SEE ALSO
       dircolors(1)

       Full documentation <https://www.gnu.org/software/coreutils/ls>
       or available locally via: info '(coreutils) ls invocation'

GNU coreutils 9.1                          September 2022                                     LS(1)
[?2004h[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ man ls | cat[H[2J[94mITINF25/lektion11/grep/viktigt_att_kunna
(B[m$ man ls | cat[K[K[K[K[K[KA[K[K[K[K[K[K[Kcd ../behover_inte_kunna/
[?2004l[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ls
[?2004lex1
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ (reverse-i-search)`': f': echo "alfa beta alfa" | grep -o al[7mf[27ma[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Co': [7mfo[27mr x in ex{2..5}.txt; do cp ex1 "$x"; done[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1@r': [7mfor[27m[23P(B[m$ for[C[H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ for x in ex{2..5}.txt; do cp ex1 "$x"; done[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ for x in ex{2..5}.txt; do cp ex1 "$x"; done[1P[1P[1P[1P
[?2004l[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ rm *.txt
[?2004l[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ (reverse-i-search)`': f': [7mf[27mor x in ex{2..5}; do cp ex1 "$x"; done[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1@o': [7mfo[27m[1@r': [7mfor[27m[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4@.txt[C[C[C[C[C[C[C[C[C*.pdf; do stencylize "$x" stencil.png;done[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C^C[?2004l[?2004h[?2004l
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ for [K[K[K[K(reverse-i-search)`': w': [7mw[27mhile true; do clear; ./ex2 | head -n 3 ; sleep 3 ; done[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1@h': [7mwh[27m[1@i': [7mwhi[27m[C[8@failed reverse-i-search)`whi;': whi[1@l[C[C[C[1@e[C[C[C[1P[C[C[C[1P[C[C[C[1@l[C[C[C[1@e[C[C[C[33P(B[m$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P[1@1[C[C[C[C[C[C[C[C[C[C[C[C[1P[1@1[1@0[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ while true; do clear; ./ex1 | head -n 10 ; sleep 3 ; done
[?2004l[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JLS(1)                                      User Commands                                      LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List information about the FILEs (the current directory by default).  Sort entries alphabet‚Äê
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3JUsage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J              with -l, print the author of each file
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
              with -l and -s, print sizes like 1K 234M 2G etc.
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
[H[2J[3J       ls - list directory contents
       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
[H[2J[3Jgrep: Unmatched [, [^, [:, [., or [=
[H[2J[3Jgrep: Unmatched [, [^, [:, [., or [=
[H[2J[3Jgrep: Unmatched [, [^, [:, [., or [=
[H[2J[3Jgrep: Unmatched [, [^, [:, [., or [=
[H[2J[3J       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
[H[2J[3J       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
[H[2J[3J       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
[H[2J[3J       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
[H[2J[3J       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
[H[2J[3J       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
[H[2J[3J       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
^C
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 
[?2004l       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
       -C     list entries by columns
       --color[=WHEN]
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
       --file-type
       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              -C
       --full-time
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
       --group-directories-first
              group directories before files; can be augmented with a --sort option, but any use of
              --sort=none (-U) disables grouping
       -G, --no-group
       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.
       --si   likewise, but use powers of 1000 not 1024
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)
       --hyperlink[=WHEN]
       --indicator-style=WORD
              append indicator with  style  WORD  to  entry  names:  none  (default),  slash  (-p),
              file-type (--file-type), classify (-F)
       -i, --inode
       -I, --ignore=PATTERN
       -k, --kibibytes
              default  to  1024-byte blocks for file system usage; used only with -s and per direc‚Äê
       -l     use a long listing format
       -L, --dereference
       -m     fill width with a comma separated list of entries
       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs
       -N, --literal
       -o     like -l, but do not list group information
       -p, --indicator-style=slash
       -q, --hide-control-chars
       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a
       -Q, --quote-name
       --quoting-style=WORD
              use quoting style  WORD  for  entry  names:  literal,  locale,  shell,  shell-always,
              shell-escape,  shell-escape-always,  c,  escape  (overrides QUOTING_STYLE environment
       -r, --reverse
       -R, --recursive
       -s, --size
       -S     sort by file size, largest first
       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version  (-v),  exten‚Äê
              sion (-X), width
       --time=WORD
              change the default of using modification times; access time (-u): atime, access, use;
              change time (-c): ctime, status; birth time: birth, creation;
              with -l, WORD determines which time to show; with --sort=time, sort by  WORD  (newest
       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below
       -t     sort by time, newest first; see --time
       -T, --tabsize=COLS
       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name;
       -U     do not sort; list entries in directory order
       -v     natural sort of (version) numbers within text
       -w, --width=COLS
       -x     list entries by lines instead of by columns
       -X     sort alphabetically by entry extension
       -Z, --context
       --zero end each output line with NUL, not newline
       --help display this help and exit
       --version
       The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.  FORMAT  is  in‚Äê
       non-recent files and FORMAT2 to recent files.  TIME_STYLE prefixed with 'posix-'  takes  ef‚Äê
       Using color to distinguish file types is disabled both by default  and  with  --color=never.
       With  --color=auto,  ls emits color codes only when standard output is connected to a termi‚Äê
       2      if serious trouble (e.g., cannot access command-line argument).
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 
[?2004l[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 
[?2004l       ically if none of -cftuvSUX nor --sort is specified.
       -a, --all
       -A, --almost-all
       --author
              with -l, print the author of each file
       -b, --escape
              print C-style escapes for nongraphic characters
       --block-size=SIZE
              with -l, scale sizes by SIZE when printing them;  e.g.,  '--block-size=M';  see  SIZE
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
              tion); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first
       -C     list entries by columns
       --color[=WHEN]
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
       --file-type
       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l,  vertical
              -C
       --full-time
              like -l --time-style=full-iso
       -g     like -l, but do not list owner
       --group-directories-first
              group directories before files; can be augmented with a --sort option, but any use of
              --sort=none (-U) disables grouping
       -G, --no-group
       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.
       --si   likewise, but use powers of 1000 not 1024
       -H, --dereference-command-line
       --dereference-command-line-symlink-to-dir
       --hide=PATTERN
              do not list implied entries matching shell PATTERN (overridden by -a or -A)
       --hyperlink[=WHEN]
       --indicator-style=WORD
              append indicator with  style  WORD  to  entry  names:  none  (default),  slash  (-p),
              file-type (--file-type), classify (-F)
       -i, --inode
       -I, --ignore=PATTERN
       -k, --kibibytes
              default  to  1024-byte blocks for file system usage; used only with -s and per direc‚Äê
       -l     use a long listing format
       -L, --dereference
       -m     fill width with a comma separated list of entries
       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs
       -N, --literal
       -o     like -l, but do not list group information
       -p, --indicator-style=slash
       -q, --hide-control-chars
       --show-control-chars
              show nongraphic characters as-is (the default, unless program is 'ls' and output is a
       -Q, --quote-name
       --quoting-style=WORD
              use quoting style  WORD  for  entry  names:  literal,  locale,  shell,  shell-always,
              shell-escape,  shell-escape-always,  c,  escape  (overrides QUOTING_STYLE environment
       -r, --reverse
       -R, --recursive
       -s, --size
       -S     sort by file size, largest first
       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time (-t), version  (-v),  exten‚Äê
              sion (-X), width
       --time=WORD
              change the default of using modification times; access time (-u): atime, access, use;
              change time (-c): ctime, status; birth time: birth, creation;
              with -l, WORD determines which time to show; with --sort=time, sort by  WORD  (newest
       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below
       -t     sort by time, newest first; see --time
       -T, --tabsize=COLS
       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name;
       -U     do not sort; list entries in directory order
       -v     natural sort of (version) numbers within text
       -w, --width=COLS
       -x     list entries by lines instead of by columns
       -X     sort alphabetically by entry extension
       -Z, --context
       --zero end each output line with NUL, not newline
       --help display this help and exit
       --version
       The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.  FORMAT  is  in‚Äê
       non-recent files and FORMAT2 to recent files.  TIME_STYLE prefixed with 'posix-'  takes  ef‚Äê
       Using color to distinguish file types is disabled both by default  and  with  --color=never.
       With  --color=auto,  ls emits color codes only when standard output is connected to a termi‚Äê
       2      if serious trouble (e.g., cannot access command-line argument).
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 
[?2004l       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
              -C
       -g     like -l, but do not list owner
       -G, --no-group
       -h, --human-readable
       -H, --dereference-command-line
       -i, --inode
       -I, --ignore=PATTERN
       -k, --kibibytes
       -l     use a long listing format
       -L, --dereference
       -m     fill width with a comma separated list of entries
       -n, --numeric-uid-gid
       -N, --literal
       -o     like -l, but do not list group information
       -p, --indicator-style=slash
       -q, --hide-control-chars
       -Q, --quote-name
       -r, --reverse
       -R, --recursive
       -s, --size
       -S     sort by file size, largest first
       -t     sort by time, newest first; see --time
       -T, --tabsize=COLS
       -u     with -lt: sort by, and show, access time; with -l: show access time and sort by name;
       -U     do not sort; list entries in directory order
       -v     natural sort of (version) numbers within text
       -w, --width=COLS
       -x     list entries by lines instead of by columns
       -X     sort alphabetically by entry extension
       -Z, --context
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 [C[Cwhile true; do clear; ./ex1 | head -n 10 ; sleep 3 ; done[H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ while true; do clear; ./ex1 | head -n 10 ; sleep 3 ; done
[?2004l[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
       -A, --almost-all
       -b, --escape
       -B, --ignore-backups
       -c     with -lt: sort by, and show, ctime (time of last modification of file status informa‚Äê
       -C     list entries by columns
       -d, --directory
       -D, --dired
       -f     list all entries in directory order
       -F, --classify[=WHEN]
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .
--
       -A, --almost-all
              do not list implied . and ..
--
       -b, --escape
              print C-style escapes for nongraphic characters
--
       -B, --ignore-backups
[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J[H[2J[3J[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

--
       -b, --escape
              print C-style escapes for nongraphic characters

[H[2J[3J       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
              with -l, print the author of each file

       -b, --escape
[H[2J[3J       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
              with -l, print the author of each file

       -b, --escape
[H[2J[3J       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
              with -l, print the author of each file

       -b, --escape
[H[2J[3J       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
              with -l, print the author of each file

       -b, --escape
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
grep: -B: invalid context length argument
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
--
       --author
              with -l, print the author of each file
grep: -B: invalid context length argument
[H[2J[3Jgrep: -B: invalid context length argument
[H[2J[3Jgrep: -B: invalid context length argument
[H[2J[3Jgrep: -B: invalid context length argument
[H[2J[3Jgrep: -B: invalid context length argument
[H[2J[3Jgrep: -B: invalid context length argument
[H[2J[3J[H[2J[3J[H[2J[3J^C
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ while true; do clear; ./ex1 | head -n 10 ; sleep 3 ; done
[?2004l[H[2J[3J[H[2J[3J^C
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ while true; do clear; ./ex1 | head -n 10 ; sleep 3 ; done[H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ while true; do clear; ./ex1 | head -n 10 ; sleep 3 ; done
[?2004l[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
[H[2J[3J       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
^C
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ while true; do clear; ./ex1 | head -n 10 ; sleep 3 ; done[C[C./ex1 [K[H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex1 
[?2004l       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              with  -l,  scale  sizes  by  SIZE  when  printing  them;  e.g.,
              '--block-size=M'; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with  -lt:  sort by, and show, ctime (time of last modification
              of file status information); with -l: show ctime  and  sort  by
              name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              color the output WHEN; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     list all entries in directory order

       -F, --classify[=WHEN]
              append indicator (one of */=>@|) to entries WHEN

       --file-type
--
       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files; can be augmented with a  --sort
              option, but any use of --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
--
              append  indicator  with  style  WORD  to entry names: none (de‚Äê
              fault), slash (-p), file-type (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for file system  usage;  used  only
              with -s and per directory totals

       -l     use a long listing format

       -L, --dereference
              when  showing file information for a symbolic link, show infor‚Äê
              mation for the file the link references  rather  than  for  the
              link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print entry names without quoting

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show  nongraphic  characters as-is (the default, unless program
              is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
--
              shell-always,   shell-escape,  shell-escape-always,  c,  escape
              (overrides QUOTING_STYLE environment variable)

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size, largest first

       --sort=WORD
              sort by WORD instead of name: none (-U), size (-S), time  (-t),
--
       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below

       -t     sort by time, newest first; see --time

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show  access
              time  and  sort by name; otherwise: sort by access time, newest
              first

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              set output width to COLS.  0 means no limit

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       --zero end each output line with NUL, not newline
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ q[K[H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex2 
[?2004l../../extext/richard.txt:Richard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
../../extext/richard.txt:
../../extext/richard.txt:Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
../../extext/richard.txt:
../../extext/richard.txt:Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]
../../extext/richard.txt:
../../extext/richard.txt:In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.
../../extext/richard.txt:
../../extext/richard.txt:In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.
../../extext/richard.txt:
../../extext/richard.txt:Early life
../../extext/richard.txt:Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]
../../extext/richard.txt:
../../extext/richard.txt:His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]
../../extext/richard.txt:
../../extext/richard.txt:Harvard University and MIT
../../extext/richard.txt:As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]
../../extext/richard.txt:
../../extext/richard.txt:In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]
../../extext/richard.txt:
../../extext/richard.txt:While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]
../../extext/richard.txt:
../../extext/richard.txt:As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]
../../extext/richard.txt:
../../extext/richard.txt:Events leading to GNU
../../extext/richard.txt:In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]
../../extext/richard.txt:
../../extext/richard.txt:When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]
../../extext/richard.txt:
../../extext/richard.txt:In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]
../../extext/richard.txt:
../../extext/richard.txt:Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]
../../extext/richard.txt:
../../extext/richard.txt:Stallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]
../../extext/richard.txt:
../../extext/richard.txt:In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]
../../extext/richard.txt:
../../extext/richard.txt:GNU project
../../extext/richard.txt:Main article: GNU Project
../../extext/richard.txt:Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]
../../extext/richard.txt:
../../extext/richard.txt:
../../extext/richard.txt:Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
../../extext/richard.txt:In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]
../../extext/richard.txt:
../../extext/richard.txt:Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.
../../extext/richard.txt:
../../extext/richard.txt:Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.
../../extext/richard.txt:
../../extext/richard.txt:In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.
../../extext/richard.txt:
../../extext/richard.txt:Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]
../../extext/richard.txt:
../../extext/richard.txt:In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:
../../extext/richard.txt:
../../extext/richard.txt:There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]
../../extext/richard.txt:
../../extext/richard.txt:In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]
../../extext/richard.txt:
../../extext/richard.txt:In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]
../../extext/richard.txt:
../../extext/richard.txt:Activism
../../extext/richard.txt:Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]
../../extext/richard.txt:
../../extext/richard.txt:Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]
../../extext/richard.txt:
../../extext/richard.txt:In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]
../../extext/richard.txt:
../../extext/richard.txt:
../../extext/richard.txt:Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
../../extext/richard.txt:In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]
../../extext/richard.txt:
../../extext/richard.txt:After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]
../../extext/richard.txt:
../../extext/richard.txt:Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.
../../extext/richard.txt:
../../extext/richard.txt:Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]
../../extext/richard.txt:
../../extext/richard.txt:
../../extext/richard.txt:Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
../../extext/richard.txt:Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]
../../extext/richard.txt:
../../extext/richard.txt:For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]
../../extext/richard.txt:
../../extext/richard.txt:Copyright reduction
../../extext/richard.txt:Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]
../../extext/richard.txt:
../../extext/richard.txt:He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]
../../extext/richard.txt:
../../extext/richard.txt:Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]
../../extext/richard.txt:
../../extext/richard.txt:
../../extext/richard.txt:Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
../../extext/richard.txt:Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]
../../extext/richard.txt:
../../extext/richard.txt:Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]
../../extext/richard.txt:
../../extext/richard.txt:Terminologies
../../extext/richard.txt:
../../extext/richard.txt:Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
../../extext/richard.txt:Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]
../../extext/richard.txt:
../../extext/richard.txt:Stallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:
../../extext/richard.txt:
../../extext/richard.txt:These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]
../../extext/richard.txt:
../../extext/richard.txt:Open source and Free software
../../extext/richard.txt:His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.
../../extext/richard.txt:
../../extext/richard.txt:Linux and GNU
../../extext/richard.txt:Main article: GNU/Linux naming controversy
../../extext/richard.txt:Stallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]
../../extext/richard.txt:
../../extext/richard.txt:Surveillance resistance
../../extext/richard.txt:Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]
../../extext/richard.txt:
../../extext/richard.txt:He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]
../../extext/richard.txt:
../../extext/richard.txt:Comments about Jeffrey Epstein scandal
../../extext/richard.txt:In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]
../../extext/richard.txt:
../../extext/richard.txt:Stallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]
../../extext/richard.txt:
../../extext/richard.txt:On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]
../../extext/richard.txt:
../../extext/richard.txt:Return to FSF
../../extext/richard.txt:In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]
../../extext/richard.txt:
../../extext/richard.txt:Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]
../../extext/richard.txt:
../../extext/richard.txt:Personal life
../../extext/richard.txt:
../../extext/richard.txt:Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
../../extext/richard.txt:Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]
../../extext/richard.txt:
../../extext/richard.txt:Stallman has written a collection of filk music and parody songs.[152]
../../extext/richard.txt:
../../extext/richard.txt:In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]
../../extext/richard.txt:
../../extext/linux.txt:Linux (/Ààl…™n äks/ LIN-uuks[16]) is a family of open source Unix-like operating systems based on the Linux kernel,[17] an operating system kernel first released on September 17, 1991, by Linus Torvalds.[18][19][20] Linux is typically packaged as a Linux distribution (distro), which includes the kernel and supporting system software and libraries‚Äîmost of which are provided by third parties‚Äîto create a complete operating system, designed as a clone of Unix and released under the copyleft GPL license.[21]
../../extext/linux.txt:
../../extext/linux.txt:Thousands of Linux distributions exist, many based directly or indirectly on other distributions;[22][23] popular Linux distributions[24][25][26] include Debian, Fedora Linux, Linux Mint, Arch Linux, and Ubuntu, while commercial distributions include Red Hat Enterprise Linux, SUSE Linux Enterprise, and ChromeOS. Linux distributions are frequently used in server platforms.[27][28] Many Linux distributions use the word "Linux" in their name, but the Free Software Foundation uses and recommends the name "GNU/Linux" to emphasize the use and importance of GNU software in many distributions, causing some controversy.[29][30] Other than the Linux kernel, key components that make up a distribution may include a display server (windowing system), a package manager, a bootloader and a Unix shell.
../../extext/linux.txt:
../../extext/linux.txt:Linux is one of the most prominent examples of free and open-source software collaboration. While originally developed for x86 based personal computers, it has since been ported to more platforms than any other operating system,[31] and is used on a wide variety of devices including PCs, workstations, mainframes and embedded systems. Linux is the predominant operating system for servers and is also used on all of the world's 500 fastest supercomputers.[g] When combined with Android, which is Linux-based and designed for smartphones, they have the largest installed base of all general-purpose operating systems.
../../extext/linux.txt:
../../extext/linux.txt:Overview
../../extext/linux.txt:The Linux kernel was designed by Linus Torvalds, following the lack of a working kernel for GNU, a Unix-compatible operating system made entirely of free software that had been undergoing development since 1983 by Richard Stallman. A working Unix system called Minix was later released but its license was not entirely free at the time[32] and it was made for an educative purpose. The first entirely free Unix for personal computers, 386BSD, did not appear until 1992, by which time Torvalds had already built and publicly released the first version of the Linux kernel on the Internet.[33] Like GNU and 386BSD, Linux did not have any Unix code, being a fresh reimplementation, and therefore avoided the then legal issues.[34] Linux distributions became popular in the 1990s and effectively made Unix technologies accessible to home users on personal computers whereas previously it had been confined to sophisticated workstations.[35]
../../extext/linux.txt:
../../extext/linux.txt:Desktop Linux distributions include a windowing system such as X11 or Wayland and a desktop environment such as GNOME, KDE Plasma or Xfce. Distributions intended for servers may not have a graphical user interface at all or include a solution stack such as LAMP.
../../extext/linux.txt:
../../extext/linux.txt:The source code of Linux may be used, modified, and distributed commercially or non-commercially by anyone under the terms of its respective licenses, such as the GNU General Public License (GPL). The license means creating novel distributions is permitted by anyone[36] and is easier than it would be for an operating system such as MacOS or Microsoft Windows.[37][38][39] The Linux kernel, for example, is licensed under the GPLv2, with an exception for system calls that allows code that calls the kernel via system calls not to be licensed under the GPL.[40][41][36]
../../extext/linux.txt:
../../extext/linux.txt:Because of the dominance of Linux-based Android on smartphones, Linux, including Android, has the largest installed base of all general-purpose operating systems as of May 2022.[42][43][44] Linux is, as of March 2024, used by around 4 percent of desktop computers.[45] The Chromebook, which runs the Linux kernel-based ChromeOS,[46][47] dominates the US K‚Äì12 education market and represents nearly 20 percent of sub-$300 notebook sales in the US.[48] Linux is the leading operating system on servers (over 96.4% of the top one million web servers' operating systems are Linux),[49] leads other big iron systems such as mainframe computers,[clarification needed][50] and is used on all of the world's 500 fastest supercomputers[h] (as of November 2017, having gradually displaced all competitors).[51][52]
../../extext/linux.txt:
../../extext/linux.txt:Linux also runs on embedded systems, i.e., devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes routers, automation controls, smart home devices, video game consoles, televisions (Samsung and LG smart TVs),[53][54][55] automobiles (Tesla, Audi, Mercedes-Benz, Hyundai, and Toyota),[56] and spacecraft (Falcon 9 rocket, Dragon crew capsule, and the Ingenuity Mars helicopter).[57][58]
../../extext/linux.txt:
../../extext/linux.txt:History
../../extext/linux.txt:Main article: History of Linux
../../extext/linux.txt:Precursors
../../extext/linux.txt:
../../extext/linux.txt:Linus Torvalds, principal author of the Linux kernel
../../extext/linux.txt:The Unix operating system was conceived of and implemented in 1969, at AT&T's Bell Labs in the United States, by Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna.[59] First released in 1971, Unix was written entirely in assembly language, as was common practice at the time. In 1973, in a key pioneering approach, it was rewritten in the C programming language by Dennis Ritchie (except for some hardware and I/O routines). The availability of a high-level language implementation of Unix made its porting to different computer platforms easier.[60]
../../extext/linux.txt:
../../extext/linux.txt:As a 1956 antitrust case forbade AT&T from entering the computer business,[61] AT&T provided the operating system's source code to anyone who asked. As a result, Unix use grew quickly and it became widely adopted by academic institutions and businesses. In 1984, AT&T divested itself of its regional operating companies, and was released from its obligation not to enter the computer business; freed of that obligation, Bell Labs began selling Unix as a proprietary product, where users were not legally allowed to modify it.[62][63]
../../extext/linux.txt:
../../extext/linux.txt:Onyx Systems began selling early microcomputer-based Unix workstations in 1980. Later, Sun Microsystems, founded as a spin-off of a student project at Stanford University, also began selling Unix-based desktop workstations in 1982. While Sun workstations did not use commodity PC hardware, for which Linux was later originally developed, it represented the first successful commercial attempt at distributing a primarily single-user microcomputer that ran a Unix operating system.[64][65]
../../extext/linux.txt:
../../extext/linux.txt:With Unix increasingly "locked in" as a proprietary product, the GNU Project, started in 1983 by Richard Stallman, had the goal of creating a "complete Unix-compatible software system" composed entirely of free software. Work began in 1984.[66] Later, in 1985, Stallman started the Free Software Foundation and wrote the GNU General Public License (GNU GPL) in 1989. By the early 1990s, many of the programs required in an operating system (such as libraries, compilers, text editors, a command-line shell, and a windowing system) were completed, although low-level elements such as device drivers, daemons, and the kernel, called GNU Hurd, were stalled and incomplete.[67]
../../extext/linux.txt:
../../extext/linux.txt:Minix was created by Andrew S. Tanenbaum, a computer science professor, and released in 1987 as a minimal Unix-like operating system targeted at students and others who wanted to learn operating system principles. Although the complete source code of Minix was freely available, the licensing terms prevented it from being free software until the licensing changed in April 2000.[68]
../../extext/linux.txt:
../../extext/linux.txt:Creation
../../extext/linux.txt:While attending the University of Helsinki in the fall of 1990, Torvalds enrolled in a Unix course.[69] The course used a MicroVAX minicomputer running Ultrix, and one of the required texts was Operating Systems: Design and Implementation by Andrew S. Tanenbaum. This textbook included a copy of Tanenbaum's Minix operating system. It was with this course that Torvalds first became exposed to Unix. In 1991, he became curious about operating systems.[70] Frustrated by the licensing of Minix, which at the time limited it to educational use only,[68] he began to work on his operating system kernel, which eventually became the Linux kernel.
../../extext/linux.txt:
../../extext/linux.txt:On July 3, 1991, to implement Unix system calls, Linus Torvalds attempted unsuccessfully to obtain a digital copy of the POSIX standards documentation with a request to the comp.os.minix newsgroup.[71] After not finding the POSIX documentation, Torvalds initially resorted to determining system calls from SunOS documentation owned by the university for use in operating its Sun Microsystems server. He also learned some system calls from Tanenbaum's Minix text.
../../extext/linux.txt:
../../extext/linux.txt:Torvalds began the development of the Linux kernel on Minix and applications written for Minix were also used on Linux. Later, Linux matured and further Linux kernel development took place on Linux systems.[72] GNU applications also replaced all Minix components, because it was advantageous to use the freely available code from the GNU Project with the fledgling operating system; code licensed under the GNU GPL can be reused in other computer programs as long as they also are released under the same or a compatible license. Torvalds initiated a switch from his original license, which prohibited commercial redistribution, to the GNU GPL.[73] Developers worked to integrate GNU components with the Linux kernel, creating a fully functional and free operating system.[74]
../../extext/linux.txt:
../../extext/linux.txt:Although not released until 1992, due to legal complications, the development of 386BSD, from which NetBSD, OpenBSD and FreeBSD descended, predated that of Linux. Linus Torvalds has stated that if the GNU kernel or 386BSD had been available in 1991, he probably would not have created Linux.[75][32]
../../extext/linux.txt:
../../extext/linux.txt:Naming
../../extext/linux.txt:
../../extext/linux.txt:5.25-inch floppy disks holding a very early version of Linux
../../extext/linux.txt:Linus Torvalds had wanted to call his invention "Freax", a portmanteau of "free", "freak", and "x" (as an allusion to Unix). During the start of his work on the system, some of the project's makefiles included the name "Freax" for about half a year. Torvalds considered the name "Linux" but dismissed it as too egotistical.[76]
../../extext/linux.txt:
../../extext/linux.txt:To facilitate development, the files were uploaded to the FTP server of FUNET in September 1991. Ari Lemmke, Torvalds' coworker at the Helsinki University of Technology (HUT) who was one of the volunteer administrators for the FTP server at the time, did not think that "Freax" was a good name, so he named the project "Linux" on the server without consulting Torvalds.[76] Later, however, Torvalds consented to "Linux".
../../extext/linux.txt:
../../extext/linux.txt:According to a newsgroup post by Torvalds,[16] the word "Linux" should be pronounced (/Ààl…™n äks/ ‚ìò LIN-uuks) with a short 'i' as in 'print' and 'u' as in 'put'. To further demonstrate how the word "Linux" should be pronounced, he included an audio guide with the kernel source code.[77] However, in this recording, he pronounces Linux as /Ààlin äks/ (LEEN-uuks) with a short but close front unrounded vowel, instead of a near-close near-front unrounded vowel as in his newsgroup post.
../../extext/linux.txt:
../../extext/linux.txt:Commercial and popular uptake
../../extext/linux.txt:Main article: Linux adoption
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:From top-left clockwise: Nexus 5X running Android, Chromebooks, server platform, In-flight entertainment system
../../extext/linux.txt:The adoption of Linux in production environments, rather than being used only by hobbyists, started to take off first in the mid-1990s in the supercomputing community, where organizations such as NASA started replacing their increasingly expensive machines with clusters of inexpensive commodity computers running Linux. Commercial use began when Dell and IBM, followed by Hewlett-Packard, started offering Linux support to escape Microsoft's monopoly in the desktop operating system market.[78]
../../extext/linux.txt:
../../extext/linux.txt:Today, Linux systems are used throughout computing, from embedded systems to virtually all supercomputers,[52][79] and have secured a place in server installations such as the popular LAMP application stack. The use of Linux distributions in home and enterprise desktops has been growing.[80][81][82][83][84][85][86]
../../extext/linux.txt:
../../extext/linux.txt:Linux distributions have also become popular in the netbook market, with many devices shipping with customized Linux distributions installed, and Google releasing their own ChromeOS designed for netbooks.
../../extext/linux.txt:
../../extext/linux.txt:Linux's greatest success in the consumer market is perhaps the mobile device market, with Android being the dominant operating system on smartphones and very popular on tablets and, more recently, on wearables, and vehicles. Linux gaming is also on the rise with Valve showing its support for Linux and rolling out SteamOS, its own gaming-oriented Linux distribution, which was later implemented in their Steam Deck platform. Linux distributions have also gained popularity with various local and national governments, such as the federal government of Brazil.[87]
../../extext/linux.txt:
../../extext/linux.txt:Development
../../extext/linux.txt:Linus Torvalds is the lead maintainer for the Linux kernel and guides its development, while Greg Kroah-Hartman is the lead maintainer for the stable branch.[88] Zo√´ Kooyman is the executive director of the Free Software Foundation,[89] which in turn supports the GNU components.[90] Finally, individuals and corporations develop third-party non-GNU components. These third-party components comprise a vast body of work and may include both kernel modules and user applications and libraries.
../../extext/linux.txt:
../../extext/linux.txt:Linux vendors and communities combine and distribute the kernel, GNU components, and non-GNU components, with additional package management software in the form of Linux distributions.
../../extext/linux.txt:
../../extext/linux.txt:Design
../../extext/linux.txt:See also: Linux kernel ¬ß Architecture and features
../../extext/linux.txt:Many developers of open-source software agree that the Linux kernel was not designed but rather evolved through natural selection. Torvalds considers that although the design of Unix served as a scaffolding, "Linux grew with a lot of mutations ‚Äì and because the mutations were less than random, they were faster and more directed than alpha-particles in DNA."[91] Eric S. Raymond considers Linux's revolutionary aspects to be social, not technical: before Linux, complex software was designed carefully by small groups, but "Linux evolved in a completely different way. From nearly the beginning, it was rather casually hacked on by huge numbers of volunteers coordinating only through the Internet. Quality was maintained not by rigid standards or autocracy but by the naively simple strategy of releasing every week and getting feedback from hundreds of users within days, creating a sort of rapid Darwinian selection on the mutations introduced by developers."[92] Bryan Cantrill, an engineer of a competing OS, agrees that "Linux wasn't designed, it evolved", but considers this to be a limitation, proposing that some features, especially those related to security,[93] cannot be evolved into, "this is not a biological system at the end of the day, it's a software system."[94]
../../extext/linux.txt:
../../extext/linux.txt:A Linux-based system is a modular Unix-like operating system, deriving much of its basic design from principles established in Unix during the 1970s and 1980s. Such a system uses a monolithic kernel, the Linux kernel, which handles process control, networking, access to the peripherals, and file systems. Device drivers are either integrated directly with the kernel or added as modules that are loaded while the system is running.[95]
../../extext/linux.txt:
../../extext/linux.txt:The GNU userland is a key part of most systems based on the Linux kernel, with Android being a notable exception. The GNU C library, an implementation of the C standard library, works as a wrapper for the system calls of the Linux kernel necessary to the kernel-userspace interface, the toolchain is a broad collection of programming tools vital to Linux development (including the compilers used to build the Linux kernel itself), and the coreutils implement many basic Unix tools. The GNU Project also develops Bash, a popular CLI shell. The graphical user interface (or GUI) used by most Linux systems is built on top of an implementation of the X Window System.[96] More recently, some of the Linux community has sought to move to using Wayland as the display server protocol, replacing X11.[97][98]
../../extext/linux.txt:
../../extext/linux.txt:Many other open-source software projects contribute to Linux systems.
../../extext/linux.txt:
../../extext/linux.txt:Various layers within Linux, also showing separation between the userland and kernel space
../../extext/linux.txt:User mode	User applications	bash, LibreOffice, GIMP, Blender, 0 A.D., Mozilla Firefox, ...
../../extext/linux.txt:System components	init daemon:
../../extext/linux.txt:OpenRC, runit, systemd...	System daemons:
../../extext/linux.txt:polkitd, smbd, sshd, udevd...	Windowing system:
../../extext/linux.txt:X11, Wayland, SurfaceFlinger (Android)	Graphics:
../../extext/linux.txt:Mesa, AMD Catalyst, ...	Other libraries:
../../extext/linux.txt:GTK, Qt, EFL, SDL, SFML, FLTK, GNUstep, ...
../../extext/linux.txt:C standard library	fopen, execv, malloc, memcpy, localtime, pthread_create... (up to 2000 subroutines)
../../extext/linux.txt:glibc aims to be fast, musl aims to be lightweight, uClibc targets embedded systems, bionic was written for Android, etc. All aim to be POSIX/SUS-compatible.
../../extext/linux.txt:Kernel mode	Linux kernel	stat, splice, dup, read, open, ioctl, write, mmap, close, exit, etc. (about 380 system calls)
../../extext/linux.txt:The Linux kernel System Call Interface (SCI), aims to be POSIX/SUS-compatible[99]
../../extext/linux.txt:Process scheduling subsystem	IPC subsystem	Memory management subsystem	Virtual files subsystem	Networking subsystem
../../extext/linux.txt:Other components: ALSA, DRI, evdev, klibc, LVM, device mapper, Linux Network Scheduler, Netfilter
../../extext/linux.txt:Linux Security Modules: SELinux, TOMOYO, AppArmor, Smack
../../extext/linux.txt:Hardware (CPU, main memory, data storage devices, etc.)
../../extext/linux.txt:Installed components of a Linux system include the following:[96][100]
../../extext/linux.txt:
../../extext/linux.txt:A bootloader, for example GNU GRUB, LILO, SYSLINUX or systemd-boot. This is a program that loads the Linux kernel into the computer's main memory, by being executed by the computer when it is turned on and after the firmware initialization is performed.
../../extext/linux.txt:An init program, such as the traditional sysvinit and the newer systemd, OpenRC and Upstart. This is the first process launched by the Linux kernel, and is at the root of the process tree. It starts processes such as system services and login prompts (whether graphical or in terminal mode).
../../extext/linux.txt:Software libraries, which contain code that can be used by running processes. On Linux systems using ELF-format executable files, the dynamic linker that manages the use of dynamic libraries is known as ld-linux.so. If the system is set up for the user to compile software themselves, header files will also be included to describe the programming interface of installed libraries. Besides the most commonly used software library on Linux systems, the GNU C Library (glibc), there are numerous other libraries, such as SDL and Mesa.
../../extext/linux.txt:The C standard library is the library necessary to run programs written in C on a computer system, with the GNU C Library being the standard. It provides an implementation of the POSIX API, as well as extensions to that API. For embedded systems, alternatives such as musl, EGLIBC (a glibc fork once used by Debian) and uClibc (which was designed for uClinux) have been developed, although the last two are no longer maintained. Android uses its own C library, Bionic. However, musl can additionally be used as a replacement for glibc on desktop and laptop systems, as seen on certain Linux distributions like Void Linux.
../../extext/linux.txt:Basic Unix commands, with GNU coreutils being the standard implementation. Alternatives exist for embedded systems, such as the copyleft BusyBox, and the BSD-licensed Toybox.
../../extext/linux.txt:Widget toolkits are the libraries used to build graphical user interfaces (GUIs) for software applications. Numerous widget toolkits are available, including GTK and Clutter developed by the GNOME Project, Qt developed by the Qt Project and led by The Qt Company, and Enlightenment Foundation Libraries (EFL) developed primarily by the Enlightenment team.
../../extext/linux.txt:A package management system, such as dpkg and RPM. Alternatively packages can be compiled from binary or source tarballs.
../../extext/linux.txt:User interface programs such as command shells or windowing environments.
../../extext/linux.txt:User interface
../../extext/linux.txt:The user interface, also known as the shell, is either a command-line interface (CLI), a graphical user interface (GUI), or controls attached to the associated hardware, which is common for embedded systems. For desktop systems, the default user interface is usually graphical, although the CLI is commonly available through terminal emulator windows or on a separate virtual console.
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:GNOME Shell
../../extext/linux.txt:CLI shells are text-based user interfaces, which use text for both input and output. The dominant shell used in Linux is the Bourne-Again Shell (bash), originally developed for the GNU Project; other shells such as Zsh are also used.[101][102] Most low-level Linux components, including various parts of the userland, use the CLI exclusively. The CLI is particularly suited for automation of repetitive or delayed tasks and provides very simple inter-process communication.
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:Debian running the Xfce desktop environment
../../extext/linux.txt:
../../extext/linux.txt:Fedora Linux running the Plasma desktop environment
../../extext/linux.txt:On desktop systems, the most popular user interfaces are the GUI shells, packaged together with extensive desktop environments, such as KDE Plasma, GNOME, MATE, Cinnamon, LXDE, Pantheon, and Xfce, though a variety of additional user interfaces exist. Most popular user interfaces are based on the X Window System, often simply called "X" or "X11". It provides network transparency and permits a graphical application running on one system to be displayed on another where a user may interact with the application; however, certain extensions of the X Window System are not capable of working over the network.[103] Several X display servers exist, with the reference implementation, X.Org Server, being the most popular.
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:I3 Tiling window manager
../../extext/linux.txt:Several types of window managers exist for X11, including tiling, dynamic, stacking, and compositing. Window managers provide means to control the placement and appearance of individual application windows, and interact with the X Window System. Simpler X window managers such as dwm, ratpoison, or i3wm provide a minimalist functionality, while more elaborate window managers such as FVWM, Enlightenment, or Window Maker provide more features such as a built-in taskbar and themes, but are still lightweight when compared to desktop environments. Desktop environments include window managers as part of their standard installations, such as Mutter (GNOME), KWin (KDE), or Xfwm (xfce), although users may choose to use a different window manager if preferred.
../../extext/linux.txt:
../../extext/linux.txt:Wayland is a display server protocol intended as a replacement for the X11 protocol; as of 2022, it has received relatively wide adoption.[104] Unlike X11, Wayland does not need an external window manager and compositing manager. Therefore, a Wayland compositor takes the role of the display server, window manager, and compositing manager. Weston is the reference implementation of Wayland, while GNOME's Mutter and KDE's KWin are being ported to Wayland as standalone display servers. Enlightenment has already been successfully ported since version 19.[105] Additionally, many window managers have been made for Wayland, such as Sway or Hyprland, as well as other graphical utilities such as Waybar or Rofi.
../../extext/linux.txt:
../../extext/linux.txt:Video input infrastructure
../../extext/linux.txt:Main article: Video4Linux
../../extext/linux.txt:Linux currently has two modern kernel-userspace APIs for handling video input devices: V4L2 API for video streams and radio, and DVB API for digital TV reception.[106]
../../extext/linux.txt:
../../extext/linux.txt:Due to the complexity and diversity of different devices, and due to the large number of formats and standards handled by those APIs, this infrastructure needs to evolve to better fit other devices. Also, a good userspace device library is the key to the success of having userspace applications to be able to work with all formats supported by those devices.[107][108]
../../extext/linux.txt:
../../extext/linux.txt:Development
../../extext/linux.txt:Main articles: Linux distribution and Free software
../../extext/linux.txt:
../../extext/linux.txt:Simplified history of Unix-like operating systems. Linux shares similar architecture and concepts (as part of the POSIX standard) but does not share non-free source code with the original Unix or Minix.
../../extext/linux.txt:The primary difference between Linux and many other popular contemporary operating systems is that the Linux kernel and other components are free and open-source software. Linux is not the only such operating system, although it is by far the most widely used.[109] Some free and open-source software licenses are based on the principle of copyleft, a kind of reciprocity: any work derived from a copyleft piece of software must also be copyleft itself. The most common free software license, the GNU General Public License (GPL), is a form of copyleft and is used for the Linux kernel and many of the components from the GNU Project.[110]
../../extext/linux.txt:
../../extext/linux.txt:Linux-based distributions are intended by developers for interoperability with other operating systems and established computing standards. Linux systems adhere to POSIX,[111] Single UNIX Specification (SUS),[112] Linux Standard Base (LSB), ISO, and ANSI standards where possible, although to date only one Linux distribution has been POSIX.1 certified, Linux-FT.[113][114] The Open Group has tested and certified at least two Linux distributions as qualifying for the Unix trademark, EulerOS and Inspur K-UX.[115]
../../extext/linux.txt:
../../extext/linux.txt:Free software projects, although developed through collaboration, are often produced independently of each other. The fact that the software licenses explicitly permit redistribution, however, provides a basis for larger-scale projects that collect the software produced by stand-alone projects and make it available all at once in the form of a Linux distribution.
../../extext/linux.txt:
../../extext/linux.txt:Many Linux distributions manage a remote collection of system software and application software packages available for download and installation through a network connection. This allows users to adapt the operating system to their specific needs. Distributions are maintained by individuals, loose-knit teams, volunteer organizations, and commercial entities. A distribution is responsible for the default configuration of the installed Linux kernel, general system security, and more generally integration of the different software packages into a coherent whole. Distributions typically use a package manager such as apt, yum, zypper, pacman or portage to install, remove, and update all of a system's software from one central location.[116]
../../extext/linux.txt:
../../extext/linux.txt:Community
../../extext/linux.txt:See also: Free software movement and Linux user group
../../extext/linux.txt:A distribution is largely driven by its developer and user communities. Some vendors develop and fund their distributions on a volunteer basis, Debian being a well-known example. Others maintain a community version of their commercial distributions, as Red Hat does with Fedora, and SUSE does with openSUSE.[117][118]
../../extext/linux.txt:
../../extext/linux.txt:In many cities and regions, local associations known as Linux User Groups (LUGs) seek to promote their preferred distribution and by extension free software. They hold meetings and provide free demonstrations, training, technical support, and operating system installation to new users. Many Internet communities also provide support to Linux users and developers. Most distributions and free software / open-source projects have IRC chatrooms or newsgroups. Online forums are another means of support, with notable examples being Unix & Linux Stack Exchange,[119][120] LinuxQuestions.org and the various distribution-specific support and community forums, such as ones for Ubuntu, Fedora, Arch Linux, Gentoo, etc. Linux distributions host mailing lists; commonly there will be a specific topic such as usage or development for a given list.
../../extext/linux.txt:
../../extext/linux.txt:There are several technology websites with a Linux focus. Print magazines on Linux often bundle cover disks that carry software or even complete Linux distributions.[121][122]
../../extext/linux.txt:
../../extext/linux.txt:Although Linux distributions are generally available without charge, several large corporations sell, support, and contribute to the development of the components of the system and free software. An analysis of the Linux kernel in 2017 showed that well over 85% of the code was developed by programmers who are being paid for their work, leaving about 8.2% to unpaid developers and 4.1% unclassified.[123] Some of the major corporations that provide contributions include Intel, Samsung, Google, AMD, Oracle, and Facebook.[123] Several corporations, notably Red Hat, Canonical, and SUSE have built a significant business around Linux distributions.
../../extext/linux.txt:
../../extext/linux.txt:The free software licenses, on which the various software packages of a distribution built on the Linux kernel are based, explicitly accommodate and encourage commercialization; the relationship between a Linux distribution as a whole and individual vendors may be seen as symbiotic. One common business model of commercial suppliers is charging for support, especially for business users. A number of companies also offer a specialized business version of their distribution, which adds proprietary support packages and tools to administer higher numbers of installations or to simplify administrative tasks.[124]
../../extext/linux.txt:
../../extext/linux.txt:Another business model is to give away the software to sell hardware. This used to be the norm in the computer industry, with operating systems such as CP/M, Apple DOS, and versions of the classic Mac OS before 7.6 freely copyable (but not modifiable). As computer hardware standardized throughout the 1980s, it became more difficult for hardware manufacturers to profit from this tactic, as the OS would run on any manufacturer's computer that shared the same architecture.[125][126]
../../extext/linux.txt:
../../extext/linux.txt:Programming on Linux
../../extext/linux.txt:Most programming languages support Linux either directly or through third-party community based ports.[127] The original development tools used for building both Linux applications and operating system programs are found within the GNU toolchain, which includes the GNU Compiler Collection (GCC) and the GNU Build System. Amongst others, GCC provides compilers for Ada, C, C++, Go and Fortran. Many programming languages have a cross-platform reference implementation that supports Linux, for example PHP, Perl, Ruby, Python, Java, Go, Rust and Haskell. First released in 2003, the LLVM project provides an alternative cross-platform open-source compiler for many languages. Proprietary compilers for Linux include the Intel C++ Compiler, Sun Studio, and IBM XL C/C++ Compiler. BASIC is available in procedural form from QB64, PureBasic, Yabasic, GLBasic, Basic4GL, XBasic, wxBasic, SdlBasic, and Basic-256, as well as object oriented through Gambas, FreeBASIC, B4X, Basic for Qt, Phoenix Object Basic, NS Basic, ProvideX, Chipmunk Basic, RapidQ and Xojo. Pascal is implemented through GNU Pascal, Free Pascal, and Virtual Pascal, as well as graphically via Lazarus, PascalABC.NET, or Delphi using FireMonkey (previously through Borland Kylix).[128][129]
../../extext/linux.txt:
../../extext/linux.txt:A common feature of Unix-like systems, Linux includes traditional specific-purpose programming languages targeted at scripting, text processing and system configuration and management in general. Linux distributions support shell scripts, awk, sed and make. Many programs also have an embedded programming language to support configuring or programming themselves. For example, regular expressions are supported in programs like grep and locate, the traditional Unix message transfer agent Sendmail contains its own Turing complete scripting system, and the advanced text editor GNU Emacs is built around a general purpose Lisp interpreter.[130][131][132]
../../extext/linux.txt:
../../extext/linux.txt:Most distributions also include support for PHP, Perl, Ruby, Python and other dynamic languages. While not as common, Linux also supports C# and other CLI languages (via Mono), Vala, and Scheme. Guile Scheme acts as an extension language targeting the GNU system utilities, seeking to make the conventionally small, static, compiled C programs of Unix design rapidly and dynamically extensible via an elegant, functional high-level scripting system; many GNU programs can be compiled with optional Guile bindings to this end. A number of Java virtual machines and development kits run on Linux, including the original Sun Microsystems JVM (HotSpot), and IBM's J2SE RE, as well as many open-source projects like Kaffe and Jikes RVM; Kotlin, Scala, Groovy and other JVM languages are also available.
../../extext/linux.txt:
../../extext/linux.txt:GNOME and KDE are popular desktop environments and provide a framework for developing applications. These projects are based on the GTK and Qt widget toolkits, respectively, which can also be used independently of the larger framework. Both support a wide variety of languages. There are a number of Integrated development environments available including Anjuta, Code::Blocks, CodeLite, Eclipse, Geany, ActiveState Komodo, KDevelop, Lazarus, MonoDevelop, NetBeans, and Qt Creator, while the long-established editors Vim, nano and Emacs remain popular.[133]
../../extext/linux.txt:
../../extext/linux.txt:Hardware support
../../extext/linux.txt:
../../extext/linux.txt:Linux is ubiquitously found on various types of hardware.
../../extext/linux.txt:See also: List of Linux-supported computer architectures
../../extext/linux.txt:The Linux kernel is a widely ported operating system kernel, available for devices ranging from mobile phones to supercomputers; it runs on a highly diverse range of computer architectures, including ARM-based Android smartphones and the IBM Z mainframes. Specialized distributions and kernel forks exist for less mainstream architectures; for example, the ELKS kernel fork can run on Intel 8086 or Intel 80286 16-bit microprocessors,[134] while the ŒºClinux kernel fork may run on systems without a memory management unit.[135] The kernel also runs on architectures that were only ever intended to use a proprietary manufacturer-created operating system, such as Macintosh computers[136][137] (with PowerPC, Intel, and Apple silicon processors), PDAs, video game consoles, portable music players, and mobile phones.
../../extext/linux.txt:
../../extext/linux.txt:Linux has a reputation for supporting old hardware very well by maintaining standardized drivers for a long time.[138] There are several industry associations and hardware conferences devoted to maintaining and improving support for diverse hardware under Linux, such as FreedomHEC. Over time, support for different hardware has improved in Linux, resulting in any off-the-shelf purchase having a "good chance" of being compatible.[139]
../../extext/linux.txt:
../../extext/linux.txt:In 2014, a new initiative was launched to automatically collect a database of all tested hardware configurations.[140]
../../extext/linux.txt:
../../extext/linux.txt:Uses
../../extext/linux.txt:Main article: Linux range of use
../../extext/linux.txt:Market share and uptake
../../extext/linux.txt:Main article: Linux adoption
../../extext/linux.txt:See also: Usage share of operating systems
../../extext/linux.txt:Many quantitative studies of free/open-source software focus on topics including market share and reliability, with numerous studies specifically examining Linux.[141] The Linux market is growing, and the Linux operating system market size is expected to see a growth of 19.2% by 2027, reaching $15.64 billion, compared to $3.89 billion in 2019.[142] Analysts project a Compound Annual Growth Rate (CAGR) of 13.7% between 2024 and 2032, culminating in a market size of US$34.90 billion by the latter year.[citation needed] Analysts and proponents attribute the relative success of Linux to its security, reliability, low cost, and freedom from vendor lock-in.[143][144]
../../extext/linux.txt:
../../extext/linux.txt:Desktops and laptops
../../extext/linux.txt:According to web server statistics (that is, based on the numbers recorded from visits to websites by client devices), in October 2024, the estimated market share of Linux on desktop computers was around 4.3%. In comparison, Microsoft Windows had a market share of around 73.4%, while macOS covered around 15.5%.[45]
../../extext/linux.txt:Web servers
../../extext/linux.txt:W3Cook publishes stats that use the top 1,000,000 Alexa domains,[145] which as of May 2015 estimate that 96.55% of web servers run Linux, 1.73% run Windows, and 1.72% run FreeBSD.[146]
../../extext/linux.txt:W3Techs publishes stats that use the top 10,000,000 Alexa domains and the top 1,000,000 Tranco domains, updated monthly[147] and as of November 2020 estimate that Linux is used by 39% of the web servers, versus 21.9% being used by Microsoft Windows.[148] 40.1% used other types of Unix.[149]
../../extext/linux.txt:IDC's Q1 2007 report indicated that Linux held 12.7% of the overall server market at that time;[150] this estimate was based on the number of Linux servers sold by various companies, and did not include server hardware purchased separately that had Linux installed on it later.
../../extext/linux.txt:As of 2024, estimates suggest Linux accounts for at least 80% of the public cloud workload, partly thanks to its widespread use in platforms like Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform.[151][152][153]
../../extext/linux.txt:
../../extext/linux.txt:ZDNet report that 96.3% of the top one million web servers are running Linux.[154][155] W3Techs state that Linux powers at least 39.2% of websites whose operating system is known, with other estimates saying 55%.[156][157]
../../extext/linux.txt:
../../extext/linux.txt:Mobile devices
../../extext/linux.txt:Android, which is based on the Linux kernel, has become the dominant operating system for smartphones. In April 2023, 68.61% of mobile devices accessing websites using StatCounter were from Android.[158] Android is also a popular operating system for tablets, being responsible for more than 60% of tablet sales as of 2013.[159] According to web server statistics, as of October 2021 Android has a market share of about 71%, with iOS holding 28%, and the remaining 1% attributed to various niche platforms.[160]
../../extext/linux.txt:Film production
../../extext/linux.txt:For years, Linux has been the platform of choice in the film industry. The first major film produced on Linux servers was 1997's Titanic.[161][162] Since then major studios including DreamWorks Animation, Pixar, Weta Digital, and Industrial Light & Magic have migrated to Linux.[163][164][165] According to the Linux Movies Group, more than 95% of the servers and desktops at large animation and visual effects companies use Linux.[166]
../../extext/linux.txt:Use in government
../../extext/linux.txt:Linux distributions have also gained popularity with various local and national governments. News of the Russian military creating its own Linux distribution has also surfaced, and has come to fruition as the G.H.ost Project.[167] The Indian state of Kerala has gone to the extent of mandating that all state high schools run Linux on their computers.[168][169] China uses Linux exclusively as the operating system for its Loongson processor family to achieve technology independence.[170] In Spain, some regions have developed their own Linux distributions, which are widely used in education and official institutions, like gnuLinEx in Extremadura and Guadalinex in Andalusia. France and Germany have also taken steps toward the adoption of Linux.[171] North Korea's Red Star OS, developed as of 2002, is based on a version of Fedora Linux.[172]
../../extext/linux.txt:Copyright, trademark, and naming
../../extext/linux.txt:See also: GNU/Linux naming controversy and SCO‚ÄìLinux disputes
../../extext/linux.txt:The Linux kernel is licensed under the GNU General Public License (GPL), version 2. The GPL requires that anyone who distributes software based on source code under this license must make the originating source code (and any modifications) available to the recipient under the same terms.[173] Other key components of a typical Linux distribution are also mainly licensed under the GPL, but they may use other licenses; many libraries use the GNU Lesser General Public License (LGPL), a more permissive variant of the GPL, and the X.Org implementation of the X Window System uses the MIT License.
../../extext/linux.txt:
../../extext/linux.txt:Torvalds states that the Linux kernel will not move from version 2 of the GPL to version 3.[174][175] He specifically dislikes some provisions in the new license which prohibit the use of the software in digital rights management.[176] It would also be impractical to obtain permission from all the copyright holders, who number in the thousands.[177]
../../extext/linux.txt:
../../extext/linux.txt:A 2001 study of Red Hat Linux 7.1 found that this distribution contained 30 million source lines of code.[178] Using the Constructive Cost Model, the study estimated that this distribution required about eight thousand person-years of development time. According to the study, if all this software had been developed by conventional proprietary means, it would have cost about US$1.82 billion[179] to develop in 2023 in the United States.[178] Most of the source code (71%) was written in the C programming language, but many other languages were used, including C++, Lisp, assembly language, Perl, Python, Fortran, and various shell scripting languages. Slightly over half of all lines of code were licensed under the GPL. The Linux kernel itself was 2.4 million lines of code, or 8% of the total.[178]
../../extext/linux.txt:
../../extext/linux.txt:In a later study, the same analysis was performed for Debian version 4.0 (etch, which was released in 2007).[180] This distribution contained close to 283 million source lines of code, and the study estimated that it would have required about seventy three thousand man-years and cost US$10.2 billion[179] (in 2023 dollars) to develop by conventional means.
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:The name "Linux" is also used for a laundry detergent made by Swiss company R√∂sch.[181]
../../extext/linux.txt:In the United States, the name Linux is a trademark registered to Linus Torvalds.[15] Initially, nobody registered it. However, on August 15, 1994, William R. Della Croce Jr. filed for the trademark Linux, and then demanded royalties from Linux distributors. In 1996, Torvalds and some affected organizations sued him to have the trademark assigned to Torvalds, and, in 1997, the case was settled.[182] The licensing of the trademark has since been handled by the Linux Mark Institute (LMI). Torvalds has stated that he trademarked the name only to prevent someone else from using it. LMI originally charged a nominal sublicensing fee for use of the Linux name as part of trademarks,[183] but later changed this in favor of offering a free, perpetual worldwide sublicense.[184]
../../extext/linux.txt:
../../extext/linux.txt:
../../extext/linux.txt:Tux sometimes is stylized with incorporation of the GNU logo
../../extext/linux.txt:The Free Software Foundation (FSF) prefers GNU/Linux as the name when referring to the operating system as a whole, because it considers Linux distributions to be variants of the GNU operating system initiated in 1983 by Richard Stallman, president of the FSF.[29][30] The foundation explicitly takes no issue over the name Android for the Android OS, which is also an operating system based on the Linux kernel, as GNU is not a part of it.
../../extext/linux.txt:
../../extext/linux.txt:A minority of public figures and software projects other than Stallman and the FSF, notably distributions consisting of only free software, such as Debian (which had been sponsored by the FSF up to 1996),[185] also use GNU/Linux when referring to the operating system as a whole.[186][187][188] Most media and common usage, however, refers to this family of operating systems simply as Linux, as do many large Linux distributions (for example, SUSE Linux and Red Hat Enterprise Linux).
../../extext/linux.txt:
../../extext/linux.txt:As of May 2011, about 8% to 13% of the lines of code of the Linux distribution Ubuntu (version "Natty") is made of GNU components (the range depending on whether GNOME is considered part of GNU); meanwhile, 6% is taken by the Linux kernel, increased to 9% when including its direct dependencies.[189]
../../extext/linux.txt:
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex2 [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex2 
[?2004l../../extext/richard.txt:Richard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.
../../extext/richard.txt:Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]
../../extext/richard.txt:Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]
../../extext/richard.txt:In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.
../../extext/richard.txt:Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]
../../extext/richard.txt:His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]
../../extext/richard.txt:In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]
../../extext/richard.txt:While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]
../../extext/richard.txt:As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]
../../extext/richard.txt:In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]
../../extext/richard.txt:When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]
../../extext/richard.txt:In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]
../../extext/richard.txt:Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]
../../extext/richard.txt:In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]
../../extext/richard.txt:Main article: GNU Project
../../extext/richard.txt:Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]
../../extext/richard.txt:Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
../../extext/richard.txt:In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]
../../extext/richard.txt:Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.
../../extext/richard.txt:Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.
../../extext/richard.txt:In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.
../../extext/richard.txt:Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]
../../extext/richard.txt:In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:
../../extext/richard.txt:In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]
../../extext/richard.txt:In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]
../../extext/richard.txt:Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]
../../extext/richard.txt:Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]
../../extext/richard.txt:In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]
../../extext/richard.txt:Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]
../../extext/richard.txt:Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]
../../extext/richard.txt:For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]
../../extext/richard.txt:Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]
../../extext/richard.txt:Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
../../extext/richard.txt:Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]
../../extext/richard.txt:Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]
../../extext/richard.txt:Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
../../extext/richard.txt:Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]
../../extext/richard.txt:Main article: GNU/Linux naming controversy
../../extext/richard.txt:Stallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]
../../extext/richard.txt:He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]
../../extext/richard.txt:In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]
../../extext/richard.txt:Stallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]
../../extext/richard.txt:On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]
../../extext/richard.txt:In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]
../../extext/richard.txt:Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]
../../extext/richard.txt:Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
../../extext/richard.txt:In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]
../../extext/linux.txt:Linux (/Ààl…™n äks/ LIN-uuks[16]) is a family of open source Unix-like operating systems based on the Linux kernel,[17] an operating system kernel first released on September 17, 1991, by Linus Torvalds.[18][19][20] Linux is typically packaged as a Linux distribution (distro), which includes the kernel and supporting system software and libraries‚Äîmost of which are provided by third parties‚Äîto create a complete operating system, designed as a clone of Unix and released under the copyleft GPL license.[21]
../../extext/linux.txt:Thousands of Linux distributions exist, many based directly or indirectly on other distributions;[22][23] popular Linux distributions[24][25][26] include Debian, Fedora Linux, Linux Mint, Arch Linux, and Ubuntu, while commercial distributions include Red Hat Enterprise Linux, SUSE Linux Enterprise, and ChromeOS. Linux distributions are frequently used in server platforms.[27][28] Many Linux distributions use the word "Linux" in their name, but the Free Software Foundation uses and recommends the name "GNU/Linux" to emphasize the use and importance of GNU software in many distributions, causing some controversy.[29][30] Other than the Linux kernel, key components that make up a distribution may include a display server (windowing system), a package manager, a bootloader and a Unix shell.
../../extext/linux.txt:Linux is one of the most prominent examples of free and open-source software collaboration. While originally developed for x86 based personal computers, it has since been ported to more platforms than any other operating system,[31] and is used on a wide variety of devices including PCs, workstations, mainframes and embedded systems. Linux is the predominant operating system for servers and is also used on all of the world's 500 fastest supercomputers.[g] When combined with Android, which is Linux-based and designed for smartphones, they have the largest installed base of all general-purpose operating systems.
../../extext/linux.txt:The Linux kernel was designed by Linus Torvalds, following the lack of a working kernel for GNU, a Unix-compatible operating system made entirely of free software that had been undergoing development since 1983 by Richard Stallman. A working Unix system called Minix was later released but its license was not entirely free at the time[32] and it was made for an educative purpose. The first entirely free Unix for personal computers, 386BSD, did not appear until 1992, by which time Torvalds had already built and publicly released the first version of the Linux kernel on the Internet.[33] Like GNU and 386BSD, Linux did not have any Unix code, being a fresh reimplementation, and therefore avoided the then legal issues.[34] Linux distributions became popular in the 1990s and effectively made Unix technologies accessible to home users on personal computers whereas previously it had been confined to sophisticated workstations.[35]
../../extext/linux.txt:Desktop Linux distributions include a windowing system such as X11 or Wayland and a desktop environment such as GNOME, KDE Plasma or Xfce. Distributions intended for servers may not have a graphical user interface at all or include a solution stack such as LAMP.
../../extext/linux.txt:The source code of Linux may be used, modified, and distributed commercially or non-commercially by anyone under the terms of its respective licenses, such as the GNU General Public License (GPL). The license means creating novel distributions is permitted by anyone[36] and is easier than it would be for an operating system such as MacOS or Microsoft Windows.[37][38][39] The Linux kernel, for example, is licensed under the GPLv2, with an exception for system calls that allows code that calls the kernel via system calls not to be licensed under the GPL.[40][41][36]
../../extext/linux.txt:Because of the dominance of Linux-based Android on smartphones, Linux, including Android, has the largest installed base of all general-purpose operating systems as of May 2022.[42][43][44] Linux is, as of March 2024, used by around 4 percent of desktop computers.[45] The Chromebook, which runs the Linux kernel-based ChromeOS,[46][47] dominates the US K‚Äì12 education market and represents nearly 20 percent of sub-$300 notebook sales in the US.[48] Linux is the leading operating system on servers (over 96.4% of the top one million web servers' operating systems are Linux),[49] leads other big iron systems such as mainframe computers,[clarification needed][50] and is used on all of the world's 500 fastest supercomputers[h] (as of November 2017, having gradually displaced all competitors).[51][52]
../../extext/linux.txt:Linux also runs on embedded systems, i.e., devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes routers, automation controls, smart home devices, video game consoles, televisions (Samsung and LG smart TVs),[53][54][55] automobiles (Tesla, Audi, Mercedes-Benz, Hyundai, and Toyota),[56] and spacecraft (Falcon 9 rocket, Dragon crew capsule, and the Ingenuity Mars helicopter).[57][58]
../../extext/linux.txt:The Unix operating system was conceived of and implemented in 1969, at AT&T's Bell Labs in the United States, by Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna.[59] First released in 1971, Unix was written entirely in assembly language, as was common practice at the time. In 1973, in a key pioneering approach, it was rewritten in the C programming language by Dennis Ritchie (except for some hardware and I/O routines). The availability of a high-level language implementation of Unix made its porting to different computer platforms easier.[60]
../../extext/linux.txt:As a 1956 antitrust case forbade AT&T from entering the computer business,[61] AT&T provided the operating system's source code to anyone who asked. As a result, Unix use grew quickly and it became widely adopted by academic institutions and businesses. In 1984, AT&T divested itself of its regional operating companies, and was released from its obligation not to enter the computer business; freed of that obligation, Bell Labs began selling Unix as a proprietary product, where users were not legally allowed to modify it.[62][63]
../../extext/linux.txt:Onyx Systems began selling early microcomputer-based Unix workstations in 1980. Later, Sun Microsystems, founded as a spin-off of a student project at Stanford University, also began selling Unix-based desktop workstations in 1982. While Sun workstations did not use commodity PC hardware, for which Linux was later originally developed, it represented the first successful commercial attempt at distributing a primarily single-user microcomputer that ran a Unix operating system.[64][65]
../../extext/linux.txt:With Unix increasingly "locked in" as a proprietary product, the GNU Project, started in 1983 by Richard Stallman, had the goal of creating a "complete Unix-compatible software system" composed entirely of free software. Work began in 1984.[66] Later, in 1985, Stallman started the Free Software Foundation and wrote the GNU General Public License (GNU GPL) in 1989. By the early 1990s, many of the programs required in an operating system (such as libraries, compilers, text editors, a command-line shell, and a windowing system) were completed, although low-level elements such as device drivers, daemons, and the kernel, called GNU Hurd, were stalled and incomplete.[67]
../../extext/linux.txt:While attending the University of Helsinki in the fall of 1990, Torvalds enrolled in a Unix course.[69] The course used a MicroVAX minicomputer running Ultrix, and one of the required texts was Operating Systems: Design and Implementation by Andrew S. Tanenbaum. This textbook included a copy of Tanenbaum's Minix operating system. It was with this course that Torvalds first became exposed to Unix. In 1991, he became curious about operating systems.[70] Frustrated by the licensing of Minix, which at the time limited it to educational use only,[68] he began to work on his operating system kernel, which eventually became the Linux kernel.
../../extext/linux.txt:On July 3, 1991, to implement Unix system calls, Linus Torvalds attempted unsuccessfully to obtain a digital copy of the POSIX standards documentation with a request to the comp.os.minix newsgroup.[71] After not finding the POSIX documentation, Torvalds initially resorted to determining system calls from SunOS documentation owned by the university for use in operating its Sun Microsystems server. He also learned some system calls from Tanenbaum's Minix text.
../../extext/linux.txt:Torvalds began the development of the Linux kernel on Minix and applications written for Minix were also used on Linux. Later, Linux matured and further Linux kernel development took place on Linux systems.[72] GNU applications also replaced all Minix components, because it was advantageous to use the freely available code from the GNU Project with the fledgling operating system; code licensed under the GNU GPL can be reused in other computer programs as long as they also are released under the same or a compatible license. Torvalds initiated a switch from his original license, which prohibited commercial redistribution, to the GNU GPL.[73] Developers worked to integrate GNU components with the Linux kernel, creating a fully functional and free operating system.[74]
../../extext/linux.txt:Although not released until 1992, due to legal complications, the development of 386BSD, from which NetBSD, OpenBSD and FreeBSD descended, predated that of Linux. Linus Torvalds has stated that if the GNU kernel or 386BSD had been available in 1991, he probably would not have created Linux.[75][32]
../../extext/linux.txt:To facilitate development, the files were uploaded to the FTP server of FUNET in September 1991. Ari Lemmke, Torvalds' coworker at the Helsinki University of Technology (HUT) who was one of the volunteer administrators for the FTP server at the time, did not think that "Freax" was a good name, so he named the project "Linux" on the server without consulting Torvalds.[76] Later, however, Torvalds consented to "Linux".
../../extext/linux.txt:According to a newsgroup post by Torvalds,[16] the word "Linux" should be pronounced (/Ààl…™n äks/ ‚ìò LIN-uuks) with a short 'i' as in 'print' and 'u' as in 'put'. To further demonstrate how the word "Linux" should be pronounced, he included an audio guide with the kernel source code.[77] However, in this recording, he pronounces Linux as /Ààlin äks/ (LEEN-uuks) with a short but close front unrounded vowel, instead of a near-close near-front unrounded vowel as in his newsgroup post.
../../extext/linux.txt:The adoption of Linux in production environments, rather than being used only by hobbyists, started to take off first in the mid-1990s in the supercomputing community, where organizations such as NASA started replacing their increasingly expensive machines with clusters of inexpensive commodity computers running Linux. Commercial use began when Dell and IBM, followed by Hewlett-Packard, started offering Linux support to escape Microsoft's monopoly in the desktop operating system market.[78]
../../extext/linux.txt:Today, Linux systems are used throughout computing, from embedded systems to virtually all supercomputers,[52][79] and have secured a place in server installations such as the popular LAMP application stack. The use of Linux distributions in home and enterprise desktops has been growing.[80][81][82][83][84][85][86]
../../extext/linux.txt:Linux distributions have also become popular in the netbook market, with many devices shipping with customized Linux distributions installed, and Google releasing their own ChromeOS designed for netbooks.
../../extext/linux.txt:Linux's greatest success in the consumer market is perhaps the mobile device market, with Android being the dominant operating system on smartphones and very popular on tablets and, more recently, on wearables, and vehicles. Linux gaming is also on the rise with Valve showing its support for Linux and rolling out SteamOS, its own gaming-oriented Linux distribution, which was later implemented in their Steam Deck platform. Linux distributions have also gained popularity with various local and national governments, such as the federal government of Brazil.[87]
../../extext/linux.txt:Linus Torvalds is the lead maintainer for the Linux kernel and guides its development, while Greg Kroah-Hartman is the lead maintainer for the stable branch.[88] Zo√´ Kooyman is the executive director of the Free Software Foundation,[89] which in turn supports the GNU components.[90] Finally, individuals and corporations develop third-party non-GNU components. These third-party components comprise a vast body of work and may include both kernel modules and user applications and libraries.
../../extext/linux.txt:Linux vendors and communities combine and distribute the kernel, GNU components, and non-GNU components, with additional package management software in the form of Linux distributions.
../../extext/linux.txt:Many developers of open-source software agree that the Linux kernel was not designed but rather evolved through natural selection. Torvalds considers that although the design of Unix served as a scaffolding, "Linux grew with a lot of mutations ‚Äì and because the mutations were less than random, they were faster and more directed than alpha-particles in DNA."[91] Eric S. Raymond considers Linux's revolutionary aspects to be social, not technical: before Linux, complex software was designed carefully by small groups, but "Linux evolved in a completely different way. From nearly the beginning, it was rather casually hacked on by huge numbers of volunteers coordinating only through the Internet. Quality was maintained not by rigid standards or autocracy but by the naively simple strategy of releasing every week and getting feedback from hundreds of users within days, creating a sort of rapid Darwinian selection on the mutations introduced by developers."[92] Bryan Cantrill, an engineer of a competing OS, agrees that "Linux wasn't designed, it evolved", but considers this to be a limitation, proposing that some features, especially those related to security,[93] cannot be evolved into, "this is not a biological system at the end of the day, it's a software system."[94]
../../extext/linux.txt:The GNU userland is a key part of most systems based on the Linux kernel, with Android being a notable exception. The GNU C library, an implementation of the C standard library, works as a wrapper for the system calls of the Linux kernel necessary to the kernel-userspace interface, the toolchain is a broad collection of programming tools vital to Linux development (including the compilers used to build the Linux kernel itself), and the coreutils implement many basic Unix tools. The GNU Project also develops Bash, a popular CLI shell. The graphical user interface (or GUI) used by most Linux systems is built on top of an implementation of the X Window System.[96] More recently, some of the Linux community has sought to move to using Wayland as the display server protocol, replacing X11.[97][98]
../../extext/linux.txt:User mode	User applications	bash, LibreOffice, GIMP, Blender, 0 A.D., Mozilla Firefox, ...
../../extext/linux.txt:OpenRC, runit, systemd...	System daemons:
../../extext/linux.txt:Mesa, AMD Catalyst, ...	Other libraries:
../../extext/linux.txt:GTK, Qt, EFL, SDL, SFML, FLTK, GNUstep, ...
../../extext/linux.txt:glibc aims to be fast, musl aims to be lightweight, uClibc targets embedded systems, bionic was written for Android, etc. All aim to be POSIX/SUS-compatible.
../../extext/linux.txt:The Linux kernel System Call Interface (SCI), aims to be POSIX/SUS-compatible[99]
../../extext/linux.txt:Process scheduling subsystem	IPC subsystem	Memory management subsystem	Virtual files subsystem	Networking subsystem
../../extext/linux.txt:Other components: ALSA, DRI, evdev, klibc, LVM, device mapper, Linux Network Scheduler, Netfilter
../../extext/linux.txt:Linux Security Modules: SELinux, TOMOYO, AppArmor, Smack
../../extext/linux.txt:Hardware (CPU, main memory, data storage devices, etc.)
../../extext/linux.txt:A bootloader, for example GNU GRUB, LILO, SYSLINUX or systemd-boot. This is a program that loads the Linux kernel into the computer's main memory, by being executed by the computer when it is turned on and after the firmware initialization is performed.
../../extext/linux.txt:An init program, such as the traditional sysvinit and the newer systemd, OpenRC and Upstart. This is the first process launched by the Linux kernel, and is at the root of the process tree. It starts processes such as system services and login prompts (whether graphical or in terminal mode).
../../extext/linux.txt:Software libraries, which contain code that can be used by running processes. On Linux systems using ELF-format executable files, the dynamic linker that manages the use of dynamic libraries is known as ld-linux.so. If the system is set up for the user to compile software themselves, header files will also be included to describe the programming interface of installed libraries. Besides the most commonly used software library on Linux systems, the GNU C Library (glibc), there are numerous other libraries, such as SDL and Mesa.
../../extext/linux.txt:The C standard library is the library necessary to run programs written in C on a computer system, with the GNU C Library being the standard. It provides an implementation of the POSIX API, as well as extensions to that API. For embedded systems, alternatives such as musl, EGLIBC (a glibc fork once used by Debian) and uClibc (which was designed for uClinux) have been developed, although the last two are no longer maintained. Android uses its own C library, Bionic. However, musl can additionally be used as a replacement for glibc on desktop and laptop systems, as seen on certain Linux distributions like Void Linux.
../../extext/linux.txt:Basic Unix commands, with GNU coreutils being the standard implementation. Alternatives exist for embedded systems, such as the copyleft BusyBox, and the BSD-licensed Toybox.
../../extext/linux.txt:Widget toolkits are the libraries used to build graphical user interfaces (GUIs) for software applications. Numerous widget toolkits are available, including GTK and Clutter developed by the GNOME Project, Qt developed by the Qt Project and led by The Qt Company, and Enlightenment Foundation Libraries (EFL) developed primarily by the Enlightenment team.
../../extext/linux.txt:A package management system, such as dpkg and RPM. Alternatively packages can be compiled from binary or source tarballs.
../../extext/linux.txt:The user interface, also known as the shell, is either a command-line interface (CLI), a graphical user interface (GUI), or controls attached to the associated hardware, which is common for embedded systems. For desktop systems, the default user interface is usually graphical, although the CLI is commonly available through terminal emulator windows or on a separate virtual console.
../../extext/linux.txt:CLI shells are text-based user interfaces, which use text for both input and output. The dominant shell used in Linux is the Bourne-Again Shell (bash), originally developed for the GNU Project; other shells such as Zsh are also used.[101][102] Most low-level Linux components, including various parts of the userland, use the CLI exclusively. The CLI is particularly suited for automation of repetitive or delayed tasks and provides very simple inter-process communication.
../../extext/linux.txt:On desktop systems, the most popular user interfaces are the GUI shells, packaged together with extensive desktop environments, such as KDE Plasma, GNOME, MATE, Cinnamon, LXDE, Pantheon, and Xfce, though a variety of additional user interfaces exist. Most popular user interfaces are based on the X Window System, often simply called "X" or "X11". It provides network transparency and permits a graphical application running on one system to be displayed on another where a user may interact with the application; however, certain extensions of the X Window System are not capable of working over the network.[103] Several X display servers exist, with the reference implementation, X.Org Server, being the most popular.
../../extext/linux.txt:Several types of window managers exist for X11, including tiling, dynamic, stacking, and compositing. Window managers provide means to control the placement and appearance of individual application windows, and interact with the X Window System. Simpler X window managers such as dwm, ratpoison, or i3wm provide a minimalist functionality, while more elaborate window managers such as FVWM, Enlightenment, or Window Maker provide more features such as a built-in taskbar and themes, but are still lightweight when compared to desktop environments. Desktop environments include window managers as part of their standard installations, such as Mutter (GNOME), KWin (KDE), or Xfwm (xfce), although users may choose to use a different window manager if preferred.
../../extext/linux.txt:Wayland is a display server protocol intended as a replacement for the X11 protocol; as of 2022, it has received relatively wide adoption.[104] Unlike X11, Wayland does not need an external window manager and compositing manager. Therefore, a Wayland compositor takes the role of the display server, window manager, and compositing manager. Weston is the reference implementation of Wayland, while GNOME's Mutter and KDE's KWin are being ported to Wayland as standalone display servers. Enlightenment has already been successfully ported since version 19.[105] Additionally, many window managers have been made for Wayland, such as Sway or Hyprland, as well as other graphical utilities such as Waybar or Rofi.
../../extext/linux.txt:Linux currently has two modern kernel-userspace APIs for handling video input devices: V4L2 API for video streams and radio, and DVB API for digital TV reception.[106]
../../extext/linux.txt:Due to the complexity and diversity of different devices, and due to the large number of formats and standards handled by those APIs, this infrastructure needs to evolve to better fit other devices. Also, a good userspace device library is the key to the success of having userspace applications to be able to work with all formats supported by those devices.[107][108]
../../extext/linux.txt:Simplified history of Unix-like operating systems. Linux shares similar architecture and concepts (as part of the POSIX standard) but does not share non-free source code with the original Unix or Minix.
../../extext/linux.txt:The primary difference between Linux and many other popular contemporary operating systems is that the Linux kernel and other components are free and open-source software. Linux is not the only such operating system, although it is by far the most widely used.[109] Some free and open-source software licenses are based on the principle of copyleft, a kind of reciprocity: any work derived from a copyleft piece of software must also be copyleft itself. The most common free software license, the GNU General Public License (GPL), is a form of copyleft and is used for the Linux kernel and many of the components from the GNU Project.[110]
../../extext/linux.txt:Linux-based distributions are intended by developers for interoperability with other operating systems and established computing standards. Linux systems adhere to POSIX,[111] Single UNIX Specification (SUS),[112] Linux Standard Base (LSB), ISO, and ANSI standards where possible, although to date only one Linux distribution has been POSIX.1 certified, Linux-FT.[113][114] The Open Group has tested and certified at least two Linux distributions as qualifying for the Unix trademark, EulerOS and Inspur K-UX.[115]
../../extext/linux.txt:A distribution is largely driven by its developer and user communities. Some vendors develop and fund their distributions on a volunteer basis, Debian being a well-known example. Others maintain a community version of their commercial distributions, as Red Hat does with Fedora, and SUSE does with openSUSE.[117][118]
../../extext/linux.txt:In many cities and regions, local associations known as Linux User Groups (LUGs) seek to promote their preferred distribution and by extension free software. They hold meetings and provide free demonstrations, training, technical support, and operating system installation to new users. Many Internet communities also provide support to Linux users and developers. Most distributions and free software / open-source projects have IRC chatrooms or newsgroups. Online forums are another means of support, with notable examples being Unix & Linux Stack Exchange,[119][120] LinuxQuestions.org and the various distribution-specific support and community forums, such as ones for Ubuntu, Fedora, Arch Linux, Gentoo, etc. Linux distributions host mailing lists; commonly there will be a specific topic such as usage or development for a given list.
../../extext/linux.txt:Although Linux distributions are generally available without charge, several large corporations sell, support, and contribute to the development of the components of the system and free software. An analysis of the Linux kernel in 2017 showed that well over 85% of the code was developed by programmers who are being paid for their work, leaving about 8.2% to unpaid developers and 4.1% unclassified.[123] Some of the major corporations that provide contributions include Intel, Samsung, Google, AMD, Oracle, and Facebook.[123] Several corporations, notably Red Hat, Canonical, and SUSE have built a significant business around Linux distributions.
../../extext/linux.txt:Another business model is to give away the software to sell hardware. This used to be the norm in the computer industry, with operating systems such as CP/M, Apple DOS, and versions of the classic Mac OS before 7.6 freely copyable (but not modifiable). As computer hardware standardized throughout the 1980s, it became more difficult for hardware manufacturers to profit from this tactic, as the OS would run on any manufacturer's computer that shared the same architecture.[125][126]
../../extext/linux.txt:Most programming languages support Linux either directly or through third-party community based ports.[127] The original development tools used for building both Linux applications and operating system programs are found within the GNU toolchain, which includes the GNU Compiler Collection (GCC) and the GNU Build System. Amongst others, GCC provides compilers for Ada, C, C++, Go and Fortran. Many programming languages have a cross-platform reference implementation that supports Linux, for example PHP, Perl, Ruby, Python, Java, Go, Rust and Haskell. First released in 2003, the LLVM project provides an alternative cross-platform open-source compiler for many languages. Proprietary compilers for Linux include the Intel C++ Compiler, Sun Studio, and IBM XL C/C++ Compiler. BASIC is available in procedural form from QB64, PureBasic, Yabasic, GLBasic, Basic4GL, XBasic, wxBasic, SdlBasic, and Basic-256, as well as object oriented through Gambas, FreeBASIC, B4X, Basic for Qt, Phoenix Object Basic, NS Basic, ProvideX, Chipmunk Basic, RapidQ and Xojo. Pascal is implemented through GNU Pascal, Free Pascal, and Virtual Pascal, as well as graphically via Lazarus, PascalABC.NET, or Delphi using FireMonkey (previously through Borland Kylix).[128][129]
../../extext/linux.txt:A common feature of Unix-like systems, Linux includes traditional specific-purpose programming languages targeted at scripting, text processing and system configuration and management in general. Linux distributions support shell scripts, awk, sed and make. Many programs also have an embedded programming language to support configuring or programming themselves. For example, regular expressions are supported in programs like grep and locate, the traditional Unix message transfer agent Sendmail contains its own Turing complete scripting system, and the advanced text editor GNU Emacs is built around a general purpose Lisp interpreter.[130][131][132]
../../extext/linux.txt:Most distributions also include support for PHP, Perl, Ruby, Python and other dynamic languages. While not as common, Linux also supports C# and other CLI languages (via Mono), Vala, and Scheme. Guile Scheme acts as an extension language targeting the GNU system utilities, seeking to make the conventionally small, static, compiled C programs of Unix design rapidly and dynamically extensible via an elegant, functional high-level scripting system; many GNU programs can be compiled with optional Guile bindings to this end. A number of Java virtual machines and development kits run on Linux, including the original Sun Microsystems JVM (HotSpot), and IBM's J2SE RE, as well as many open-source projects like Kaffe and Jikes RVM; Kotlin, Scala, Groovy and other JVM languages are also available.
../../extext/linux.txt:GNOME and KDE are popular desktop environments and provide a framework for developing applications. These projects are based on the GTK and Qt widget toolkits, respectively, which can also be used independently of the larger framework. Both support a wide variety of languages. There are a number of Integrated development environments available including Anjuta, Code::Blocks, CodeLite, Eclipse, Geany, ActiveState Komodo, KDevelop, Lazarus, MonoDevelop, NetBeans, and Qt Creator, while the long-established editors Vim, nano and Emacs remain popular.[133]
../../extext/linux.txt:The Linux kernel is a widely ported operating system kernel, available for devices ranging from mobile phones to supercomputers; it runs on a highly diverse range of computer architectures, including ARM-based Android smartphones and the IBM Z mainframes. Specialized distributions and kernel forks exist for less mainstream architectures; for example, the ELKS kernel fork can run on Intel 8086 or Intel 80286 16-bit microprocessors,[134] while the ŒºClinux kernel fork may run on systems without a memory management unit.[135] The kernel also runs on architectures that were only ever intended to use a proprietary manufacturer-created operating system, such as Macintosh computers[136][137] (with PowerPC, Intel, and Apple silicon processors), PDAs, video game consoles, portable music players, and mobile phones.
../../extext/linux.txt:Linux has a reputation for supporting old hardware very well by maintaining standardized drivers for a long time.[138] There are several industry associations and hardware conferences devoted to maintaining and improving support for diverse hardware under Linux, such as FreedomHEC. Over time, support for different hardware has improved in Linux, resulting in any off-the-shelf purchase having a "good chance" of being compatible.[139]
../../extext/linux.txt:Many quantitative studies of free/open-source software focus on topics including market share and reliability, with numerous studies specifically examining Linux.[141] The Linux market is growing, and the Linux operating system market size is expected to see a growth of 19.2% by 2027, reaching $15.64 billion, compared to $3.89 billion in 2019.[142] Analysts project a Compound Annual Growth Rate (CAGR) of 13.7% between 2024 and 2032, culminating in a market size of US$34.90 billion by the latter year.[citation needed] Analysts and proponents attribute the relative success of Linux to its security, reliability, low cost, and freedom from vendor lock-in.[143][144]
../../extext/linux.txt:According to web server statistics (that is, based on the numbers recorded from visits to websites by client devices), in October 2024, the estimated market share of Linux on desktop computers was around 4.3%. In comparison, Microsoft Windows had a market share of around 73.4%, while macOS covered around 15.5%.[45]
../../extext/linux.txt:W3Cook publishes stats that use the top 1,000,000 Alexa domains,[145] which as of May 2015 estimate that 96.55% of web servers run Linux, 1.73% run Windows, and 1.72% run FreeBSD.[146]
../../extext/linux.txt:As of 2024, estimates suggest Linux accounts for at least 80% of the public cloud workload, partly thanks to its widespread use in platforms like Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform.[151][152][153]
../../extext/linux.txt:Android, which is based on the Linux kernel, has become the dominant operating system for smartphones. In April 2023, 68.61% of mobile devices accessing websites using StatCounter were from Android.[158] Android is also a popular operating system for tablets, being responsible for more than 60% of tablet sales as of 2013.[159] According to web server statistics, as of October 2021 Android has a market share of about 71%, with iOS holding 28%, and the remaining 1% attributed to various niche platforms.[160]
../../extext/linux.txt:Linux distributions have also gained popularity with various local and national governments. News of the Russian military creating its own Linux distribution has also surfaced, and has come to fruition as the G.H.ost Project.[167] The Indian state of Kerala has gone to the extent of mandating that all state high schools run Linux on their computers.[168][169] China uses Linux exclusively as the operating system for its Loongson processor family to achieve technology independence.[170] In Spain, some regions have developed their own Linux distributions, which are widely used in education and official institutions, like gnuLinEx in Extremadura and Guadalinex in Andalusia. France and Germany have also taken steps toward the adoption of Linux.[171] North Korea's Red Star OS, developed as of 2002, is based on a version of Fedora Linux.[172]
../../extext/linux.txt:See also: GNU/Linux naming controversy and SCO‚ÄìLinux disputes
../../extext/linux.txt:The Linux kernel is licensed under the GNU General Public License (GPL), version 2. The GPL requires that anyone who distributes software based on source code under this license must make the originating source code (and any modifications) available to the recipient under the same terms.[173] Other key components of a typical Linux distribution are also mainly licensed under the GPL, but they may use other licenses; many libraries use the GNU Lesser General Public License (LGPL), a more permissive variant of the GPL, and the X.Org implementation of the X Window System uses the MIT License.
../../extext/linux.txt:Torvalds states that the Linux kernel will not move from version 2 of the GPL to version 3.[174][175] He specifically dislikes some provisions in the new license which prohibit the use of the software in digital rights management.[176] It would also be impractical to obtain permission from all the copyright holders, who number in the thousands.[177]
../../extext/linux.txt:A 2001 study of Red Hat Linux 7.1 found that this distribution contained 30 million source lines of code.[178] Using the Constructive Cost Model, the study estimated that this distribution required about eight thousand person-years of development time. According to the study, if all this software had been developed by conventional proprietary means, it would have cost about US$1.82 billion[179] to develop in 2023 in the United States.[178] Most of the source code (71%) was written in the C programming language, but many other languages were used, including C++, Lisp, assembly language, Perl, Python, Fortran, and various shell scripting languages. Slightly over half of all lines of code were licensed under the GPL. The Linux kernel itself was 2.4 million lines of code, or 8% of the total.[178]
../../extext/linux.txt:In a later study, the same analysis was performed for Debian version 4.0 (etch, which was released in 2007).[180] This distribution contained close to 283 million source lines of code, and the study estimated that it would have required about seventy three thousand man-years and cost US$10.2 billion[179] (in 2023 dollars) to develop by conventional means.
../../extext/linux.txt:In the United States, the name Linux is a trademark registered to Linus Torvalds.[15] Initially, nobody registered it. However, on August 15, 1994, William R. Della Croce Jr. filed for the trademark Linux, and then demanded royalties from Linux distributors. In 1996, Torvalds and some affected organizations sued him to have the trademark assigned to Torvalds, and, in 1997, the case was settled.[182] The licensing of the trademark has since been handled by the Linux Mark Institute (LMI). Torvalds has stated that he trademarked the name only to prevent someone else from using it. LMI originally charged a nominal sublicensing fee for use of the Linux name as part of trademarks,[183] but later changed this in favor of offering a free, perpetual worldwide sublicense.[184]
../../extext/linux.txt:Tux sometimes is stylized with incorporation of the GNU logo
../../extext/linux.txt:The Free Software Foundation (FSF) prefers GNU/Linux as the name when referring to the operating system as a whole, because it considers Linux distributions to be variants of the GNU operating system initiated in 1983 by Richard Stallman, president of the FSF.[29][30] The foundation explicitly takes no issue over the name Android for the Android OS, which is also an operating system based on the Linux kernel, as GNU is not a part of it.
../../extext/linux.txt:A minority of public figures and software projects other than Stallman and the FSF, notably distributions consisting of only free software, such as Debian (which had been sponsored by the FSF up to 1996),[185] also use GNU/Linux when referring to the operating system as a whole.[186][187][188] Most media and common usage, however, refers to this family of operating systems simply as Linux, as do many large Linux distributions (for example, SUSE Linux and Red Hat Enterprise Linux).
../../extext/linux.txt:As of May 2011, about 8% to 13% of the lines of code of the Linux distribution Ubuntu (version "Natty") is made of GNU components (the range depending on whether GNOME is considered part of GNU); meanwhile, 6% is taken by the Linux kernel, increased to 9% when including its direct dependencies.[189]
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ 
[?2004l[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex2 [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ ./ex2 
[?2004l../../extext/richard.txt: STAWL-
../../extext/richard.txt: GNU 
../../extext/richard.txt:(FSF)
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt:(GPL)
../../extext/richard.txt: FSF 
../../extext/richard.txt: MIT 
../../extext/richard.txt: GNU 
../../extext/richard.txt: FSF 
../../extext/richard.txt: IBM 
../../extext/richard.txt: IBM 
../../extext/richard.txt: FORTRAN 
../../extext/richard.txt: APL[
../../extext/richard.txt: PL/
../../extext/richard.txt: IBM 
../../extext/richard.txt: MIT 
../../extext/richard.txt: RMS,
../../extext/richard.txt:(MIT)
../../extext/richard.txt: MIT 
../../extext/richard.txt: MIT 
../../extext/richard.txt: AI 
../../extext/richard.txt: MIT'
../../extext/richard.txt: AI 
../../extext/richard.txt: TECO 
../../extext/richard.txt:(ITS)
../../extext/richard.txt: CONS 
../../extext/richard.txt: CADR 
../../extext/richard.txt:(LMI)
../../extext/richard.txt:(DARPA)
../../extext/richard.txt: MIT'
../../extext/richard.txt:(LCS)
../../extext/richard.txt: US 
../../extext/richard.txt: GPL 
../../extext/richard.txt: AI 
../../extext/richard.txt: XGP,
../../extext/richard.txt: AI 
../../extext/richard.txt:(LMI)
../../extext/richard.txt: AI 
../../extext/richard.txt: AI 
../../extext/richard.txt: MIT 
../../extext/richard.txt: LMI,
../../extext/richard.txt: MIT 
../../extext/richard.txt: GNU 
../../extext/richard.txt: MIT 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: ARPANET 
../../extext/richard.txt: USENET.
../../extext/richard.txt: NIXAL 
../../extext/richard.txt: GLUG)
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU,
../../extext/richard.txt: GNU 
../../extext/richard.txt:"GNU'
../../extext/richard.txt: FSF,
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt:(GPL)
../../extext/richard.txt: GNU 
../../extext/richard.txt:(GNU 
../../extext/richard.txt:(GCC)
../../extext/richard.txt:(GNU 
../../extext/richard.txt:(GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: POSIX 
../../extext/richard.txt: GNU'
../../extext/richard.txt: GNU 
../../extext/richard.txt: FSF 
../../extext/richard.txt: GNU/
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: POSIX[
../../extext/richard.txt: GNU 
../../extext/richard.txt: IGNUc
../../extext/richard.txt: XEm
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt:"GNU 
../../extext/richard.txt: FSF 
../../extext/richard.txt: MIT 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU/
../../extext/richard.txt: GNUPe
../../extext/richard.txt:eSUR 
../../extext/richard.txt: ATI,
../../extext/richard.txt: ATI 
../../extext/richard.txt: AMD 
../../extext/richard.txt: ATI 
../../extext/richard.txt:eXT,
../../extext/richard.txt: GCC 
../../extext/richard.txt: GPL 
../../extext/richard.txt: GPL,
../../extext/richard.txt:eXT 
../../extext/richard.txt: GPL.
../../extext/richard.txt: BIOS 
../../extext/richard.txt: GNU/
../../extext/richard.txt: GNU/
../../extext/richard.txt: BIOS 
../../extext/richard.txt:(DRM)
../../extext/richard.txt: DRM 
../../extext/richard.txt: FSF 
../../extext/richard.txt: ICFOSS 
../../extext/richard.txt: DVD 
../../extext/richard.txt: BMG 
../../extext/richard.txt: IGNUc
../../extext/richard.txt: GNU/
../../extext/richard.txt: GNU/
../../extext/richard.txt: GNU/
../../extext/richard.txt: GNOO 
../../extext/richard.txt: LIN-
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU,
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU+
../../extext/richard.txt: GNOO 
../../extext/richard.txt: LIN-
../../extext/richard.txt: GNU/
../../extext/richard.txt: GNOO 
../../extext/richard.txt: GNU 
../../extext/richard.txt: FSF]
../../extext/richard.txt: GNU 
../../extext/richard.txt: MIT,
../../extext/richard.txt: MIT 
../../extext/richard.txt: MIT 
../../extext/richard.txt: MIT'
../../extext/richard.txt: MIT 
../../extext/richard.txt: MIT.
../../extext/richard.txt: MIT 
../../extext/richard.txt: FSF,
../../extext/richard.txt: MIT 
../../extext/richard.txt: FSF 
../../extext/richard.txt: FSF 
../../extext/richard.txt: GNOME 
../../extext/richard.txt: FSF 
../../extext/richard.txt: FSF 
../../extext/richard.txt: FSF[
../../extext/richard.txt: SUSE,
../../extext/richard.txt: OSI,
../../extext/richard.txt: EFF,
../../extext/richard.txt: FSF 
../../extext/richard.txt: GNU 
../../extext/richard.txt: GNU 
../../extext/linux.txt: LIN-
../../extext/linux.txt: GPL 
../../extext/linux.txt: SUSE 
../../extext/linux.txt:eOS.
../../extext/linux.txt:"GNU/
../../extext/linux.txt: GNU 
../../extext/linux.txt: PCs
../../extext/linux.txt: GNU,
../../extext/linux.txt:6BSD,
../../extext/linux.txt: GNU 
../../extext/linux.txt:6BSD,
../../extext/linux.txt: GNOME,
../../extext/linux.txt: KDE 
../../extext/linux.txt: LAMP.
../../extext/linux.txt: GNU 
../../extext/linux.txt:(GPL)
../../extext/linux.txt:cOS 
../../extext/linux.txt: GPLv
../../extext/linux.txt: GPL.
../../extext/linux.txt:eOS,
../../extext/linux.txt: US 
../../extext/linux.txt: US.
../../extext/linux.txt: LG 
../../extext/linux.txt: TVs
../../extext/linux.txt: AT&
../../extext/linux.txt: AT&
../../extext/linux.txt: AT&
../../extext/linux.txt: AT&
../../extext/linux.txt: PC 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt:(GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt:oVAX 
../../extext/linux.txt: POSIX 
../../extext/linux.txt: POSIX 
../../extext/linux.txt:nOS 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt:6BSD,
../../extext/linux.txt:tBSD,
../../extext/linux.txt:nBSD 
../../extext/linux.txt:eBSD 
../../extext/linux.txt: GNU 
../../extext/linux.txt:6BSD 
../../extext/linux.txt: FTP 
../../extext/linux.txt: FUNET 
../../extext/linux.txt:(HUT)
../../extext/linux.txt: FTP 
../../extext/linux.txt: LIN-
../../extext/linux.txt:(LEEN-
../../extext/linux.txt: NASA 
../../extext/linux.txt: IBM,
../../extext/linux.txt: LAMP 
../../extext/linux.txt:eOS 
../../extext/linux.txt:mOS,
../../extext/linux.txt: GNU 
../../extext/linux.txt:-GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt:-GNU 
../../extext/linux.txt: DNA.
../../extext/linux.txt: OS,
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt: CLI 
../../extext/linux.txt: GUI)
../../extext/linux.txt: GIMP,
../../extext/linux.txt:nRC,
../../extext/linux.txt: AMD 
../../extext/linux.txt: EFL,
../../extext/linux.txt: SDL,
../../extext/linux.txt: SFML,
../../extext/linux.txt: FLTK,
../../extext/linux.txt: GNUs
../../extext/linux.txt: POSIX/
../../extext/linux.txt:(SCI)
../../extext/linux.txt: POSIX/
../../extext/linux.txt:	IPC 
../../extext/linux.txt: ALSA,
../../extext/linux.txt: DRI,
../../extext/linux.txt: LVM,
../../extext/linux.txt: SELi
../../extext/linux.txt: TOMOYO,
../../extext/linux.txt:(CPU,
../../extext/linux.txt: GNU 
../../extext/linux.txt: LILO,
../../extext/linux.txt: SYSLINUX 
../../extext/linux.txt:nRC 
../../extext/linux.txt: ELF-
../../extext/linux.txt: GNU 
../../extext/linux.txt: SDL 
../../extext/linux.txt: GNU 
../../extext/linux.txt: POSIX 
../../extext/linux.txt: API.
../../extext/linux.txt: EGLIBC 
../../extext/linux.txt: GNU 
../../extext/linux.txt: BSD-
../../extext/linux.txt:(GUIs
../../extext/linux.txt: GTK 
../../extext/linux.txt: GNOME 
../../extext/linux.txt:(EFL)
../../extext/linux.txt: RPM.
../../extext/linux.txt:(CLI)
../../extext/linux.txt:(GUI)
../../extext/linux.txt: CLI 
../../extext/linux.txt: GNU 
../../extext/linux.txt: CLI 
../../extext/linux.txt: CLI 
../../extext/linux.txt: GUI 
../../extext/linux.txt: KDE 
../../extext/linux.txt: GNOME,
../../extext/linux.txt: MATE,
../../extext/linux.txt: LXDE,
../../extext/linux.txt: FVWM,
../../extext/linux.txt:(GNOME)
../../extext/linux.txt: KWi
../../extext/linux.txt:(KDE)
../../extext/linux.txt: GNOME'
../../extext/linux.txt: KDE'
../../extext/linux.txt: KWi
../../extext/linux.txt: APIs
../../extext/linux.txt: API 
../../extext/linux.txt: DVB 
../../extext/linux.txt: TV 
../../extext/linux.txt: APIs
../../extext/linux.txt: POSIX 
../../extext/linux.txt: GNU 
../../extext/linux.txt:(GPL)
../../extext/linux.txt: GNU 
../../extext/linux.txt: POSIX,
../../extext/linux.txt: UNIX 
../../extext/linux.txt:(SUS)
../../extext/linux.txt:(LSB)
../../extext/linux.txt: ISO,
../../extext/linux.txt: ANSI 
../../extext/linux.txt: POSIX.
../../extext/linux.txt:-FT.
../../extext/linux.txt:rOS 
../../extext/linux.txt:-UX.
../../extext/linux.txt: SUSE 
../../extext/linux.txt:nSUSE.
../../extext/linux.txt:(LUGs
../../extext/linux.txt: IRC 
../../extext/linux.txt: AMD,
../../extext/linux.txt: SUSE 
../../extext/linux.txt: CP/
../../extext/linux.txt: DOS,
../../extext/linux.txt: OS 
../../extext/linux.txt: OS 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt:(GCC)
../../extext/linux.txt: GNU 
../../extext/linux.txt: GCC 
../../extext/linux.txt: PHP,
../../extext/linux.txt: LLVM 
../../extext/linux.txt: IBM 
../../extext/linux.txt: BASIC 
../../extext/linux.txt: QB6
../../extext/linux.txt: GLBa
../../extext/linux.txt:4GL,
../../extext/linux.txt: XBa
../../extext/linux.txt:eBASIC,
../../extext/linux.txt: NS 
../../extext/linux.txt: GNU 
../../extext/linux.txt:lABC.
../../extext/linux.txt: GNU 
../../extext/linux.txt: PHP,
../../extext/linux.txt: CLI 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNU 
../../extext/linux.txt: JVM 
../../extext/linux.txt: IBM'
../../extext/linux.txt:2SE 
../../extext/linux.txt: RVM;
../../extext/linux.txt: JVM 
../../extext/linux.txt: KDE 
../../extext/linux.txt: GTK 
../../extext/linux.txt: KDe
../../extext/linux.txt: ARM-
../../extext/linux.txt: IBM 
../../extext/linux.txt: ELKS 
../../extext/linux.txt:rPC,
../../extext/linux.txt: PDAs
../../extext/linux.txt:mHEC.
../../extext/linux.txt:(CAGR)
../../extext/linux.txt: US$
../../extext/linux.txt:cOS 
../../extext/linux.txt:eBSD.
../../extext/linux.txt:(AWS)
../../extext/linux.txt:iOS 
../../extext/linux.txt: OS,
../../extext/linux.txt: GNU/
../../extext/linux.txt: SCO‚Äì
../../extext/linux.txt: GNU 
../../extext/linux.txt:(GPL)
../../extext/linux.txt: GPL 
../../extext/linux.txt: GPL,
../../extext/linux.txt: GNU 
../../extext/linux.txt:(LGPL)
../../extext/linux.txt: GPL,
../../extext/linux.txt: MIT 
../../extext/linux.txt: GPL 
../../extext/linux.txt: US$
../../extext/linux.txt: GPL.
../../extext/linux.txt: US$
../../extext/linux.txt:(LMI)
../../extext/linux.txt: LMI 
../../extext/linux.txt: GNU 
../../extext/linux.txt:(FSF)
../../extext/linux.txt: GNU/
../../extext/linux.txt: GNU 
../../extext/linux.txt: FSF.
../../extext/linux.txt: OS,
../../extext/linux.txt: GNU 
../../extext/linux.txt: FSF,
../../extext/linux.txt: FSF 
../../extext/linux.txt: GNU/
../../extext/linux.txt: SUSE 
../../extext/linux.txt: GNU 
../../extext/linux.txt: GNOME 
../../extext/linux.txt: GNU)
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ [H[2J[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ cp[K[Kcd ..[K[K[K[K[Kls
[?2004lex1  ex2  ex3  ex4  ex5
[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ cp ex1 --[K[K..-[K/../sed/viktigt_att_kunna/
[?2004l[?2004h[94mITINF25/lektion11/grep/behover_inte_kunna
(B[m$ cp ex1 ../../sed/viktigt_att_kunna/[C[C[C[C[C[C[1P ../../sed/viktigt_att_kunna/[1P ../../sed/viktigt_att_kunna/[1P ../../sed/viktigt_att_kunna/[1P../../sed/viktigt_att_kunna/[1P ../../sed/viktigt_att_kunna/[1P ../../sed/viktigt_att_kunna/c ../../sed/viktigt_att_kunna/d ../../sed/viktigt_att_kunna/
[?2004l[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ls
[?2004lex1
[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ code ee[Kx1 
[?2004l[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ code ex1 [C[C[K./ex1 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex1 
[?2004l../../extext/linux.txt
[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ala[Kias sed='sed -E'[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K./ex1 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex1 
[?2004lLinux (/Ààl…™n äks/ LIN-uuks[16]) is a family of open source Unix-like operating systems based on the Linux kernel,[17] an operating system kernel first released on September 17, 1991, by Linus Torvalds.[18][19][20] Linux is typically packaged as a Linux distribution (distro), which includes the kernel and supporting system software and libraries‚Äîmost of which are provided by third parties‚Äîto create a complete operating system, designed as a clone of Unix and released under the copyleft GPL license.[21]

Thousands of Linux distributions exist, many based directly or indirectly on other distributions;[22][23] popular Linux distributions[24][25][26] include Debian, Fedora Linux, Linux Mint, Arch Linux, and Ubuntu, while commercial distributions include Red Hat Enterprise Linux, SUSE Linux Enterprise, and ChromeOS. Linux distributions are frequently used in server platforms.[27][28] Many Linux distributions use the word "Linux" in their name, but the Free Software Foundation uses and recommends the name "GNU/Linux" to emphasize the use and importance of GNU software in many distributions, causing some controversy.[29][30] Other than the Linux kernel, key components that make up a distribution may include a display server (windowing system), a package manager, a bootloader and a Unix shell.

Linux is one of the most prominent examples of free and open-source software collaboration. While originally developed for x86 based personal computers, it has since been ported to more platforms than any other operating system,[31] and is used on a wide variety of devices including PCs, workstations, mainframes and embedded systems. Linux is the predominant operating system for servers and is also used on all of the world's 500 fastest supercomputers.[g] When combined with Android, which is Linux-based and designed for smartphones, they have the largest installed base of all general-purpose operating systems.

Overview
The Linux kernel was designed by Linus Torvalds, following the lack of a working kernel for GNU, a Unix-compatible operating system made entirely of free software that had been undergoing development since 1983 by Richard Stallis. A working Unix system called Minix was later released but its license was not entirely free at the time[32] and it was made for an educative purpose. The first entirely free Unix for personal computers, 386BSD, did not appear until 1992, by which time Torvalds had already built and publicly released the first version of the Linux kernel on the Internet.[33] Like GNU and 386BSD, Linux did not have any Unix code, being a fresh reimplementation, and therefore avoided the then legal issues.[34] Linux distributions became popular in the 1990s and effectively made Unix technologies accessible to home users on personal computers whereas previously it had been confined to sophisticated workstations.[35]

Desktop Linux distributions include a windowing system such as X11 or Wayland and a desktop environment such as GNOME, KDE Plasma or Xfce. Distributions intended for servers may not have a graphical user interface at all or include a solution stack such as LAMP.

The source code of Linux may be used, modified, and distributed commercially or non-commercially by anyone under the terms of its respective licenses, such as the GNU General Public License (GPL). The license means creating novel distributions is permitted by anyone[36] and is easier than it would be for an operating system such as MacOS or Microsoft Windows.[37][38][39] The Linux kernel, for example, is licensed under the GPLv2, with an exception for system calls that allows code that calls the kernel via system calls not to be licensed under the GPL.[40][41][36]

Because of the dominance of Linux-based Android on smartphones, Linux, including Android, has the largest installed base of all general-purpose operating systems as of May 2022.[42][43][44] Linux is, as of March 2024, used by around 4 percent of desktop computers.[45] The Chromebook, which runs the Linux kernel-based ChromeOS,[46][47] dominates the US K‚Äì12 education market and represents nearly 20 percent of sub-$300 notebook sales in the US.[48] Linux is the leading operating system on servers (over 96.4% of the top one million web servers' operating systems are Linux),[49] leads other big iron systems such as mainframe computers,[clarification needed][50] and is used on all of the world's 500 fastest supercomputers[h] (as of November 2017, having gradually displaced all competitors).[51][52]

Linux also runs on embedded systems, i.e., devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes routers, automation controls, smart home devices, video game consoles, televisions (Samsung and LG smart TVs),[53][54][55] automobiles (Tesla, Audi, Mercedes-Benz, Hyundai, and Toyota),[56] and spacecraft (Falcon 9 rocket, Dragon crew capsule, and the Ingenuity Mars helicopter).[57][58]

History
Main article: History of Linux
Precursors

Linus Torvalds, principal author of the Linux kernel
The Unix operating system was conceived of and implemented in 1969, at AT&T's Bell Labs in the United States, by Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna.[59] First released in 1971, Unix was written entirely in assembly language, as was common practice at the time. In 1973, in a key pioneering approach, it was rewritten in the C programming language by Dennis Ritchie (except for some hardware and I/O routines). The availability of a high-level language implementation of Unix made its porting to different computer platforms easier.[60]

As a 1956 antitrust case forbade AT&T from entering the computer business,[61] AT&T provided the operating system's source code to anyone who asked. As a result, Unix use grew quickly and it became widely adopted by academic institutions and businesses. In 1984, AT&T divested itself of its regional operating companies, and was released from its obligation not to enter the computer business; freed of that obligation, Bell Labs began selling Unix as a proprietary product, where users were not legally allowed to modify it.[62][63]

Onyx Systems began selling early microcomputer-based Unix workstations in 1980. Later, Sun Microsystems, founded as a spin-off of a student project at Stanford University, also began selling Unix-based desktop workstations in 1982. While Sun workstations did not use commodity PC hardware, for which Linux was later originally developed, it represented the first successful commercial attempt at distributing a primarily single-user microcomputer that ran a Unix operating system.[64][65]

With Unix increasingly "locked in" as a proprietary product, the GNU Project, started in 1983 by Richard Stallis, had the goal of creating a "complete Unix-compatible software system" composed entirely of free software. Work began in 1984.[66] Later, in 1985, Stallis started the Free Software Foundation and wrote the GNU General Public License (GNU GPL) in 1989. By the early 1990s, many of the programs required in an operating system (such as libraries, compilers, text editors, a command-line shell, and a windowing system) were completed, although low-level elements such as device drivers, daemons, and the kernel, called GNU Hurd, were stalled and incomplete.[67]

Minix was created by Andrew S. Tanenbaum, a computer science professor, and released in 1987 as a minimal Unix-like operating system targeted at students and others who wanted to learn operating system principles. Although the complete source code of Minix was freely available, the licensing terms prevented it from being free software until the licensing changed in April 2000.[68]

Creation
While attending the University of Helsinki in the fall of 1990, Torvalds enrolled in a Unix course.[69] The course used a MicroVAX minicomputer running Ultrix, and one of the required texts was Operating Systems: Design and Implementation by Andrew S. Tanenbaum. This textbook included a copy of Tanenbaum's Minix operating system. It was with this course that Torvalds first became exposed to Unix. In 1991, he became curious about operating systems.[70] Frustrated by the licensing of Minix, which at the time limited it to educational use only,[68] he began to work on his operating system kernel, which eventually became the Linux kernel.

On July 3, 1991, to implement Unix system calls, Linus Torvalds attempted unsuccessfully to obtain a digital copy of the POSIX standards documentation with a request to the comp.os.minix newsgroup.[71] After not finding the POSIX documentation, Torvalds initially resorted to determining system calls from SunOS documentation owned by the university for use in operating its Sun Microsystems server. He also learned some system calls from Tanenbaum's Minix text.

Torvalds began the development of the Linux kernel on Minix and applications written for Minix were also used on Linux. Later, Linux matured and further Linux kernel development took place on Linux systems.[72] GNU applications also replaced all Minix components, because it was advantageous to use the freely available code from the GNU Project with the fledgling operating system; code licensed under the GNU GPL can be reused in other computer programs as long as they also are released under the same or a compatible license. Torvalds initiated a switch from his original license, which prohibited commercial redistribution, to the GNU GPL.[73] Developers worked to integrate GNU components with the Linux kernel, creating a fully functional and free operating system.[74]

Although not released until 1992, due to legal complications, the development of 386BSD, from which NetBSD, OpenBSD and FreeBSD descended, predated that of Linux. Linus Torvalds has stated that if the GNU kernel or 386BSD had been available in 1991, he probably would not have created Linux.[75][32]

Naming

5.25-inch floppy disks holding a very early version of Linux
Linus Torvalds had wanted to call his invention "Freax", a portmanteau of "free", "freak", and "x" (as an allusion to Unix). During the start of his work on the system, some of the project's makefiles included the name "Freax" for about half a year. Torvalds considered the name "Linux" but dismissed it as too egotistical.[76]

To facilitate development, the files were uploaded to the FTP server of FUNET in September 1991. Ari Lemmke, Torvalds' coworker at the Helsinki University of Technology (HUT) who was one of the volunteer administrators for the FTP server at the time, did not think that "Freax" was a good name, so he named the project "Linux" on the server without consulting Torvalds.[76] Later, however, Torvalds consented to "Linux".

According to a newsgroup post by Torvalds,[16] the word "Linux" should be pronounced (/Ààl…™n äks/ ‚ìò LIN-uuks) with a short 'i' as in 'print' and 'u' as in 'put'. To further demonstrate how the word "Linux" should be pronounced, he included an audio guide with the kernel source code.[77] However, in this recording, he pronounces Linux as /Ààlin äks/ (LEEN-uuks) with a short but close front unrounded vowel, instead of a near-close near-front unrounded vowel as in his newsgroup post.

Commercial and popular uptake
Main article: Linux adoption




From top-left clockwise: Nexus 5X running Android, Chromebooks, server platform, In-flight entertainment system
The adoption of Linux in production environments, rather than being used only by hobbyists, started to take off first in the mid-1990s in the supercomputing community, where organizations such as NASA started replacing their increasingly expensive machines with clusters of inexpensive commodity computers running Linux. Commercial use began when Dell and IBM, followed by Hewlett-Packard, started offering Linux support to escape Microsoft's monopoly in the desktop operating system market.[78]

Today, Linux systems are used throughout computing, from embedded systems to virtually all supercomputers,[52][79] and have secured a place in server installations such as the popular LAMP application stack. The use of Linux distributions in home and enterprise desktops has been growing.[80][81][82][83][84][85][86]

Linux distributions have also become popular in the netbook market, with many devices shipping with customized Linux distributions installed, and Google releasing their own ChromeOS designed for netbooks.

Linux's greatest success in the consumer market is perhaps the mobile device market, with Android being the dominant operating system on smartphones and very popular on tablets and, more recently, on wearables, and vehicles. Linux gaming is also on the rise with Valve showing its support for Linux and rolling out SteamOS, its own gaming-oriented Linux distribution, which was later implemented in their Steam Deck platform. Linux distributions have also gained popularity with various local and national governments, such as the federal government of Brazil.[87]

Development
Linus Torvalds is the lead maintainer for the Linux kernel and guides its development, while Greg Kroah-Hartman is the lead maintainer for the stable branch.[88] Zo√´ Kooyman is the executive director of the Free Software Foundation,[89] which in turn supports the GNU components.[90] Finally, individuals and corporations develop third-party non-GNU components. These third-party components comprise a vast body of work and may include both kernel modules and user applications and libraries.

Linux vendors and communities combine and distribute the kernel, GNU components, and non-GNU components, with additional package management software in the form of Linux distributions.

Design
See also: Linux kernel ¬ß Architecture and features
Many developers of open-source software agree that the Linux kernel was not designed but rather evolved through natural selection. Torvalds considers that although the design of Unix served as a scaffolding, "Linux grew with a lot of mutations ‚Äì and because the mutations were less than random, they were faster and more directed than alpha-particles in DNA."[91] Eric S. Raymond considers Linux's revolutionary aspects to be social, not technical: before Linux, complex software was designed carefully by small groups, but "Linux evolved in a completely different way. From nearly the beginning, it was rather casually hacked on by huge numbers of volunteers coordinating only through the Internet. Quality was maintained not by rigid standards or autocracy but by the naively simple strategy of releasing every week and getting feedback from hundreds of users within days, creating a sort of rapid Darwinian selection on the mutations introduced by developers."[92] Bryan Cantrill, an engineer of a competing OS, agrees that "Linux wasn't designed, it evolved", but considers this to be a limitation, proposing that some features, especially those related to security,[93] cannot be evolved into, "this is not a biological system at the end of the day, it's a software system."[94]

A Linux-based system is a modular Unix-like operating system, deriving much of its basic design from principles established in Unix during the 1970s and 1980s. Such a system uses a monolithic kernel, the Linux kernel, which handles process control, networking, access to the peripherals, and file systems. Device drivers are either integrated directly with the kernel or added as modules that are loaded while the system is running.[95]

The GNU userland is a key part of most systems based on the Linux kernel, with Android being a notable exception. The GNU C library, an implementation of the C standard library, works as a wrapper for the system calls of the Linux kernel necessary to the kernel-userspace interface, the toolchain is a broad collection of programming tools vital to Linux development (including the compilers used to build the Linux kernel itself), and the coreutils implement many basic Unix tools. The GNU Project also develops Bash, a popular CLI shell. The graphical user interface (or GUI) used by most Linux systems is built on top of an implementation of the X Window System.[96] More recently, some of the Linux community has sought to move to using Wayland as the display server protocol, replacing X11.[97][98]

Many other open-source software projects contribute to Linux systems.

Various layers within Linux, also showing separation between the userland and kernel space
User mode	User applications	bash, LibreOffice, GIMP, Blender, 0 A.D., Mozilla Firefox, ...
System components	init daemon:
OpenRC, runit, systemd...	System daemons:
polkitd, smbd, sshd, udevd...	Windowing system:
X11, Wayland, SurfaceFlinger (Android)	Graphics:
Mesa, AMD Catalyst, ...	Other libraries:
GTK, Qt, EFL, SDL, SFML, FLTK, GNUstep, ...
C standard library	fopen, execv, malloc, memcpy, localtime, pthread_create... (up to 2000 subroutines)
glibc aims to be fast, musl aims to be lightweight, uClibc targets embedded systems, bionic was written for Android, etc. All aim to be POSIX/SUS-compatible.
Kernel mode	Linux kernel	stat, splice, dup, read, open, ioctl, write, mmap, close, exit, etc. (about 380 system calls)
The Linux kernel System Call Interface (SCI), aims to be POSIX/SUS-compatible[99]
Process scheduling subsystem	IPC subsystem	Memory management subsystem	Virtual files subsystem	Networking subsystem
Other components: ALSA, DRI, evdev, klibc, LVM, device mapper, Linux Network Scheduler, Netfilter
Linux Security Modules: SELinux, TOMOYO, AppArmor, Smack
Hardware (CPU, main memory, data storage devices, etc.)
Installed components of a Linux system include the following:[96][100]

A bootloader, for example GNU GRUB, LILO, SYSLINUX or systemd-boot. This is a program that loads the Linux kernel into the computer's main memory, by being executed by the computer when it is turned on and after the firmware initialization is performed.
An init program, such as the traditional sysvinit and the newer systemd, OpenRC and Upstart. This is the first process launched by the Linux kernel, and is at the root of the process tree. It starts processes such as system services and login prompts (whether graphical or in terminal mode).
Software libraries, which contain code that can be used by running processes. On Linux systems using ELF-format executable files, the dynamic linker that manages the use of dynamic libraries is known as ld-linux.so. If the system is set up for the user to compile software themselves, header files will also be included to describe the programming interface of installed libraries. Besides the most commonly used software library on Linux systems, the GNU C Library (glibc), there are numerous other libraries, such as SDL and Mesa.
The C standard library is the library necessary to run programs written in C on a computer system, with the GNU C Library being the standard. It provides an implementation of the POSIX API, as well as extensions to that API. For embedded systems, alternatives such as musl, EGLIBC (a glibc fork once used by Debian) and uClibc (which was designed for uClinux) have been developed, although the last two are no longer maintained. Android uses its own C library, Bionic. However, musl can additionally be used as a replacement for glibc on desktop and laptop systems, as seen on certain Linux distributions like Void Linux.
Basic Unix commands, with GNU coreutils being the standard implementation. Alternatives exist for embedded systems, such as the copyleft BusyBox, and the BSD-licensed Toybox.
Widget toolkits are the libraries used to build graphical user interfaces (GUIs) for software applications. Numerous widget toolkits are available, including GTK and Clutter developed by the GNOME Project, Qt developed by the Qt Project and led by The Qt Company, and Enlightenment Foundation Libraries (EFL) developed primarily by the Enlightenment team.
A package management system, such as dpkg and RPM. Alternatively packages can be compiled from binary or source tarballs.
User interface programs such as command shells or windowing environments.
User interface
The user interface, also known as the shell, is either a command-line interface (CLI), a graphical user interface (GUI), or controls attached to the associated hardware, which is common for embedded systems. For desktop systems, the default user interface is usually graphical, although the CLI is commonly available through terminal emulator windows or on a separate virtual console.


GNOME Shell
CLI shells are text-based user interfaces, which use text for both input and output. The dominant shell used in Linux is the Bourne-Again Shell (bash), originally developed for the GNU Project; other shells such as Zsh are also used.[101][102] Most low-level Linux components, including various parts of the userland, use the CLI exclusively. The CLI is particularly suited for automation of repetitive or delayed tasks and provides very simple inter-process communication.


Debian running the Xfce desktop environment

Fedora Linux running the Plasma desktop environment
On desktop systems, the most popular user interfaces are the GUI shells, packaged together with extensive desktop environments, such as KDE Plasma, GNOME, MATE, Cinnamon, LXDE, Pantheon, and Xfce, though a variety of additional user interfaces exist. Most popular user interfaces are based on the X Window System, often simply called "X" or "X11". It provides network transparency and permits a graphical application running on one system to be displayed on another where a user may interact with the application; however, certain extensions of the X Window System are not capable of working over the network.[103] Several X display servers exist, with the reference implementation, X.Org Server, being the most popular.


I3 Tiling window manager
Several types of window managers exist for X11, including tiling, dynamic, stacking, and compositing. Window managers provide means to control the placement and appearance of individual application windows, and interact with the X Window System. Simpler X window managers such as dwm, ratpoison, or i3wm provide a minimalist functionality, while more elaborate window managers such as FVWM, Enlightenment, or Window Maker provide more features such as a built-in taskbar and themes, but are still lightweight when compared to desktop environments. Desktop environments include window managers as part of their standard installations, such as Mutter (GNOME), KWin (KDE), or Xfwm (xfce), although users may choose to use a different window manager if preferred.

Wayland is a display server protocol intended as a replacement for the X11 protocol; as of 2022, it has received relatively wide adoption.[104] Unlike X11, Wayland does not need an external window manager and compositing manager. Therefore, a Wayland compositor takes the role of the display server, window manager, and compositing manager. Weston is the reference implementation of Wayland, while GNOME's Mutter and KDE's KWin are being ported to Wayland as standalone display servers. Enlightenment has already been successfully ported since version 19.[105] Additionally, many window managers have been made for Wayland, such as Sway or Hyprland, as well as other graphical utilities such as Waybar or Rofi.

Video input infrastructure
Main article: Video4Linux
Linux currently has two modern kernel-userspace APIs for handling video input devices: V4L2 API for video streams and radio, and DVB API for digital TV reception.[106]

Due to the complexity and diversity of different devices, and due to the large number of formats and standards handled by those APIs, this infrastructure needs to evolve to better fit other devices. Also, a good userspace device library is the key to the success of having userspace applications to be able to work with all formats supported by those devices.[107][108]

Development
Main articles: Linux distribution and Free software

Simplified history of Unix-like operating systems. Linux shares similar architecture and concepts (as part of the POSIX standard) but does not share non-free source code with the original Unix or Minix.
The primary difference between Linux and many other popular contemporary operating systems is that the Linux kernel and other components are free and open-source software. Linux is not the only such operating system, although it is by far the most widely used.[109] Some free and open-source software licenses are based on the principle of copyleft, a kind of reciprocity: any work derived from a copyleft piece of software must also be copyleft itself. The most common free software license, the GNU General Public License (GPL), is a form of copyleft and is used for the Linux kernel and many of the components from the GNU Project.[110]

Linux-based distributions are intended by developers for interoperability with other operating systems and established computing standards. Linux systems adhere to POSIX,[111] Single UNIX Specification (SUS),[112] Linux Standard Base (LSB), ISO, and ANSI standards where possible, although to date only one Linux distribution has been POSIX.1 certified, Linux-FT.[113][114] The Open Group has tested and certified at least two Linux distributions as qualifying for the Unix trademark, EulerOS and Inspur K-UX.[115]

Free software projects, although developed through collaboration, are often produced independently of each other. The fact that the software licenses explicitly permit redistribution, however, provides a basis for larger-scale projects that collect the software produced by stand-alone projects and make it available all at once in the form of a Linux distribution.

Many Linux distributions manage a remote collection of system software and application software packages available for download and installation through a network connection. This allows users to adapt the operating system to their specific needs. Distributions are maintained by individuals, loose-knit teams, volunteer organizations, and commercial entities. A distribution is responsible for the default configuration of the installed Linux kernel, general system security, and more generally integration of the different software packages into a coherent whole. Distributions typically use a package manager such as apt, yum, zypper, pacman or portage to install, remove, and update all of a system's software from one central location.[116]

Community
See also: Free software movement and Linux user group
A distribution is largely driven by its developer and user communities. Some vendors develop and fund their distributions on a volunteer basis, Debian being a well-known example. Others maintain a community version of their commercial distributions, as Red Hat does with Fedora, and SUSE does with openSUSE.[117][118]

In many cities and regions, local associations known as Linux User Groups (LUGs) seek to promote their preferred distribution and by extension free software. They hold meetings and provide free demonstrations, training, technical support, and operating system installation to new users. Many Internet communities also provide support to Linux users and developers. Most distributions and free software / open-source projects have IRC chatrooms or newsgroups. Online forums are another means of support, with notable examples being Unix & Linux Stack Exchange,[119][120] LinuxQuestions.org and the various distribution-specific support and community forums, such as ones for Ubuntu, Fedora, Arch Linux, Gentoo, etc. Linux distributions host mailing lists; commonly there will be a specific topic such as usage or development for a given list.

There are several technology websites with a Linux focus. Print magazines on Linux often bundle cover disks that carry software or even complete Linux distributions.[121][122]

Although Linux distributions are generally available without charge, several large corporations sell, support, and contribute to the development of the components of the system and free software. An analysis of the Linux kernel in 2017 showed that well over 85% of the code was developed by programmers who are being paid for their work, leaving about 8.2% to unpaid developers and 4.1% unclassified.[123] Some of the major corporations that provide contributions include Intel, Samsung, Google, AMD, Oracle, and Facebook.[123] Several corporations, notably Red Hat, Canonical, and SUSE have built a significant business around Linux distributions.

The free software licenses, on which the various software packages of a distribution built on the Linux kernel are based, explicitly accommodate and encourage commercialization; the relationship between a Linux distribution as a whole and individual vendors may be seen as symbiotic. One common business model of commercial suppliers is charging for support, especially for business users. A number of companies also offer a specialized business version of their distribution, which adds proprietary support packages and tools to administer higher numbers of installations or to simplify administrative tasks.[124]

Another business model is to give away the software to sell hardware. This used to be the norm in the computer industry, with operating systems such as CP/M, Apple DOS, and versions of the classic Mac OS before 7.6 freely copyable (but not modifiable). As computer hardware standardized throughout the 1980s, it became more difficult for hardware manufacturers to profit from this tactic, as the OS would run on any manufacturer's computer that shared the same architecture.[125][126]

Programming on Linux
Most programming languages support Linux either directly or through third-party community based ports.[127] The original development tools used for building both Linux applications and operating system programs are found within the GNU toolchain, which includes the GNU Compiler Collection (GCC) and the GNU Build System. Amongst others, GCC provides compilers for Ada, C, C++, Go and Fortran. Many programming languages have a cross-platform reference implementation that supports Linux, for example PHP, Perl, Ruby, Python, Java, Go, Rust and Haskell. First released in 2003, the LLVM project provides an alternative cross-platform open-source compiler for many languages. Proprietary compilers for Linux include the Intel C++ Compiler, Sun Studio, and IBM XL C/C++ Compiler. BASIC is available in procedural form from QB64, PureBasic, Yabasic, GLBasic, Basic4GL, XBasic, wxBasic, SdlBasic, and Basic-256, as well as object oriented through Gambas, FreeBASIC, B4X, Basic for Qt, Phoenix Object Basic, NS Basic, ProvideX, Chipmunk Basic, RapidQ and Xojo. Pascal is implemented through GNU Pascal, Free Pascal, and Virtual Pascal, as well as graphically via Lazarus, PascalABC.NET, or Delphi using FireMonkey (previously through Borland Kylix).[128][129]

A common feature of Unix-like systems, Linux includes traditional specific-purpose programming languages targeted at scripting, text processing and system configuration and management in general. Linux distributions support shell scripts, awk, sed and make. Many programs also have an embedded programming language to support configuring or programming themselves. For example, regular expressions are supported in programs like grep and locate, the traditional Unix message transfer agent Sendmail contains its own Turing complete scripting system, and the advanced text editor GNU Emacs is built around a general purpose Lisp interpreter.[130][131][132]

Most distributions also include support for PHP, Perl, Ruby, Python and other dynamic languages. While not as common, Linux also supports C# and other CLI languages (via Mono), Vala, and Scheme. Guile Scheme acts as an extension language targeting the GNU system utilities, seeking to make the conventionally small, static, compiled C programs of Unix design rapidly and dynamically extensible via an elegant, functional high-level scripting system; many GNU programs can be compiled with optional Guile bindings to this end. A number of Java virtual machines and development kits run on Linux, including the original Sun Microsystems JVM (HotSpot), and IBM's J2SE RE, as well as many open-source projects like Kaffe and Jikes RVM; Kotlin, Scala, Groovy and other JVM languages are also available.

GNOME and KDE are popular desktop environments and provide a framework for developing applications. These projects are based on the GTK and Qt widget toolkits, respectively, which can also be used independently of the larger framework. Both support a wide variety of languages. There are a number of Integrated development environments available including Anjuta, Code::Blocks, CodeLite, Eclipse, Geany, ActiveState Komodo, KDevelop, Lazarus, MonoDevelop, NetBeans, and Qt Creator, while the long-established editors Vim, nano and Emacs remain popular.[133]

Hardware support

Linux is ubiquitously found on various types of hardware.
See also: List of Linux-supported computer architectures
The Linux kernel is a widely ported operating system kernel, available for devices ranging from mobile phones to supercomputers; it runs on a highly diverse range of computer architectures, including ARM-based Android smartphones and the IBM Z mainframes. Specialized distributions and kernel forks exist for less mainstream architectures; for example, the ELKS kernel fork can run on Intel 8086 or Intel 80286 16-bit microprocessors,[134] while the ŒºClinux kernel fork may run on systems without a memory management unit.[135] The kernel also runs on architectures that were only ever intended to use a proprietary manufacturer-created operating system, such as Macintosh computers[136][137] (with PowerPC, Intel, and Apple silicon processors), PDAs, video game consoles, portable music players, and mobile phones.

Linux has a reputation for supporting old hardware very well by maintaining standardized drivers for a long time.[138] There are several industry associations and hardware conferences devoted to maintaining and improving support for diverse hardware under Linux, such as FreedomHEC. Over time, support for different hardware has improved in Linux, resulting in any off-the-shelf purchase having a "good chance" of being compatible.[139]

In 2014, a new initiative was launched to automatically collect a database of all tested hardware configurations.[140]

Uses
Main article: Linux range of use
Market share and uptake
Main article: Linux adoption
See also: Usage share of operating systems
Many quantitative studies of free/open-source software focus on topics including market share and reliability, with numerous studies specifically examining Linux.[141] The Linux market is growing, and the Linux operating system market size is expected to see a growth of 19.2% by 2027, reaching $15.64 billion, compared to $3.89 billion in 2019.[142] Analysts project a Compound Annual Growth Rate (CAGR) of 13.7% between 2024 and 2032, culminating in a market size of US$34.90 billion by the latter year.[citation needed] Analysts and proponents attribute the relative success of Linux to its security, reliability, low cost, and freedom from vendor lock-in.[143][144]

Desktops and laptops
According to web server statistics (that is, based on the numbers recorded from visits to websites by client devices), in October 2024, the estimated market share of Linux on desktop computers was around 4.3%. In comparison, Microsoft Windows had a market share of around 73.4%, while macOS covered around 15.5%.[45]
Web servers
W3Cook publishes stats that use the top 1,000,000 Alexa domains,[145] which as of May 2015 estimate that 96.55% of web servers run Linux, 1.73% run Windows, and 1.72% run FreeBSD.[146]
W3Techs publishes stats that use the top 10,000,000 Alexa domains and the top 1,000,000 Tranco domains, updated monthly[147] and as of November 2020 estimate that Linux is used by 39% of the web servers, versus 21.9% being used by Microsoft Windows.[148] 40.1% used other types of Unix.[149]
IDC's Q1 2007 report indicated that Linux held 12.7% of the overall server market at that time;[150] this estimate was based on the number of Linux servers sold by various companies, and did not include server hardware purchased separately that had Linux installed on it later.
As of 2024, estimates suggest Linux accounts for at least 80% of the public cloud workload, partly thanks to its widespread use in platforms like Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform.[151][152][153]

ZDNet report that 96.3% of the top one million web servers are running Linux.[154][155] W3Techs state that Linux powers at least 39.2% of websites whose operating system is known, with other estimates saying 55%.[156][157]

Mobile devices
Android, which is based on the Linux kernel, has become the dominant operating system for smartphones. In April 2023, 68.61% of mobile devices accessing websites using StatCounter were from Android.[158] Android is also a popular operating system for tablets, being responsible for more than 60% of tablet sales as of 2013.[159] According to web server statistics, as of October 2021 Android has a market share of about 71%, with iOS holding 28%, and the remaining 1% attributed to various niche platforms.[160]
Film production
For years, Linux has been the platform of choice in the film industry. The first major film produced on Linux servers was 1997's Titanic.[161][162] Since then major studios including DreamWorks Animation, Pixar, Weta Digital, and Industrial Light & Magic have migrated to Linux.[163][164][165] According to the Linux Movies Group, more than 95% of the servers and desktops at large animation and visual effects companies use Linux.[166]
Use in government
Linux distributions have also gained popularity with various local and national governments. News of the Russian military creating its own Linux distribution has also surfaced, and has come to fruition as the G.H.ost Project.[167] The Indian state of Kerala has gone to the extent of mandating that all state high schools run Linux on their computers.[168][169] China uses Linux exclusively as the operating system for its Loongson processor family to achieve technology independence.[170] In Spain, some regions have developed their own Linux distributions, which are widely used in education and official institutions, like gnuLinEx in Extremadura and Guadalinex in Andalusia. France and Germany have also taken steps toward the adoption of Linux.[171] North Korea's Red Star OS, developed as of 2002, is based on a version of Fedora Linux.[172]
Copyright, trademark, and naming
See also: GNU/Linux naming controversy and SCO‚ÄìLinux disputes
The Linux kernel is licensed under the GNU General Public License (GPL), version 2. The GPL requires that anyone who distributes software based on source code under this license must make the originating source code (and any modifications) available to the recipient under the same terms.[173] Other key components of a typical Linux distribution are also mainly licensed under the GPL, but they may use other licenses; many libraries use the GNU Lesser General Public License (LGPL), a more permissive variant of the GPL, and the X.Org implementation of the X Window System uses the MIT License.

Torvalds states that the Linux kernel will not move from version 2 of the GPL to version 3.[174][175] He specifically dislikes some provisions in the new license which prohibit the use of the software in digital rights management.[176] It would also be impractical to obtain permission from all the copyright holders, who number in the thousands.[177]

A 2001 study of Red Hat Linux 7.1 found that this distribution contained 30 million source lines of code.[178] Using the Constructive Cost Model, the study estimated that this distribution required about eight thousand person-years of development time. According to the study, if all this software had been developed by conventional proprietary means, it would have cost about US$1.82 billion[179] to develop in 2023 in the United States.[178] Most of the source code (71%) was written in the C programming language, but many other languages were used, including C++, Lisp, assembly language, Perl, Python, Fortran, and various shell scripting languages. Slightly over half of all lines of code were licensed under the GPL. The Linux kernel itself was 2.4 million lines of code, or 8% of the total.[178]

In a later study, the same analysis was performed for Debian version 4.0 (etch, which was released in 2007).[180] This distribution contained close to 283 million source lines of code, and the study estimated that it would have required about seventy three thousand man-years and cost US$10.2 billion[179] (in 2023 dollars) to develop by conventional means.



The name "Linux" is also used for a laundry detergent made by Swiss company R√∂sch.[181]
In the United States, the name Linux is a trademark registered to Linus Torvalds.[15] Initially, nobody registered it. However, on August 15, 1994, William R. Della Croce Jr. filed for the trademark Linux, and then demanded royalties from Linux distributors. In 1996, Torvalds and some affected organizations sued him to have the trademark assigned to Torvalds, and, in 1997, the case was settled.[182] The licensing of the trademark has since been handled by the Linux Mark Institute (LMI). Torvalds has stated that he trademarked the name only to prevent someone else from using it. LMI originally charged a nominal sublicensing fee for use of the Linux name as part of trademarks,[183] but later changed this in favor of offering a free, perpetual worldwide sublicense.[184]


Tux sometimes is stylized with incorporation of the GNU logo
The Free Software Foundation (FSF) prefers GNU/Linux as the name when referring to the operating system as a whole, because it considers Linux distributions to be variants of the GNU operating system initiated in 1983 by Richard Stallis, president of the FSF.[29][30] The foundation explicitly takes no issue over the name Android for the Android OS, which is also an operating system based on the Linux kernel, as GNU is not a part of it.

A minority of public figures and software projects other than Stallis and the FSF, notably distributions consisting of only free software, such as Debian (which had been sponsored by the FSF up to 1996),[185] also use GNU/Linux when referring to the operating system as a whole.[186][187][188] Most media and common usage, however, refers to this family of operating systems simply as Linux, as do many large Linux distributions (for example, SUSE Linux and Red Hat Enterprise Linux).

As of May 2011, about 8% to 13% of the lines of code of the Linux distribution Ubuntu (version "Natty") is made of GNU components (the range depending on whether GNOME is considered part of GNU); meanwhile, 6% is taken by the Linux kernel, increased to 9% when including its direct dependencies.[189]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex1 l[K[H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex1 
[?2004lRichard Matthew Stallis (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallis launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallis launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallis pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallis has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallis resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallis remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallis was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallis attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallis was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallis received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallis published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallis and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallis worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallis found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallis boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallis thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallis proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallis's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallis and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallis had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallis of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallis believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallis worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallis argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallis argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallis quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallis announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Stallis in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallis published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallis was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallis popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallis was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallis and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallis argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallis's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallis's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallis and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallis's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallis's intransigence. Win or lose, Stallis will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallis instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Stallis's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallis resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallis remained head of the GNU project.[48][49]

Activism
Stallis has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallis's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallis (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallis disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallis called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallis was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallis giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallis obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallis has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallis held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallis worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallis using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallis has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallis, while Jobs was at NeXT, Jobs asked Stallis if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallis initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallis sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallis used a notebook from the One Laptop per Child program. Stallis's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallis used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallis used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallis's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallis has used the gNewSense operating system.[76][77]

Copyright reduction
Stallis has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallis has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallis at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallis mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallis recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallis has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallis, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallis places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Stallis argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallis rejects a common alternative term, open-source software, because it does not call to mind what Stallis sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallis does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallis asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallis refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallis professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallis objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallis argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Stallis remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallis's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallis's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallis's resignation.[119][114] During the backlash to Stallis's comments regarding the Epstein case, Stallis received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallis had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallis acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On September 16, 2019, Stallis announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallis asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallis announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallis's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallis.[129][130][131] In response, an open letter asking for the FSF to retain Stallis was also published, arguing that Stallis's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallis.[134] After that Stallis issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallis announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallis lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallis has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallis revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ .-ex[K[K[K/2[Kex2 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex2 
[?2004lRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner THAAAAT its users have the freedom to use, study, distribute, and modify THAAAAT software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With THAAAAT he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore THAAAAT I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at THAAAAT time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (THAAAAT is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent THAAAAT it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified THAAAAT it is blocking the user's freedom THAAAAT he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing THAAAAT the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt THAAAAT the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed THAAAAT LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallman argues THAAAAT software users should have the freedom to share with their neighbors and be able to study and make changes to the software THAAAAT they use. He maintains THAAAAT attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues THAAAAT this is a misstatement of his philosophy.[28] He argues THAAAAT freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues THAAAAT moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute THAAAAT doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized THAAAAT I was elected to do the job. I chose to make the system compatible with Unix so THAAAAT it would be portable, and so THAAAAT Unix users could easily switch to it."[36]


Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues THAAAAT not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled THAAAAT of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge THAAAAT "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted THAAAAT Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of THAAAAT, Stallman remained head of the GNU project.[48][49]

Activism
Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software THAAAAT analyzes the packages currently installed on a Debian GNU/Linux system, and reports those THAAAAT are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was THAAAAT judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender THAAAAT freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests THAAAAT, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure THAAAAT "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates THAAAAT no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader THAAAAT prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says THAAAAT such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning THAAAAT Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements THAAAAT accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested THAAAAT the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact THAAAAT he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is THAAAAT the journalist agrees to use his terminology throughout the article.[91]

Stallman argues THAAAAT the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things THAAAAT are more dissimilar than similar.[92] He also argues THAAAAT by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price THAAAAT may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests THAAAAT people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes THAAAAT the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software THAAAAT is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallman asks THAAAAT the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims THAAAAT the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply THAAAAT the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said THAAAAT he objects to modification of the name and THAAAAT the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time THAAAAT someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said THAAAAT he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned THAAAAT Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people THAAAAT Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying THAAAAT Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued THAAAAT "the most plausible scenario is THAAAAT she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal THAAAAT from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way THAAAAT depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding THAAAAT it was not relevant to the harm THAAAAT was done to the victim.[114][116]

Stallman remained critical of Epstein and his role, saying "We know THAAAAT Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim THAAAAT voluntarily [sic] pedophilia harms children. The arguments THAAAAT it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea THAAAAT their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged THAAAAT since the time of his past writings, he had learned THAAAAT there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do THAAAAT."[122][123][124][125]

On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted THAAAAT his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for THAAAAT hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing THAAAAT Stallman's statements were mischaracterized, misunderstood and THAAAAT they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After THAAAAT Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims THAAAAT had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said THAAAAT he is "an atheist of Jewish ancestry"[10] and often wears a button THAAAAT reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallman has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said THAAAAT his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex2 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex2 
[?2004lRichard Matthew Stallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner THAAAAT its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Stallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With THAAAAT he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Stallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In September 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Stallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore THAAAAT I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at THAAAAT time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent THAAAAT it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified THAAAAT it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Stallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing THAAAAT the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Stallman argues THAAAAT software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Stallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute THAAAAT doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Stallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized THAAAAT I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Stallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Stallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Stallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Stallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues THAAAAT not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Stallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled THAAAAT of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Stallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted THAAAAT Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activism
Stallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Stallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software THAAAAT analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Stallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Stallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Stallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Stallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Stallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was THAAAAT judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Stallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender THAAAAT freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Stallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests THAAAAT, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Stallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Stallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Stallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader THAAAAT prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Stallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested THAAAAT the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Stallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Stallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is THAAAAT the journalist agrees to use his terminology throughout the article.[91]

Stallman argues THAAAAT the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price THAAAAT may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests THAAAAT people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Stallman asks THAAAAT the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Surveillance resistance
Stallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time THAAAAT someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In September 2019, it was learned THAAAAT Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Stallman remained critical of Epstein and his role, saying "We know THAAAAT Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On September 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted THAAAAT his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FSF
In March 2021, at LibrePlanet2021, Stallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing THAAAAT Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims THAAAAT had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Stallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Stallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said THAAAAT he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Stallman has written a collection of filk music and parody songs.[152]

In September 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said THAAAAT his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ .-ex[K[K[K[K./ex3 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 
[?2004lRichard Matthew Xtallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Xtallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Xtallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Xince the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In Xeptember 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Xtallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His first experience with actual computers was at the IBM New York Xcientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard University and MIT
As a first-year student at Harvard University in fall 1970, Xtallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMX, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (starting in 1975) as a research assistant at MIT under Gerry Xussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Xtallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Xtallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Xcribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Xtallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lisp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Xymbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Xtallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Xtallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Xtallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Xtallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Xtallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Xtallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Xtallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Xtallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Xtallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clashed with Xtallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's something comforting about Xtallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Xtallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public statement signed by 33 maintainers of the GNU project asserted that Xtallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activism
Xtallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Xtallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Xtallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Xtallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In August 2006, at his meetings with the government of the Indian Xtate of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After personal meetings, Xtallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Xtallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Protesting against proprietary software in April 2006, Xtallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Xtallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Xtallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Xtallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Xtallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Xtallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Xtallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Xtallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Xtallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Xtallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Xtallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Xtallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

These laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open source and Free software
His requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Xtallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controversy
Xtallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Xurveillance resistance
Xtallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Epstein scandal
In Xeptember 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Xtallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On Xeptember 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FXF
In March 2021, at LibrePlanet2021, Xtallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FXF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Personal life

Xtallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Xtallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Xtallman has written a collection of filk music and parody songs.[152]

In Xeptember 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 
[?2004lRichard Matthew Xtallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Xtallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Xtallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Xince the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In Xeptember 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Xtallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

HiX first experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard UniverXity and MIT
AX a first-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of hiX first year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (Xtarting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

AX a hacker in MIT's AI laboratory, Stallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

EventX leading to GNU
In the late 1970X and early 1980s, the hacker culture which Stallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombX in the Scribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Xtallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded LiXp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Xtallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Xtallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Xtallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Xtallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Xtallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Xtallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Xtallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, LinuX Torvalds, a Finnish student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Xtallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developerX at Lucid Inc. doing their own work on Emacs clashed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There'X something comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Xtallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public Xtatement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

ActiviXm
Xtallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Xtallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Xtallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Xtallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In AuguXt 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After perXonal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Xtallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

ProteXting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Xtallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Xtallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Xtallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Xtallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He haX reportedly refused to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Xtallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Xtallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Xtallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Xtallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

TerminologieX

Xtallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Xtallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Xtallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

TheXe laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open Xource and Free software
HiX requests that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controverXy
Xtallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Xurveillance resistance
Xtallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He referX to mobile phones as "portable surveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

CommentX about Jeffrey Epstein scandal
In Xeptember 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Xtallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On Xeptember 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FXF
In March 2021, at LibrePlanet2021, Xtallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizationX criticized, defunded, and/or cut ties with the FSF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

PerXonal life

Xtallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Xtallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Xtallman has written a collection of filk music and parody songs.[152]

In Xeptember 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 
[?2004lRichard Matthew X (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

X launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

X pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. X the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In X 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
X was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His firX experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard UniverX and MIT
As a firX student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his firX year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (X in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, X worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which X thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the X markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, X and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded LiX Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

X argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, X quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
X announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


X in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, X published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

X popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

X was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a FinniX student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

X influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs claX with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's X comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, X instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public X signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

ActiviX
X has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

X staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, X called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


X giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In AuguX 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After perX meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

X has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

ProteX against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


X using his Lemote machine at Indian Institute of Technology Madras, Chennai
X has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, X used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
X has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refuX to autograph anything bearing a '¬©' symbol, in line with his views.[81]

X has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


X at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
X mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

X recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

X, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
X places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

X argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

TheX laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open X and Free software
His requeX that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controverX
X asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

X resistance
X professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable X and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey EpX scandal
In X 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

X remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On X 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FX
In March 2021, at LibrePlanet2021, X announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FX including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

PerX life

X announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
X lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

X has written a collection of filk music and parody songs.[152]

In X 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 
[?2004lRichard Matthew X (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

X launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

X pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. X the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In X 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
X was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His firX experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard UniverX and MIT
As a firX student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his firX year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (X in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, X worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which X thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the X markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, X and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded LiX Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

X argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, X quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
X announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


X in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, X published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

X popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

X was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a FinniX student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

X influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs claX with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's X comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, X instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public X signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

ActiviX
X has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

X staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, X called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


X giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In AuguX 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After perX meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

X has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

ProteX against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


X using his Lemote machine at Indian Institute of Technology Madras, Chennai
X has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, X used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
X has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refuX to autograph anything bearing a '¬©' symbol, in line with his views.[81]

X has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


X at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
X mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

X recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

X, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
X places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

X argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

TheX laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open X and Free software
His requeX that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controverX
X asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

X resistance
X professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable X and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey EpX scandal
In X 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

X remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On X 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FX
In March 2021, at LibrePlanet2021, X announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FX including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

PerX life

X announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
X lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

X has written a collection of filk music and parody songs.[152]

In X 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 
[?2004lRichard Matthew tallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

tallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

tallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. ince the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In eptember 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
tallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His firt experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard Univerity and MIT
As a firt-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his firt year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (tarting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, tallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which tallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the cribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, tallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lip Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

tallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, tallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
tallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


tallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, tallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

tallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

tallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnih student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

tallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clahed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's omething comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, tallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public tatement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activim
tallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

tallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, tallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


tallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In Augut 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After peronal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

tallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Proteting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


tallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
tallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, tallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
tallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refued to autograph anything bearing a '¬©' symbol, in line with his views.[81]

tallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


tallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
tallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

tallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

tallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
tallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

tallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

Thee laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open ource and Free software
His requets that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controvery
tallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

urveillance resistance
tallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable urveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Eptein scandal
In eptember 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

tallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On eptember 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FF
In March 2021, at LibrePlanet2021, tallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Peronal life

tallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
tallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

tallman has written a collection of filk music and parody songs.[152]

In eptember 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 
[?2004lRichard Matthew Atallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

Atallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

Atallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. Aince the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In Aeptember 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
Atallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His firAt experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard UniverAity and MIT
As a firAt-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his firAt year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (Atarting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, Atallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which Atallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the Acribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, Atallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded LiAp Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

Atallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, Atallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
Atallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


Atallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, Atallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

Atallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

Atallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a FinniAh student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

Atallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs claAhed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's Aomething comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, Atallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public Atatement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

ActiviAm
Atallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

Atallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, Atallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


Atallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In AuguAt 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After perAonal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

Atallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

ProteAting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


Atallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
Atallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, Atallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
Atallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refuAed to autograph anything bearing a '¬©' symbol, in line with his views.[81]

Atallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


Atallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
Atallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

Atallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

Atallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
Atallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

Atallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

TheAe laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open Aource and Free software
His requeAts that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controverAy
Atallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

Aurveillance resistance
Atallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable Aurveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey EpAtein scandal
In Aeptember 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

Atallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On Aeptember 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FAF
In March 2021, at LibrePlanet2021, Atallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FAF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

PerAonal life

Atallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
Atallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

Atallman has written a collection of filk music and parody songs.[152]

In Aeptember 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 
[?2004lRichard Matthew tallman (/Ààst…îÀêlm…ôn/ STAWL-m…ôn; born March 16, 1953), also known by his initials, rms,[1] is an American free software movement activist and programmer. He campaigns for software to be distributed in such a manner that its users have the freedom to use, study, distribute, and modify that software. Software which ensures these freedoms is termed free software. Stallman launched the GNU Project, founded the Free Software Foundation (FSF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all versions of the GNU General Public License.

tallman launched the GNU Project in September 1983 to write a Unix-like computer operating system composed entirely of free software.[3] With that he also launched the free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

tallman pioneered the concept of copyleft, which uses the principles of copyright law to preserve the right to use, modify, and distribute free software. He is the main author of free software licenses which describe those terms, most notably the GNU General Public License (GPL), the most widely used free software license.[7]

In 1989, he co-founded the League for Programming Freedom. ince the mid-1990s, Stallman has spent most of his time advocating for free software, as well as campaigning against software patents, digital rights management (which he refers to as digital restrictions management, calling the more common term misleading), and other legal and technical systems which he sees as taking away users' freedoms; this includes software license agreements, non-disclosure agreements, activation keys, dongles, copy restriction, proprietary formats, and binary executables without source code.

In eptember 2019, Stallman resigned as president of the FSF and left his visiting scientist role at MIT after making controversial comments about the Jeffrey Epstein sex trafficking scandal.[8] Stallman remained head of the GNU Project, and in 2021 returned to the FSF board of directors and others.

Early life
tallman was born March 16, 1953[9] in New York City, to a family of Jewish heritage.[10] He had a troublesome relationship with his parents and did not feel he had a proper home.[10] He was interested in computers at a young age; when he was a pre-teen at a summer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, Stallman attended a Columbia University Saturday program for high school students.[11] He was also a volunteer laboratory assistant in the biology department at Rockefeller University. Although he was interested in mathematics and physics, his supervising professor at Rockefeller thought he showed promise as a biologist.[12]

His firt experience with actual computers was at the IBM New York Scientific Center when he was in high school. He was hired for the summer in 1970 after his senior year of high school, to write a numerical analysis program in Fortran.[11] He completed the task after a couple of weeks ("I swore that I would never use FORTRAN again because I despised it as a language compared with other languages") and spent the rest of the summer writing a text editor in APL[13] and a preprocessor for the PL/I programming language on the IBM System/360.[14]

Harvard Univerity and MIT
As a firt-year student at Harvard University in fall 1970, Stallman was known for his strong performance in Math 55.[15] He was happy, "For the first time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his firt year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was usually known by his initials, RMS, which he used in his computer accounts.[1][17] Stallman received a bachelor's degree in physics (magna cum laude) from Harvard in 1974.[18] He considered staying on at Harvard, but instead decided to enroll as a graduate student at the Massachusetts Institute of Technology (MIT). He pursued a doctorate in physics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (tarting in 1975) as a research assistant at MIT under Gerry Sussman,[14] Stallman published a paper (with Sussman) in 1977 on an AI truth maintenance system, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in constraint satisfaction problems. As of 2009,[needs update] the technique Stallman and Sussman introduced was still the most general and powerful form of intelligent backtracking.[20] The technique of constraint recording, wherein partial results of a search are recorded for later reuse, was also introduced in this paper.[20]

As a hacker in MIT's AI laboratory, tallman worked on software projects like TECO and Emacs for the Incompatible Timesharing System (ITS), as well as the Lisp machine operating system (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by Symbolics and Lisp Machines, Inc. (LMI) starting around 1980).[17] He became an ardent critic of restricted computer access in the lab, which at that time was funded primarily by the Defense Advanced Research Projects Agency (DARPA). When MIT's Laboratory for Computer Science (LCS) installed a password control system in 1977, Stallman found a way to decrypt the passwords and sent users messages containing their decoded password, with a suggestion to change it to the empty string (that is, no password) instead, to re-enable anonymous access to the systems. Around 20 percent of the users followed his advice at the time, although passwords ultimately prevailed. Stallman boasted of the success of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which tallman thrived on began to fragment. To prevent software from being used on their competitors' computers, most manufacturers stopped distributing source code and began using copyright and restrictive software licenses to limit or prohibit copying and redistribution. Such proprietary software had existed before, and it became apparent that it would become the norm. This shift in the legal characteristics of software was a consequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the cribe markup language and word processing system to restrict unlicensed access to the software, Stallman proclaimed it "a crime against humanity".[14] During an interview in 2008, he clarified that it is blocking the user's freedom that he believes is a crime, not the issue of charging for software.[23] Stallman's texinfo is a GPL replacement, loosely based on Scribe;[24] the original version was finished in 1986.[25]

In 1980, tallman and some other hackers at the AI Lab were refused access to the source code for the software of a newly installed laser printer, the Xerox 9700.[citation needed] Stallman had modified the software for the Lab's previous laser printer (the XGP, Xerographic Printer), so it electronically messaged a user when the person's job was printed, and would message all logged-in users waiting for print jobs if the printer was jammed. Not being able to add these features to the new printer was a major inconvenience, as the printer was on a different floor from most of the users. This experience convinced Stallman of people's need to be able to freely modify the software they use.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lip Machines, Inc. (LMI) to market Lisp machines, which he and Tom Knight designed at the lab. Greenblatt rejected outside investment, believing that the proceeds from the construction and sale of a few machines could be profitably reinvested in the growth of the company. In contrast, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded Symbolics, with the aid of Russ Noftsker, an AI Lab administrator. Symbolics recruited most of the remaining hackers including notable hacker Bill Gosper, who then left the AI Lab. Symbolics also forced Greenblatt to resign by citing MIT policies. While both companies delivered proprietary software, Stallman believed that LMI, unlike Symbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, Stallman worked by himself to clone the output of the Symbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

tallman argues that software users should have the freedom to share with their neighbors and be able to study and make changes to the software that they use. He maintains that attempts by proprietary software vendors to prohibit these acts are antisocial and unethical.[27] The phrase "software wants to be free" is often incorrectly attributed to him, and Stallman argues that this is a misstatement of his philosophy.[28] He argues that freedom is vital for the sake of users and society as a moral value, and not merely for pragmatic reasons such as possibly developing technically superior software.[29] Eric S. Raymond, one of the creators of the open-source movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code secrecy.[31]

In February 1984, tallman quit his job at MIT to work full-time on the GNU project, which he had announced in September 1983. Since then, he had remained affiliated with MIT as an unpaid[32] "visiting scientist" in the Computer Science and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Institute that doubled as his legal residence.[34]

GNU project
Main article: GNU Project
tallman announced the plan for the GNU operating system in September 1983 on several ARPANET mailing lists and USENET.[3][35] He started the project on his own and describes: "As an operating system developer, I had the right skills for this job. So even though I could not take success for granted, I realized that I was elected to do the job. I chose to make the system compatible with Unix so that it would be portable, and so that Unix users could easily switch to it."[36]


tallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji Subhash Engineering College, Kolkata, India
In 1985, tallman published the GNU Manifesto, which outlined his motivation for creating a free operating system called GNU, which would be compatible with Unix.[17] The name GNU is a recursive acronym for "GNU's Not Unix".[17] Soon after, he started a nonprofit corporation called the Free Software Foundation to employ free software programmers and provide a legal infrastructure for the free software movement. Stallman was the nonsalaried president of the FSF, which is a 501(c)(3) nonprofit organization founded in Massachusetts.[37]

tallman popularized the concept of copyleft, a legal mechanism to protect the modification and redistribution rights for free software. It was first implemented in the GNU Emacs General Public License, and in 1989 the first program-independent GNU General Public License (GPL) was released. By then, much of the GNU system had been completed.

tallman was responsible for contributing many necessary tools, including a text editor (GNU Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.

In 1991, Linus Torvalds, a Finnih student, used the GNU's development tools to produce the free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux to refer to the general-purpose operating system thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU in the name of the operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.

tallman's influences on hacker culture include the name POSIX[38] and the Emacs editor. On Unix systems, GNU Emacs's popularity rivaled that of another editor vi, spawning an editor war. Stallman's take on this was to canonize himself as St. IGNUcius of the Church of Emacs[39][40] and acknowledge that "vi vi vi is the editor of the beast", while "using a free version of vi is not a sin; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clahed with Stallman and ultimately forked the software into what would become XEmacs.[42] The technology journalist Andrew Leonard has characterized what he sees as Stallman's uncompromising stubbornness as common among elite computer programmers:

There's omething comforting about Stallman's intransigence. Win or lose, Stallman will never give up. He'll be the stubbornest mule on the farm until the day he dies. Call it fixity of purpose, or just plain cussedness, his single-minded commitment and brutal honesty are refreshing in a world of spin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, tallman instituted "Kind Communication Guidelines" for the GNU project to help its mailing list discussions remain constructive while avoiding explicitly promoting diversity.[44]

In October 2019, a public tatement signed by 33 maintainers of the GNU project asserted that Stallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer users" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The statement was published soon after Stallman resigned as president of the FSF and left his "visiting scientist" role at MIT in September 2019.[46][47] In spite of that, Stallman remained head of the GNU project.[48][49]

Activim
tallman has written many essays on software freedom, and has been an outspoken political campaigner for the free software movement since the early 1990s.[17] The speeches he has regularly given are titled The GNU Project and the Free Software Movement,[50] The Dangers of Software Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public consultation for the drafting of version 3 of the GNU General Public License, he added a fourth topic explaining the proposed changes.[53]

tallman's staunch advocacy for free software inspired the creation of the Virtual Richard M. Stallman (vrms), software that analyzes the packages currently installed on a Debian GNU/Linux system, and reports those that are from the non-free tree.[54] Stallman disagrees with parts of Debian's definition of free software.[55]

In 1999, tallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The resulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had similar aims and was enjoying greater success.[57] Stallman was on the Advisory Council of Latin American television station teleSUR from its launch[58] but resigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab Spring.[59]


tallman giving a speech on "Free Software and Your Freedom" at the biennale du design of Saint-√âtienne (2008)
In Augut 2006, at his meetings with the government of the Indian State of Kerala, he persuaded officials to discard proprietary software, such as Microsoft's, at state-run schools. This has resulted in a landmark decision to switch all school computers in 12,500 high schools from Windows to a free software operating system.[60]

After peronal meetings, Stallman obtained positive statements about the free software movement from the then-president of India, A. P. J. Abdul Kalam,[61] French 2007 presidential candidate S√©gol√®ne Royal,[62] and the president of Ecuador Rafael Correa.[63]

tallman has participated in protests about software patents,[64] digital rights management,[65][66] and proprietary software.

Proteting against proprietary software in April 2006, Stallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where Stallman worked, resulting in the police being called.[67] AMD has since acquired ATI and has taken steps to make their hardware documentation available for use by the free software community.[68]


tallman using his Lemote machine at Indian Institute of Technology Madras, Chennai
tallman has characterized Steve Jobs as having a "malign influence" on computing because of Jobs' leadership in guiding Apple to produce closed platforms.[69][70] According to Stallman, while Jobs was at NeXT, Jobs asked Stallman if he could distribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocessor under a proprietary license. Stallman initially thought this would be legal, but since he also thought it would be "very undesirable for free software", he asked a lawyer for advice. The response he got was that judges would consider such schemes to be "subterfuges" and would be very harsh toward them, and a judge would ask whether it was "really" one program, rather than how the parts were labeled. Therefore, Stallman sent a message back to Jobs which said they believed Jobs' plan was not allowed by the GPL, which resulted in NeXT releasing the Objective-C front end under GPL.[71][non-primary source needed]

For a period of time, tallman used a notebook from the One Laptop per Child program. Stallman's computer is a refurbished ThinkPad X200 with Libreboot (a free BIOS replacement), and Trisquel GNU/Linux.[72] Before the ThinkPad X200, Stallman used a Thinkpad T400s with Libreboot and Trisquel GNU/Linux.[73] And before the T400s, Stallman used a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (using the same company's Loongson processor) which he chose because, like the X200, X60 and the T400s, it could run with free software at the BIOS level, stating "freedom is my priority. I've campaigned for freedom since 1983, and I am not going to surrender that freedom for the sake of a more convenient computer."[74] Stallman's Lemote was stolen from him in 2012 while he was in Argentina.[75] Before Trisquel, Stallman has used the gNewSense operating system.[76][77]

Copyright reduction
tallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the state of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is best summed up by the FSF Defective by Design campaign. In the talks, he makes proposals for a "reduced copyright" and suggests a 10-year limit on copyright. He suggests that, instead of restrictions on sharing, authors be supported using a tax, with revenues distributed among them based on cubic roots of their popularity to ensure that "fairly successful non-stars" receive a greater share than they do now (compare with private copying levy which is associated with proponents of strong copyright), or a convenient anonymous micropayment system for people to support authors directly. He indicates that no form of non-commercial sharing of copies should be considered a copyright violation.[78][79] He has advocated for civil disobedience in a comment on Ley Sinde.[79][80]

He has reportedly refued to autograph anything bearing a '¬©' symbol, in line with his views.[81]

tallman has helped and supported the International Music Score Library Project get back online, after it had been taken down on October 19, 2007, following a cease and desist letter from Universal Edition.[82]


tallman at Swatantra 2014, a conference organized by ICFOSS in Kerala, India
tallman mentions the dangers some e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He says that such e-books present a big step backward with respect to paper books by being less easy to use, copy, lend to others or sell, also mentioning that Amazon e-books cannot be bought anonymously. His short story "The Right to Read" provides a picture of a dystopian future if the right to share books is impeded. He objects to many of the terms within typical end-user license agreements that accompany e-books.[79][82][83] He discourages the use of several storage technologies such as DVD or Blu-ray video discs because the content of such media is encrypted. He considers manufacturers' use of encryption on non-secret data (to force the user to view certain promotional material) as a conspiracy.[84]

tallman recognized the Sony BMG copy protection rootkit scandal to be a criminal act by Sony and supports a general boycott of Sony for its legal actions against George Hotz.[85] Stallman has suggested that the United States government may encourage the use of software as a service because this would allow them to access users' data without needing a search warrant.[86][87][88][89] He denies being an anarchist despite his wariness of some legislation and the fact that he has "advocated strongly for user privacy and his own view of software freedom".[90]

Terminologies

tallman, in costume as St. IGNUcius, wearing a halo consisting of the platter of an old hard disk drive[40] (Monastir, Tunisia, 2012)
tallman places great importance on the words and labels people use to talk about the world, including the relationship between software and freedom. He asks people to say free software and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publisher). One of his criteria for giving an interview to a journalist is that the journalist agrees to use his terminology throughout the article.[91]

tallman argues that the term intellectual property is designed to confuse people, and is used to prevent intelligent discussion on the specifics of copyright, patent, trademark, and other areas of law by lumping together things that are more dissimilar than similar.[92] He also argues that by referring to these laws as property laws, the term biases the discussion when thinking about how to treat these issues, writing:

Thee laws originated separately, evolved differently, cover different activities, have different rules, and raise different public policy issues. Copyright law was designed to promote authorship and art, and covers the details of a work of authorship or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over these ideas‚Äìa price that may be worth paying in some fields and not in others. Trademark law was not intended to promote any business activity, but simply to enable buyers to know what they are buying.[93]

Open ource and Free software
His requets that people use certain terms, and his ongoing efforts to convince people of the importance of terminology, are a source of regular misunderstanding and friction with parts of the free software and open-source communities. After initially accepting the concept,[94] Stallman rejects a common alternative term, open-source software, because it does not call to mind what Stallman sees as the value of the software: freedom.[95] He wrote, "Free software is a political movement; open source is a development model."[96] Thus, he believes that the use of the term will not inform people of the freedom issues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which Stallman does accept are software libre and unfettered software, but free software is the term he asks people to use in English. For similar reasons, he argues for the term proprietary software or non-free software rather than closed-source software, when referring to software that is not free software.

Linux and GNU
Main article: GNU/Linux naming controvery
tallman asks that the term GNU/Linux, which he pronounces /…°nuÀê sl√¶ É Ààl…™n…ôks/ GNOO SLASH LIN-…ôks, be used to refer to the operating system created by combining the GNU system and the kernel Linux. Stallman refers to this operating system as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philosophy and its software is broken when people refer to the combination as merely Linux.[99] Starting around 2003, he began also using the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôks/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrase GNU/Linux as /…°nuÀê Ààl…™n…ôks/ GNOO LIN-…ôks, which would erroneously imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly said that he objects to modification of the name and that the rename "is their [the FSF] confusion not ours".[101]

urveillance resistance
tallman professes admiration for Julian Assange[102] and Edward Snowden.[103] He has spoken against government and corporate surveillance on many occasions.[104][105][106]

He refers to mobile phones as "portable urveillance and tracking devices",[107] refusing to own a cell phone due to the lack of phones running entirely on free software.[108] He also avoids using a key card to enter his office building[109] since key card systems track each location and time that someone enters the building using a card. He usually does not browse the web directly from his personal computer. Instead, he uses GNU Womb's grab-url-from-mail utility, an email-based proxy which downloads the webpage content and then emails it to the user.[110][111] In a 2016 interview, he said that he accesses all websites via Tor, except for Wikipedia (which generally disallows editing from Tor).[112][113]

Comments about Jeffrey Eptein scandal
In eptember 2019, it was learned that Jeffrey Epstein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito resigned. An internal MIT CSAIL listserv mailing list thread was started to protest the coverup of MIT's connections to Epstein.[114] In the thread, discussion had turned to deceased MIT professor Marvin Minsky, who was named by Virginia Giuffre as one of the people that Epstein had forced her to have sex with.[115] Giuffre, a minor at the time, had been caught in Epstein's underage sex trafficking ring.[114] In response to a comment saying that Minsky "is accused of assaulting one of Epstein's victims", Stallman objected to the inaccurate wording. Minsky was not accused of "assault", and from the victims' testimonies it was not clear whether Minsky had committed "assault", and Stallman argued that "the most plausible scenario is that she presented herself to him as entirely willing. Assuming she was being coerced by Epstein, he would have had every reason to conceal that from most of his associates".[116] When challenged by other members of the mailing list, he added "It is morally absurd to define 'rape' in a way that depends on minor details such as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

tallman remained critical of Epstein and his role, saying "We know that Giuffre was being coerced into sex‚Äìby Epstein. She was being harmed."[117] Stallman's comments along with a compilation of accusations against him[118] were published via Medium by Selam Gano, who called for him to be removed from MIT.[119][120] Vice published a copy of the email chain on September 13, 2019.[114][119] Stallman's writings from 2013 and earlier related to underage sex and child pornography laws resurfaced, increasing the controversy.[116][clarification needed] Tied to his comments regarding Minsky it led to several calling for Stallman's resignation.[119][114] During the backlash to Stallman's comments regarding the Epstein case, Stallman received criticism for previous writings advocating for the legalization of child pornography and pedophilia. In September 2006, Stallman had written, "I am skeptical of the claim that voluntarily [sic] pedophilia harms children. The arguments that it causes harm seem to be based on cases which aren't voluntary, which are then stretched by parents who are horrified by the idea that their little baby is maturing."[121] On September 14, 2019, Stallman acknowledged that since the time of his past writings, he had learned that there were problems with underage sex, writing on his blog: "Through personal conversations in recent years, I've learned to understand how sex with a child can harm per psychologically. This changed my mind about the matter: I think adults should not do that."[122][123][124][125]

On eptember 16, 2019, Stallman announced his resignation from both MIT and FSF, "due to pressure on MIT and me over a series of misunderstandings and mischaracterizations".[126] In a post on his website, Stallman asserted that his posts to the email lists were not to defend Epstein, stating "Nothing could be further from the truth. I've called him a 'serial rapist', and said he deserved to be imprisoned. But many people now believe I defended him‚Äîand other inaccurate claims‚Äîand feel a real hurt because of what they believe I said. I'm sorry for that hurt. I wish I could have prevented the misunderstanding."[116]

Return to FF
In March 2021, at LibrePlanet2021, tallman announced his return to the FSF board of directors.[127][128] Shortly thereafter, an open letter was published on GitHub asking for Stallman's removal, along with the entire FSF board of directors, with the support of prominent open-source organizations including GNOME and Mozilla. The letter includes a list of accusations against Stallman.[129][130][131] In response, an open letter asking for the FSF to retain Stallman was also published, arguing that Stallman's statements were mischaracterized, misunderstood and that they need to be interpreted in context.[132][133] The FSF board on April 12 made a statement re-affirming its decision to bring back Richard Stallman.[134] After that Stallman issued a statement explaining his poor social skills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FF[136] including Red Hat,[137] the Free Software Foundation Europe,[138] the Software Freedom Conservancy,[139] SUSE,[140][141] the OSI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to issue a statement after a community vote on the matter.[146] However, the FSF claims that had relatively little financial impact, as it has said direct financial support from corporations accounted for less than 3% of its revenue in the most recent fiscal year.[147]

Peronal life

tallman announcing cancer diagnosis, at GNU Project's 40th anniversary celebration.
tallman lives in Boston and moved there after living in Cambridge, Massachusetts for many years.[34] He speaks English, French, Spanish and some Indonesian.[34] He has said that he is "an atheist of Jewish ancestry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Asperger's, but has sometimes speculated whether he could have a "shadow"[149] version of it.[10][150] He says he is childfree.[151]

tallman has written a collection of filk music and parody songs.[152]

In eptember 2023, while giving his keynote presentation at the GNU 40th anniversary event, Stallman revealed he had been diagnosed with follicular lymphoma, a form of cancer, and said that his prognosis was good and he hopes to be around for years to come.[153][154][155] He later stated he was in remission and he was getting treatment.[156]

Richard Matthew tallman (/Ààt…îÀêlm…ôn/ TAWL-m…ôn; born March 16, 1953), alo known by his initials, rms,[1] is an American free oftware movement activit and programmer. He campaigns for oftware to be ditributed in uch a manner that its uers have the freedom to ue, tudy, ditribute, and modify that oftware. oftware which enures thee freedoms is termed free oftware. tallman launched the GNU Project, founded the Free oftware Foundation (FF) in October 1985,[2] developed the GNU Compiler Collection and GNU Emacs, and wrote all verions of the GNU General Public Licene.

tallman launched the GNU Project in eptember 1983 to write a Unix-like computer operating ystem compoed entirely of free oftware.[3] With that he alo launched the free oftware movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely ued GNU oftware including among others, the GNU Compiler Collection,[4] GNU Debugger,[5] and GNU Emacs text editor.[6]

tallman pioneered the concept of copyleft, which ues the principles of copyright law to preerve the right to ue, modify, and ditribute free oftware. He is the main author of free oftware licenes which decribe thoe terms, mot notably the GNU General Public Licene (GPL), the mot widely ued free oftware licene.[7]

In 1989, he co-founded the League for Programming Freedom. ince the mid-1990s, tallman has pent mot of his time advocating for free oftware, as well as campaigning againt oftware patents, digital rights management (which he refers to as digital retrictions management, calling the more common term mileading), and other legal and technical ystems which he ees as taking away uers' freedom; this includes oftware licene agreements, non-diclosure agreements, activation keys, dongles, copy retriction, proprietary formats, and binary executables without ource code.

In eptember 2019, tallman reigned as preident of the FF and left his viiting cientist role at MIT after making controverial comments about the Jeffrey Eptein ex trafficking candal.[8] tallman remained head of the GNU Project, and in 2021 returned to the FF board of directors and others.

Early life
tallman was born March 16, 1953[9] in New York City, to a family of Jewih heritage.[10] He had a troubleome relationhip with his parents and did not feel he had a proper home.[10] He was intereted in computers at a young age; when he was a pre-teen at a ummer camp, he read manuals for the IBM 7094.[11] From 1967 to 1969, tallman attended a Columbia Univerity aturday program for high chool tudents.[11] He was alo a volunteer laboratory asistant in the biology department at Rockefeller Univerity. Although he was intereted in mathematics and phyics, his upervising profesor at Rockefeller thought he howed promie as a biologit.[12]

His firt experience with actual computers was at the IBM New York cientific Center when he was in high chool. He was hired for the ummer in 1970 after his enior year of high chool, to write a numerical analyis program in Fortran.[11] He completed the tak after a couple of weeks ("I wore that I would never ue FORTRAN again becaue I depised it as a language compared with other language") and pent the ret of the ummer writing a text editor in APL[13] and a preprocesor for the PL/I programming language on the IBM ystem/360.[14]

Harvard Univerity and MIT
As a firt-year tudent at Harvard Univerity in fall 1970, tallman was known for his trong performance in Math 55.[15] He was happy, "For the firt time in my life, I felt I had found a home at Harvard."[11]

In 1971, near the end of his firt year at Harvard, he became a programmer at the MIT Artificial Intelligence Laboratory,[16] and became a regular in the hacker community, where he was uually known by his initials, RMS, which he ued in his computer accounts.[1][17] tallman received a bachelor's degree in phyics (magna cum laude) from Harvard in 1974.[18] He conidered taying on at Harvard, but intead decided to enroll as a graduate tudent at the Masachusetts Intitute of Technology (MIT). He purued a doctorate in phyics for one year, but left the program to focus on his programming at the MIT AI Laboratory.[11][14]

While working (tarting in 1975) as a reearch asistant at MIT under Gerry ussman,[14] tallman publihed a paper (with ussman) in 1977 on an AI truth maintenance ystem, called dependency-directed backtracking.[19] The paper was an early work on the problem of intelligent backtracking in contraint atisfaction problems. As of 2009,[needs update] the technique tallman and ussman introduced was till the mot general and powerful form of intelligent backtracking.[20] The technique of contraint recording, wherein partial reults of a earch are recorded for later reue, was alo introduced in this paper.[20]

As a hacker in MIT's AI laboratory, tallman worked on oftware projects like TECO and Emacs for the Incompatible Timeharing ystem (IT), as well as the Lip machine operating ystem (the CONS of 1974‚Äì1976 and the CADR of 1977‚Äì1979‚Äîthis latter unit was commercialized by ymbolics and Lip Machines, Inc. (LMI) tarting around 1980).[17] He became an ardent critic of retricted computer acces in the lab, which at that time was funded primarily by the Defene Advanced Reearch Projects Agency (DARPA). When MIT's Laboratory for Computer cience (LC) intalled a pasword control ystem in 1977, tallman found a way to decrypt the paswords and ent uers mesages containing their decoded pasword, with a uggestion to change it to the empty tring (that is, no pasword) intead, to re-enable anonymous acces to the ystems. Around 20 percent of the uers followed his advice at the time, although paswords ultimately prevailed. tallman boated of the uccess of his campaign for many years afterward.[21]

Events leading to GNU
In the late 1970s and early 1980s, the hacker culture which tallman thrived on began to fragment. To prevent oftware from being ued on their competitor' computers, mot manufacturers topped ditributing ource code and began uing copyright and retrictive oftware licenes to limit or prohibit copying and reditribution. uch proprietary oftware had exited before, and it became apparent that it would become the norm. This hift in the legal characteritics of oftware was a conequence triggered by the US Copyright Act of 1976.[22]

When Brian Reid in 1979 placed time bombs in the cribe markup language and word procesing ystem to retrict unlicened acces to the oftware, tallman proclaimed it "a crime againt humanity".[14] During an interview in 2008, he clarified that it is blocking the uer's freedom that he believes is a crime, not the isue of charging for oftware.[23] tallman's texinfo is a GPL replacement, looely baed on cribe;[24] the original verion was finihed in 1986.[25]

In 1980, tallman and ome other hackers at the AI Lab were refued acces to the ource code for the oftware of a newly intalled laer printer, the Xerox 9700.[citation needed] tallman had modified the oftware for the Lab's previous laer printer (the XGP, Xerographic Printer), o it electronically mesaged a uer when the peron's job was printed, and would mesage all logged-in uers waiting for print jobs if the printer was jammed. Not being able to add thee features to the new printer was a major inconvenience, as the printer was on a different floor from mot of the uers. This experience convinced tallman of people's need to be able to freely modify the oftware they ue.[26]

Richard Greenblatt, a fellow AI Lab hacker, founded Lip Machines, Inc. (LMI) to market Lip machines, which he and Tom Knight deigned at the lab. Greenblatt rejected outide invetment, believing that the proceeds from the contruction and ale of a few machines could be profitably reinveted in the growth of the company. In contrat, the other hackers felt that the venture capital-funded approach was better. As no agreement could be reached, hackers from the latter camp founded ymbolics, with the aid of Rus Noftker, an AI Lab adminitrator. ymbolics recruited mot of the remaining hackers including notable hacker Bill Goper, who then left the AI Lab. ymbolics alo forced Greenblatt to reign by citing MIT policies. While both companies delivered proprietary oftware, tallman believed that LMI, unlike ymbolics, had tried to avoid hurting the lab's community. For two years, from 1982 to the end of 1983, tallman worked by himelf to clone the output of the ymbolics programmers, with the aim of preventing them from gaining a monopoly on the lab's computers.[21]

tallman argues that oftware uers hould have the freedom to hare with their neighbors and be able to tudy and make changes to the oftware that they ue. He maintains that attempts by proprietary oftware vendors to prohibit thee acts are antiocial and unethical.[27] The phrae "oftware wants to be free" is often incorrectly attributed to him, and tallman argues that this is a mistatement of his philoophy.[28] He argues that freedom is vital for the ake of uers and ociety as a moral value, and not merely for pragmatic reaons uch as posibly developing technically uperior oftware.[29] Eric S. Raymond, one of the creators of the open-ource movement,[30] argues that moral arguments, rather than pragmatic ones, alienate potential allies and hurt the end goal of removing code ecrecy.[31]

In February 1984, tallman quit his job at MIT to work full-time on the GNU project, which he had announced in eptember 1983. ince then, he had remained affiliated with MIT as an unpaid[32] "viiting cientist" in the Computer cience and Artificial Intelligence Laboratory.[33] Until "around 1998", he maintained an office at the Intitute that doubled as his legal reidence.[34]

GNU project
Main article: GNU Project
tallman announced the plan for the GNU operating ystem in eptember 1983 on everal ARPANET mailing lits and UENET.[3][35] He tarted the project on his own and decribes: "As an operating ystem developer, I had the right kills for this job. o even though I could not take uccess for granted, I realized that I was elected to do the job. I choe to make the ystem compatible with Unix o that it would be portable, and o that Unix uers could eaily witch to it."[36]


tallman in 2003 at the opening ceremony of NIXAL (a GLUG) at Netaji ubhash Engineering College, Kolkata, India
In 1985, tallman publihed the GNU Manifeto, which outlined his motivation for creating a free operating ystem called GNU, which would be compatible with Unix.[17] The name GNU is a recurive acronym for "GNU's Not Unix".[17] oon after, he tarted a nonprofit corporation called the Free oftware Foundation to employ free oftware programmers and provide a legal infratructure for the free oftware movement. tallman was the nonalaried preident of the FF, which is a 501(c)(3) nonprofit organization founded in Masachusetts.[37]

tallman popularized the concept of copyleft, a legal mechanim to protect the modification and reditribution rights for free oftware. It was firt implemented in the GNU Emacs General Public Licene, and in 1989 the firt program-independent GNU General Public Licene (GPL) was releaed. By then, much of the GNU ystem had been completed.

tallman was reponsible for contributing many necesary tools, including a text editor (GNU Emac), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omision was a kernel. In 1990, members of the GNU project began uing Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POIX compliance.

In 1991, Linus Torvalds, a Finnih tudent, ued the GNU's development tools to produce the free monolithic Linux kernel. The exiting programs from the GNU project were readily ported to run on the reultant platform. Mot ources ue the name Linux to refer to the general-purpoe operating ystem thus formed, while tallman and the FF call it GNU/Linux. This has been a longtanding naming controvery in the free oftware community. tallman argues that not uing GNU in the name of the operating ystem unfairly diparages the value of the GNU project and harms the ustainability of the free oftware movement by breaking the link between the oftware and the free oftware philoophy of the GNU project.

tallman's influences on hacker culture include the name POIX[38] and the Emacs editor. On Unix ystems, GNU Emac's popularity rivaled that of another editor vi, pawning an editor war. tallman's take on this was to canonize himelf as t. IGNUcius of the Church of Emac[39][40] and acknowledge that "vi vi vi is the editor of the beat", while "uing a free verion of vi is not a in; it is a penance".[41]

In 1992, developers at Lucid Inc. doing their own work on Emacs clahed with tallman and ultimately forked the oftware into what would become XEmacs.[42] The technology journalit Andrew Leonard has characterized what he ees as tallman's uncompromiing tubbornness as common among elite computer programmer:

There's omething comforting about tallman's intranigence. Win or loe, tallman will never give up. He'll be the tubbornest mule on the farm until the day he dies. Call it fixity of purpoe, or jut plain cusedness, his ingle-minded commitment and brutal honety are refrehing in a world of pin-meisters and multimillion-dollar marketing campaigns.[43]

In 2018, tallman intituted "Kind Communication Guideline" for the GNU project to help its mailing lit dicussions remain contructive while avoiding explicitly promoting diverity.[44]

In October 2019, a public tatement igned by 33 maintainers of the GNU project aserted that tallman's behaviour had "undermined a core value of the GNU project: the empowerment of all computer uers" and called for "GNU maintainers to collectively decide about the organization of the project".[45] The tatement was publihed oon after tallman reigned as preident of the FF and left his "viiting cientist" role at MIT in eptember 2019.[46][47] In pite of that, tallman remained head of the GNU project.[48][49]

Activim
tallman has written many esays on oftware freedom, and has been an outpoken political campaigner for the free oftware movement ince the early 1990s.[17] The peeches he has regularly given are titled The GNU Project and the Free oftware Movement,[50] The Dangers of oftware Patents,[51] and Copyright and Community in the Age of Computer Networks.[52] In 2006 and 2007, during the eighteen month public conultation for the drafting of verion 3 of the GNU General Public Licene, he added a fourth topic explaining the propoed changes.[53]

tallman's taunch advocacy for free oftware inpired the creation of the Virtual Richard M. tallman (vrm), oftware that analyzes the packages currently intalled on a Debian GNU/Linux ystem, and reports thoe that are from the non-free tree.[54] tallman diagrees with parts of Debian's definition of free oftware.[55]

In 1999, tallman called for development of a free online encyclopedia through the means of inviting the public to contribute articles.[56] The reulting GNUPedia was eventually retired in favour of the emerging Wikipedia, which had imilar aims and was enjoying greater uccess.[57] tallman was on the Adviory Council of Latin American televiion tation teleUR from its launch[58] but reigned in February 2011, criticizing pro-Gaddafi propaganda during the Arab pring.[59]


tallman giving a peech on "Free oftware and Your Freedom" at the biennale du deign of aint-√âtienne (2008)
In Augut 2006, at his meetings with the government of the Indian tate of Kerala, he peruaded officials to dicard proprietary oftware, uch as Microoft's, at tate-run chools. This has reulted in a landmark deciion to witch all chool computers in 12,500 high chools from Windows to a free oftware operating ystem.[60]

After peronal meetings, tallman obtained poitive tatements about the free oftware movement from the then-preident of India, A. P. J. Abdul Kalam,[61] French 2007 preidential candidate √©gol√®ne Royal,[62] and the preident of Ecuador Rafael Correa.[63]

tallman has participated in protets about oftware patents,[64] digital rights management,[65][66] and proprietary oftware.

Proteting againt proprietary oftware in April 2006, tallman held a "Don't buy from ATI, enemy of your freedom" placard at an invited talk given by an ATI compiler architect in the building where tallman worked, reulting in the police being called.[67] AMD has ince acquired ATI and has taken teps to make their hardware documentation available for ue by the free oftware community.[68]


tallman uing his Lemote machine at Indian Intitute of Technology Madras, Chennai
tallman has characterized teve Jobs as having a "malign influence" on computing becaue of Job' leaderhip in guiding Apple to produce cloed platforms.[69][70] According to tallman, while Jobs was at NeXT, Jobs aked tallman if he could ditribute a modified GCC in two parts, one part under GPL and the other part, an Objective-C preprocesor under a proprietary licene. tallman initially thought this would be legal, but ince he alo thought it would be "very undeirable for free oftware", he aked a lawyer for advice. The reponse he got was that judges would conider uch chemes to be "ubterfuges" and would be very harh toward them, and a judge would ak whether it was "really" one program, rather than how the parts were labeled. Therefore, tallman ent a mesage back to Jobs which aid they believed Job' plan was not allowed by the GPL, which reulted in NeXT releaing the Objective-C front end under GPL.[71][non-primary ource needed]

For a period of time, tallman ued a notebook from the One Laptop per Child program. tallman's computer is a refurbihed ThinkPad X200 with Libreboot (a free BIOS replacement), and Triquel GNU/Linux.[72] Before the ThinkPad X200, tallman ued a Thinkpad T400s with Libreboot and Triquel GNU/Linux.[73] And before the T400s, tallman ued a ThinkPad X60, and even further back in time, a Lemote Yeeloong netbook (uing the ame company's Loongon procesor) which he choe becaue, like the X200, X60 and the T400s, it could run with free oftware at the BIOS level, tating "freedom is my priority. I've campaigned for freedom ince 1983, and I am not going to urrender that freedom for the ake of a more convenient computer."[74] tallman's Lemote was tolen from him in 2012 while he was in Argentina.[75] Before Triquel, tallman has ued the gNewense operating ystem.[76][77]

Copyright reduction
tallman has regularly given a talk entitled "Copyright vs. Community" where he reviews the tate of digital rights management (DRM) and names many of the products and corporations which he boycotts. His approach to DRM is bet ummed up by the FF Defective by Deign campaign. In the talks, he makes propoals for a "reduced copyright" and uggests a 10-year limit on copyright. He uggests that, intead of retrictions on haring, authors be upported uing a tax, with revenues ditributed among them baed on cubic roots of their popularity to enure that "fairly uccessful non-tars" receive a greater hare than they do now (compare with private copying levy which is asociated with proponents of trong copyright), or a convenient anonymous micropayment ystem for people to upport authors directly. He indicates that no form of non-commercial haring of copies hould be conidered a copyright violation.[78][79] He has advocated for civil diobedience in a comment on Ley inde.[79][80]

He has reportedly refued to autograph anything bearing a '¬©' ymbol, in line with his views.[81]

tallman has helped and upported the International Muic core Library Project get back online, after it had been taken down on October 19, 2007, following a ceae and deist letter from Univeral Edition.[82]


tallman at watantra 2014, a conference organized by ICFOS in Kerala, India
tallman mentions the dangers ome e-books bring compared to paper books, with the example of the Amazon Kindle e-reader that prevents the copying of e-books and allows Amazon to order automatic deletion of a book. He ays that uch e-books preent a big tep backward with repect to paper books by being les eay to ue, copy, lend to others or ell, alo mentioning that Amazon e-books cannot be bought anonymouly. His hort tory "The Right to Read" provides a picture of a dytopian future if the right to hare books is impeded. He objects to many of the terms within typical end-uer licene agreements that accompany e-books.[79][82][83] He dicourages the ue of everal torage technologies uch as DVD or Blu-ray video dics becaue the content of uch media is encrypted. He coniders manufacturer' ue of encryption on non-ecret data (to force the uer to view certain promotional material) as a conpiracy.[84]

tallman recognized the ony BMG copy protection rootkit candal to be a criminal act by ony and upports a general boycott of ony for its legal actions againt George Hotz.[85] tallman has uggested that the United tates government may encourage the ue of oftware as a ervice becaue this would allow them to acces uers' data without needing a earch warrant.[86][87][88][89] He denies being an anarchit depite his warines of ome legilation and the fact that he has "advocated trongly for uer privacy and his own view of oftware freedom".[90]

Terminologies

tallman, in cotume as t. IGNUcius, wearing a halo conisting of the platter of an old hard dik drive[40] (Monatir, Tuniia, 2012)
tallman places great importance on the words and labels people ue to talk about the world, including the relationhip between oftware and freedom. He aks people to ay free oftware and GNU/Linux, and to avoid the terms intellectual property and piracy (in relation to copying not approved by the publiher). One of his criteria for giving an interview to a journalit is that the journalit agrees to ue his terminology throughout the article.[91]

tallman argues that the term intellectual property is deigned to confue people, and is ued to prevent intelligent dicussion on the pecifics of copyright, patent, trademark, and other areas of law by lumping together things that are more disimilar than imilar.[92] He alo argues that by referring to thee laws as property laws, the term biaes the dicussion when thinking about how to treat thee isues, writing:

Thee laws originated eparately, evolved differently, cover different activities, have different rules, and raie different public policy isues. Copyright law was deigned to promote authorhip and art, and covers the details of a work of authorhip or art. Patent law was intended to encourage publication of ideas, at the price of finite monopolies over thee idea‚Äìa price that may be worth paying in ome fields and not in others. Trademark law was not intended to promote any buiness activity, but imply to enable buyers to know what they are buying.[93]

Open ource and Free oftware
His requets that people ue certain terms, and his ongoing efforts to convince people of the importance of terminology, are a ource of regular miunderstanding and friction with parts of the free oftware and open-ource communities. After initially accepting the concept,[94] tallman rejects a common alternative term, open-ource oftware, becaue it does not call to mind what tallman ees as the value of the oftware: freedom.[95] He wrote, "Free oftware is a political movement; open ource is a development model."[96] Thus, he believes that the ue of the term will not inform people of the freedom isues, and will not lead to people valuing and defending their freedom.[97] Two alternatives which tallman does accept are oftware libre and unfettered oftware, but free oftware is the term he aks people to ue in Englih. For imilar reaons, he argues for the term proprietary oftware or non-free oftware rather than cloed-source oftware, when referring to oftware that is not free oftware.

Linux and GNU
Main article: GNU/Linux naming controvery
tallman aks that the term GNU/Linux, which he pronounces /…°nuÀê l√¶ É Ààl…™n…ôk/ GNOO LASH LIN-…ôks, be ued to refer to the operating ystem created by combining the GNU ystem and the kernel Linux. tallman refers to this operating ystem as "a variant of GNU, and the GNU Project is its principal developer".[98] He claims that the connection between the GNU project's philoophy and its oftware is broken when people refer to the combination as merely Linux.[99] tarting around 2003, he began alo uing the term GNU+Linux, which he pronounces /…°nuÀê pl ås Ààl…™n…ôk/ GNOO PLUS LIN-…ôks, to prevent others from pronouncing the phrae GNU/Linux as /…°nuÀê Ààl…™n…ôk/ GNOO LIN-…ôks, which would erroneouly imply that the kernel Linux is maintained by the GNU project.[100] The creator of Linux, Linus Torvalds, has publicly aid that he objects to modification of the name and that the rename "is their [the FF] confuion not our".[101]

urveillance reistance
tallman profeses admiration for Julian Asange[102] and Edward nowden.[103] He has poken againt government and corporate urveillance on many occaions.[104][105][106]

He refers to mobile phones as "portable urveillance and tracking device",[107] refuing to own a cell phone due to the lack of phones running entirely on free oftware.[108] He alo avoids uing a key card to enter his office building[109] ince key card ystems track each location and time that omeone enters the building uing a card. He uually does not browe the web directly from his peronal computer. Intead, he ues GNU Womb's grab-url-from-mail utility, an email-baed proxy which downloads the webpage content and then emails it to the uer.[110][111] In a 2016 interview, he aid that he acceses all webites via Tor, except for Wikipedia (which generally diallows editing from Tor).[112][113]

Comments about Jeffrey Eptein candal
In eptember 2019, it was learned that Jeffrey Eptein had made donations to MIT, and in the wake of this, MIT Media Lab director Joi Ito reigned. An internal MIT CAIL litserv mailing lit thread was tarted to protet the coverup of MIT's connections to Eptein.[114] In the thread, dicussion had turned to deceaed MIT profesor Marvin Minky, who was named by Virginia Giuffre as one of the people that Eptein had forced her to have ex with.[115] Giuffre, a minor at the time, had been caught in Eptein's underage ex trafficking ring.[114] In reponse to a comment aying that Minky "is accued of asaulting one of Eptein's victim", tallman objected to the inaccurate wording. Minky was not accued of "asault", and from the victim' tetimonies it was not clear whether Minky had committed "asault", and tallman argued that "the mot plauible cenario is that he preented herelf to him as entirely willing. Asuming he was being coerced by Eptein, he would have had every reaon to conceal that from mot of his asociates".[116] When challenged by other members of the mailing lit, he added "It is morally aburd to define 'rape' in a way that depends on minor details uch as which country it was in or whether the victim was 18 years old or 17", holding that it was not relevant to the harm that was done to the victim.[114][116]

tallman remained critical of Eptein and his role, aying "We know that Giuffre was being coerced into ex‚Äìby Eptein. he was being harmed."[117] tallman's comments along with a compilation of accuations againt him[118] were publihed via Medium by elam Gano, who called for him to be removed from MIT.[119][120] Vice publihed a copy of the email chain on eptember 13, 2019.[114][119] tallman's writings from 2013 and earlier related to underage ex and child pornography laws reurfaced, increaing the controvery.[116][clarification needed] Tied to his comments regarding Minky it led to everal calling for tallman's reignation.[119][114] During the backlah to tallman's comments regarding the Eptein cae, tallman received criticim for previous writings advocating for the legalization of child pornography and pedophilia. In eptember 2006, tallman had written, "I am keptical of the claim that voluntarily [ic] pedophilia harms children. The arguments that it caues harm eem to be baed on caes which aren't voluntary, which are then tretched by parents who are horrified by the idea that their little baby is maturing."[121] On eptember 14, 2019, tallman acknowledged that ince the time of his pat writings, he had learned that there were problems with underage ex, writing on his blog: "Through peronal converations in recent years, I've learned to undertand how ex with a child can harm per pychologically. This changed my mind about the matter: I think adults hould not do that."[122][123][124][125]

On eptember 16, 2019, tallman announced his reignation from both MIT and FF, "due to presure on MIT and me over a eries of miunderstandings and micharacterizations".[126] In a pot on his webite, tallman aserted that his pots to the email lits were not to defend Eptein, tating "Nothing could be further from the truth. I've called him a 'erial rapit', and aid he deerved to be imprioned. But many people now believe I defended him‚Äîand other inaccurate claim‚Äîand feel a real hurt becaue of what they believe I aid. I'm orry for that hurt. I wih I could have prevented the miunderstanding."[116]

Return to FF
In March 2021, at LibrePlanet2021, tallman announced his return to the FF board of directors.[127][128] hortly thereafter, an open letter was publihed on GitHub aking for tallman's removal, along with the entire FF board of directors, with the upport of prominent open-ource organizations including GNOME and Mozilla. The letter includes a lit of accuations againt tallman.[129][130][131] In reponse, an open letter aking for the FF to retain tallman was alo publihed, arguing that tallman's tatements were micharacterized, miunderstood and that they need to be interpreted in context.[132][133] The FF board on April 12 made a tatement re-affirming its deciion to bring back Richard tallman.[134] After that tallman isued a tatement explaining his poor ocial kills and apologizing.[135]

Multiple organizations criticized, defunded, and/or cut ties with the FF[136] including Red Hat,[137] the Free oftware Foundation Europe,[138] the oftware Freedom Conervancy,[139] USE,[140][141] the OI,[142] the Document Foundation,[143] the EFF,[144] and the Tor Project.[145] Debian declined to isue a tatement after a community vote on the matter.[146] However, the FF claims that had relatively little financial impact, as it has aid direct financial upport from corporations accounted for les than 3% of its revenue in the mot recent fical year.[147]

Peronal life

tallman announcing cancer diagnois, at GNU Project's 40th anniverary celebration.
tallman lives in Boton and moved there after living in Cambridge, Masachusetts for many years.[34] He peaks Englih, French, panish and ome Indoneian.[34] He has aid that he is "an atheit of Jewih ancetry"[10] and often wears a button that reads "Impeach God".[15][148] He denies having Aperger's, but has ometimes peculated whether he could have a "hadow"[149] verion of it.[10][150] He ays he is childfree.[151]

tallman has written a collection of filk muic and parody ongs.[152]

In eptember 2023, while giving his keynote preentation at the GNU 40th anniverary event, tallman revealed he had been diagnoed with follicular lymphoma, a form of cancer, and aid that his prognois was good and he hopes to be around for years to come.[153][154][155] He later tated he was in remision and he was getting treatment.[156]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex3 [K[K4 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex4 
[?2004lLinux ######## äks/ ################) is a ######## of open ######## ########ike ########ing ########s based on the Linux ########,[17] an ########ing ######## ######## first ########ed on ########ber 17, 1991, by Linus ########ds.################ Linux is ########lly ########ed as a Linux ################ ########o), which ########es the ######## and ########ting ######## ########re and ################st of which are ########ed by third ########s‚Äîto ######## a ########te ########ing ########, ########ed as a clone of Unix and ########ed under the ########ft GPL ########e.[21]

########nds of Linux ################s exist, many based ########ly or ########ctly on other ########################[23] ########r Linux ################################] ########e ########, ######## Linux, Linux Mint, Arch Linux, and ########, while ########cial ################s ########e Red Hat ########rise Linux, SUSE Linux ########rise, and ########OS. Linux ################s are ########ntly used in ######## ########rms.########8] Many Linux ################s use the word ########" in their name, but the Free ########re ########tion uses and ########ends the name ########inux" to ########ize the use and ########ance of GNU ########re in many ################s, ########g some ########versy.########0] Other than the Linux ########, key ########ents that make up a ################ may ########e a ########y ######## ########wing ########), a ########e ########r, a ########ader and a Unix shell.

Linux is one of the most ########ent ########es of free and ########ource ########re ################n. While ########ally ########ped for x86 based ########al ########ers, it has since been ######## to more ########rms than any other ########ing ########,[31] and is used on a wide ########y of ########s ########ing PCs, ################, ########ames and ########ed ########s. Linux is the ########inant ########ing ######## for ########s and is also used on all of the ########s 500 ########t ################rs.[g] When ########ed with ########d, which is ########based and ########ed for ########hones, they have the ########t ########led base of all ################ose ########ing ########s.

########ew
The Linux ######## was ########ed by Linus ########ds, ########ing the lack of a ########g ######## for GNU, a ################ble ########ing ######## made ########ly of free ########re that had been ########oing ########pment since 1983 by ########d ########an. A ########g Unix ######## ######## Minix was later ########ed but its ########e was not ########ly free at the ########2] and it was made for an ########ive ########e. The first ########ly free Unix for ########al ########ers, ########, did not ######## until 1992, by which time ########ds had ########y built and ########ly ########ed the first ########n of the Linux ######## on the ########et.[33] Like GNU and ########, Linux did not have any Unix code, being a fresh ################tion, and ########ore ########d the then legal ########.[34] Linux ################s ######## ########r in the 1990s and ########ively made Unix ################ ########ible to home users on ########al ########ers ########s ########usly it had been ########ed to ################d ################.[35]

########p Linux ################s ########e a ########ing ######## such as X11 or ########d and a ########p ########nment such as GNOME, KDE ######## or Xfce. ################s ########ed for ########s may not have a ########cal user ########ace at all or ########e a ########on stack such as LAMP.

The ######## code of Linux may be used, ########ed, and ########buted ################ or ################ally by ######## under the terms of its ########tive ########es, such as the GNU ########l ######## ########e (GPL). The ########e means ########ng novel ################s is ########ted by ########[36] and is ######## than it would be for an ########ing ######## such as MacOS or ########oft ########s.################ The Linux ########, for ########e, is ########ed under the GPLv2, with an ########ion for ######## calls that ######## code that calls the ######## via ######## calls not to be ########ed under the GPL.################

########e of the ########nce of ########based ########d on ########hones, Linux, ########ing ########d, has the ########t ########led base of all ################ose ########ing ########s as of May 2022.################ Linux is, as of March 2024, used by ######## 4 ########t of ########p ########ers.[45] The ########book, which runs the Linux ################ ########OS,########7] ########tes the US K‚Äì12 ########ion ######## and ########ents ######## 20 ########t of ########00 ########ok sales in the US.[48] Linux is the ########g ########ing ######## on ########s (over 96.4% of the top one ########n web ########s' ########ing ########s are ########,[49] leads other big iron ########s such as ########ame ########ers,################on ########][50] and is used on all of the ########s 500 ########t ################rs[h] (as of ########er 2017, ######## ########lly ########ced all ################.########2]

Linux also runs on ########ed ########s, i.e., ########s whose ########ing ######## is ########lly built into the ########re and is ######## ########ed to the ########. This ########es ########s, ########tion ########ls, smart home ########s, video game ########es, ########sions ########ng and LG smart TVs),################ ########biles ########, Audi, ################z, ########i, and ########),[56] and ########raft ########n 9 ########, ######## crew ########e, and the ########ity Mars ########pter).########8]

########y
Main ########e: ########y of Linux
########sors

Linus ########ds, ########pal ######## of the Linux ########
The Unix ########ing ######## was ########ved of and ########ented in 1969, at ######## Bell Labs in the ######## ########, by Ken ########on, ######## ########e, ########s ########y, and Joe ########a.[59] First ########ed in 1971, Unix was ########n ########ly in ########ly ########ge, as was ######## ########ce at the time. In 1973, in a key ########ring ########ch, it was ########ten in the C ########mming ########ge by ######## ########e ########t for some ########re and I/O ########es). The ################ of a ########evel ########ge ################on of Unix made its ########g to ########ent ########er ########rms ########.[60]

As a 1956 ########ust case ########e AT&T from ########ng the ########er ########ss,[61] AT&T ########ed the ########ing ########'s ######## code to ######## who asked. As a ########, Unix use grew ########y and it ######## ######## ########d by ########ic ################ and ########sses. In 1984, AT&T ########ed ######## of its ########al ########ing ########ies, and was ########ed from its ########tion not to enter the ########er ########ss; freed of that ########tion, Bell Labs began ########g Unix as a ########etary ########t, where users were not ########y ########d to ######## it.########3]

Onyx ########s began ########g early ########################d Unix ################ in 1980. Later, Sun ################, ########d as a ########ff of a ########t ########t at ########rd ########sity, also began ########g ########ased ########p ################ in 1982. While Sun ################ did not use ########ity PC ########re, for which Linux was later ########ally ########ped, it ########ented the first ########sful ########cial ########t at ################ a ########ily ########-user ################r that ran a Unix ########ing ########.########5]

With Unix ################ ########d in" as a ########etary ########t, the GNU ########t, ########d in 1983 by ########d ########an, had the goal of ########ng a ########ete ################ble ########re ########" ########ed ########ly of free ########re. Work began in 1984.[66] Later, in 1985, ########an ########d the Free ########re ########tion and wrote the GNU ########l ######## ########e (GNU GPL) in 1989. By the early 1990s, many of the ########ms ########ed in an ########ing ######## (such as ########ies, ########ers, text ########s, a ################ shell, and a ########ing ########) were ########ted, ########gh ########vel ########ts such as ######## ########s, ########s, and the ########, ######## GNU Hurd, were ########d and ########lete.[67]

Minix was ########d by ######## S. ########aum, a ########er ########e ########sor, and ########ed in 1987 as a ########l ########ike ########ing ######## ########ed at ########ts and ######## who ######## to learn ########ing ######## ########ples. ########gh the ########te ######## code of Minix was ######## ########ble, the ########ing terms ########ted it from being free ########re until the ########ing ########d in April 2000.[68]

########on
While ########ing the ########sity of ########ki in the fall of 1990, ########ds ########ed in a Unix ########.[69] The ######## used a ########AX ################ ########g ########, and one of the ########ed texts was ########ing ########s: ######## and ################on by ######## S. ########aum. This ########ok ########ed a copy of ########aum's Minix ########ing ########. It was with this ######## that ########ds first ######## ########d to Unix. In 1991, he ######## ########s about ########ing ########s.[70] ########ated by the ########ing of Minix, which at the time ########d it to ########ional use only,[68] he began to work on his ########ing ######## ########, which ########ally ######## the Linux ########.

On July 3, 1991, to ########ent Unix ######## calls, Linus ########ds ########ted ################ly to ######## a ########l copy of the POSIX ########rds ################n with a ########t to the comp.os.minix ########oup.[71] After not ########g the POSIX ################n, ########ds ########lly ########ed to ########ining ######## calls from SunOS ################n owned by the ########sity for use in ########ing its Sun ################ ########. He also ########d some ######## calls from ########aum's Minix text.

########ds began the ########pment of the Linux ######## on Minix and ################ ########n for Minix were also used on Linux. Later, Linux ########d and ########r Linux ######## ########pment took place on Linux ########s.[72] GNU ################ also ########ed all Minix ########ents, ########e it was ################ to use the ######## ########ble code from the GNU ########t with the ########ing ########ing ########; code ########ed under the GNU GPL can be ######## in other ########er ########ms as long as they also are ########ed under the same or a ########ible ########e. ########ds ########ted a ######## from his ########al ########e, which ########ited ########cial ################on, to the GNU GPL.[73] ########pers ######## to ########ate GNU ########ents with the Linux ########, ########ng a fully ########onal and free ########ing ########.[74]

########gh not ########ed until 1992, due to legal ################s, the ########pment of ########, from which ########, ########D and ########D ########ded, ########ed that of Linux. Linus ########ds has ######## that if the GNU ######## or ######## had been ########ble in 1991, he ########ly would not have ########d Linux.########2]

########

5.########h ######## disks ########g a very early ########n of Linux
Linus ########ds had ######## to call his ########ion ########", a ########nteau of ########, ########", and "x" (as an ########on to Unix). ######## the start of his work on the ########, some of the ########t's ########les ########ed the name ########" for about half a year. ########ds ########ered the name ########" but ########sed it as too ########tical.[76]

To ########tate ########pment, the files were ########ed to the FTP ######## of FUNET in ########ber 1991. Ari ########, ########ds' ########er at the ########ki ########sity of ########logy (HUT) who was one of the ########eer ################rs for the FTP ######## at the time, did not think that ########" was a good name, so he named the ########t ########" on the ######## ########t ########ting ########ds.[76] Later, ########r, ########ds ########ted to ########".

########ing to a ########oup post by ########ds,[16] the word ########" ######## be ########nced ######## äks/ ‚ìò ########ks) with a short 'i' as in ########' and 'u' as in 'put'. To ########r ########trate how the word ########" ######## be ########nced, he ########ed an audio guide with the ######## ######## code.[77] ########r, in this ########ing, he ########nces Linux as ########ks/ ########uuks) with a short but close front ########ded vowel, ########d of a ########lose ########ront ########ded vowel as in his ########oup post.

########cial and ########r ########
Main ########e: Linux ########on




From ########ft ########ise: Nexus 5X ########g ########d, ########books, ######## ########rm, ########ght ################t ########
The ########on of Linux in ########tion ################, ######## than being used only by ########sts, ########d to take off first in the ########90s in the ################ng ########ity, where ################s such as NASA ########d ########ing their ################ ########ive ########es with ########rs of ########nsive ########ity ########ers ########g Linux. ########cial use began when Dell and IBM, ########ed by ################ard, ########d ########ng Linux ########t to ######## ########oft's ########ly in the ########p ########ing ######## ########.[78]

Today, Linux ########s are used ########hout ########ing, from ########ed ########s to ########lly all ################rs,########9] and have ########d a place in ######## ################s such as the ########r LAMP ########ation stack. The use of Linux ################s in home and ########rise ########ps has been ########g.################################[86]

Linux ################s have also ######## ########r in the ########k ########, with many ########s ########ng with ########ized Linux ################s ########led, and ######## ########ing their own ########OS ########ed for ########ks.

########s ########st ########s in the ########er ######## is ########s the ######## ######## ########, with ########d being the ########nt ########ing ######## on ########hones and very ########r on ########s and, more ########ly, on ########les, and ########es. Linux ######## is also on the rise with Valve ########g its ########t for Linux and ########g out ########S, its own ################ted Linux ################, which was later ########ented in their Steam Deck ########rm. Linux ################s have also ######## ########rity with ########s local and ########al ########ments, such as the ########l ########ment of ########.[87]

########pment
Linus ########ds is the lead ########iner for the Linux ######## and ######## its ########pment, while Greg ################n is the lead ########iner for the ######## ########.[88] Zo√´ ########n is the ########ive ########or of the Free ########re ########tion,[89] which in turn ########ts the GNU ########ents.[90] ########y, ########duals and ################ ########p ########party ########U ########ents. These ########party ########ents ########se a vast body of work and may ########e both ######## ########s and user ################ and ########ies.

Linux ########s and ########ities ########e and ########bute the ########, GNU ########ents, and ########U ########ents, with ########onal ########e ########ment ########re in the form of Linux ################s.

########
See also: Linux ######## ¬ß ################ and ########es
Many ########pers of ########ource ########re agree that the Linux ######## was not ########ed but ######## ########d ########h ########l ########ion. ########ds ########ers that ########gh the ######## of Unix ######## as a ########lding, ######## grew with a lot of ########ons ‚Äì and ########e the ########ons were less than ########, they were ######## and more ########ed than ################les in DNA."[91] Eric S. ########d ########ers ########s ################y ########s to be ########, not ########cal: ######## Linux, ########x ########re was ########ed ########lly by small ########, but ######## ########d in a ########tely ########ent way. From ######## the ########ing, it was ######## ########ly ######## on by huge ########s of ########eers ################ only ########h the ########et. ########y was ########ined not by rigid ########rds or ########acy but by the ########y ######## ########gy of ########ing every week and ########g ########ck from ########ds of users ######## days, ########ng a sort of rapid ########ian ########ion on the ########ons ########uced by ########pers."[92] Bryan ########ll, an ########er of a ########ing OS, ######## that ######## ######## ########ed, it ########d", but ########ers this to be a ########tion, ########ing that some ########es, ########ally those ########d to ########ty,[93] ######## be ########d into, "this is not a ########ical ######## at the end of the day, it's a ########re ########."[94]

A ########based ######## is a ########r ########ike ########ing ########, ########ng much of its basic ######## from ########ples ########ished in Unix ######## the 1970s and 1980s. Such a ######## uses a ########thic ########, the Linux ########, which ########s ########s ########l, ########king, ######## to the ########erals, and file ########s. ######## ########s are ######## ########ated ########ly with the ######## or added as ########s that are ######## while the ######## is ########g.[95]

The GNU ########nd is a key part of most ########s based on the Linux ########, with ########d being a ########e ########ion. The GNU C ########y, an ################on of the C ########rd ########y, works as a ########r for the ######## calls of the Linux ######## ########ary to the ################pace ########ace, the ########ain is a broad ########tion of ########mming tools vital to Linux ########pment ########ding the ########ers used to build the Linux ######## ########), and the ########ils ########ent many basic Unix tools. The GNU ########t also ########ps Bash, a ########r CLI shell. The ########cal user ########ace (or GUI) used by most Linux ########s is built on top of an ################on of the X ######## ########.[96] More ########ly, some of the Linux ########ity has ######## to move to using ########d as the ########y ######## ########ol, ########ing X11.########8]

Many other ########ource ########re ########ts ########bute to Linux ########s.

########s ######## ######## Linux, also ########g ########tion ########n the ########nd and ######## space
User ########ser ################	bash, ########ffice, GIMP, ########r, 0 A.D., ########a ########x, ...
######## ################nit ########:
########, runit, ########d...########m ########s:
########d, smbd, sshd, udevd...########wing ########:
X11, ########d, ################er ########################:
Mesa, AMD ########st, ...######## ########ies:
GTK, Qt, EFL, SDL, SFML, FLTK, ########p, ...
C ########rd ################n, execv, ########, ########, ########ime, ################te... (up to 2000 ################
glibc aims to be fast, musl aims to be ########eight, ######## ########s ########ed ########s, ######## was ########n for ########d, etc. All aim to be ########################le.
######## ########inux ########	stat, ########, dup, read, open, ioctl, write, mmap, close, exit, etc. ######## 380 ######## ########
The Linux ######## ######## Call ########ace (SCI), aims to be ################################
########s ########ling ################C ################mory ########ment ################rtual files ########################ng ########tem
Other ########ents: ALSA, DRI, evdev, klibc, LVM, ######## ########, Linux ########k ########ler, ########ter
Linux ########ty ########s: ########x, ########, ########or, Smack
########re (CPU, main ########, data ########e ########s, etc.)
########led ########ents of a Linux ######## ########e the ########################]

A ########ader, for ########e GNU GRUB, LILO, ########UX or ################. This is a ########m that loads the Linux ######## into the ########er's main ########, by being ########ed by the ########er when it is ######## on and after the ########re ################on is ########med.
An init ########m, such as the ########ional ########it and the newer ########d, ######## and ########t. This is the first ########s ########ed by the Linux ########, and is at the root of the ########s tree. It ######## ########ses such as ######## ########es and login ########s ########er ########cal or in ########al mode).
########re ########ies, which ########n code that can be used by ########g ########ses. On Linux ########s using ########rmat ########able files, the ########c ######## that ########s the use of ########c ########ies is known as ########ux.so. If the ######## is set up for the user to ########e ########re ########lves, ######## files will also be ########ed to ########be the ########mming ########ace of ########led ########ies. ########s the most ########ly used ########re ########y on Linux ########s, the GNU C ########y ########), there are ########us other ########ies, such as SDL and Mesa.
The C ########rd ########y is the ########y ########ary to run ########ms ########n in C on a ########er ########, with the GNU C ########y being the ########rd. It ########es an ################on of the POSIX API, as well as ########ions to that API. For ########ed ########s, ################ such as musl, ######## (a glibc fork once used by ########) and ######## ######## was ########ed for ########x) have been ########ped, ########gh the last two are no ######## ########ined. ########d uses its own C ########y, ########. ########r, musl can ################ be used as a ########ement for glibc on ########p and ######## ########s, as seen on ########n Linux ################s like Void Linux.
Basic Unix ########ds, with GNU ########ils being the ########rd ################on. ################ exist for ########ed ########s, such as the ########ft ########x, and the ################ ########.
######## ########ts are the ########ies used to build ########cal user ########aces ######## for ########re ################. ########us ######## ########ts are ########ble, ########ing GTK and ########r ########ped by the GNOME ########t, Qt ########ped by the Qt ########t and led by The Qt ########y, and ################t ########tion ########ies (EFL) ########ped ########ily by the ################t team.
A ########e ########ment ########, such as dpkg and RPM. ################y ########es can be ########ed from ######## or ######## ########ls.
User ########ace ########ms such as ########d ######## or ########ing ################.
User ########ace
The user ########ace, also known as the shell, is ######## a ################ ########ace (CLI), a ########cal user ########ace (GUI), or ########ls ########ed to the ########ated ########re, which is ######## for ########ed ########s. For ########p ########s, the ########t user ########ace is ########y ########cal, ########gh the CLI is ########ly ########ble ########h ########al ########or ########s or on a ########te ########l ########e.


GNOME Shell
CLI ######## are ########ased user ########aces, which use text for both input and ########. The ########nt shell used in Linux is the ################ Shell ########, ########ally ########ped for the GNU ########t; other ######## such as Zsh are also used.########102] Most ########vel Linux ########ents, ########ing ########s parts of the ########nd, use the CLI ########ively. The CLI is ################ ######## for ########tion of ########tive or ########d tasks and ########es very ######## ################s ################n.


######## ########g the Xfce ########p ########nment

######## Linux ########g the ######## ########p ########nment
On ########p ########s, the most ########r user ########aces are the GUI ########, ########ed ########er with ########ive ########p ################, such as KDE ########, GNOME, MATE, ########on, LXDE, ########on, and Xfce, ######## a ########y of ########onal user ########aces exist. Most ########r user ########aces are based on the X ######## ########, often ######## ######## "X" or "X11". It ########es ########k ################ and ########s a ########cal ########ation ########g on one ######## to be ########yed on ########r where a user may ########ct with the ################ ########r, ########n ########ions of the X ######## ######## are not ########e of ########g over the ########k.[103] ########l X ########y ########s exist, with the ########nce ################on, X.Org ########, being the most ########r.


I3 ######## ######## ########r
########l types of ######## ########rs exist for X11, ########ing ########, ########c, ########ng, and ########iting. ######## ########rs ########e means to ########l the ########ent and ########ance of ########dual ########ation ########s, and ########ct with the X ######## ########. ########r X ######## ########rs such as dwm, ########son, or i3wm ########e a ########list ################y, while more ########ate ######## ########rs such as FVWM, ################t, or ######## Maker ########e more ########es such as a ########in ########r and ########, but are still ########eight when ########ed to ########p ################. ########p ################ ########e ######## ########rs as part of their ########rd ################s, such as ######## ########), KWin (KDE), or Xfwm ########, ########gh users may ######## to use a ########ent ######## ########r if ########red.

########d is a ########y ######## ########ol ########ed as a ########ement for the X11 ########ol; as of 2022, it has ########ed ########vely wide ########on.[104] ######## X11, ########d does not need an ########al ######## ########r and ########iting ########r. ########ore, a ########d ########itor takes the role of the ########y ########, ######## ########r, and ########iting ########r. ######## is the ########nce ################on of ########d, while ########s ######## and KDE's KWin are being ######## to ########d as ########lone ########y ########s. ################t has ########y been ################ ######## since ########n 19.[105] ################, many ######## ########rs have been made for ########d, such as Sway or ########nd, as well as other ########cal ########ies such as ######## or Rofi.

Video input ################re
Main ########e: ########Linux
Linux ########tly has two ######## ################pace APIs for ########ng video input ########s: V4L2 API for video ########s and radio, and DVB API for ########l TV ########ion.[106]

Due to the ########xity and ########ity of ########ent ########s, and due to the large ######## of ########s and ########rds ########d by those APIs, this ################re needs to ######## to ######## fit other ########s. Also, a good ########ace ######## ########y is the key to the ########s of ######## ########ace ################ to be able to work with all ########s ########ted by those ########s.########108]

########pment
Main ########es: Linux ################ and Free ########re

########fied ########y of ########ike ########ing ########s. Linux ######## ########r ################ and ########ts (as part of the POSIX ########rd) but does not share ########ee ######## code with the ########al Unix or Minix.
The ########y ########ence ########n Linux and many other ########r ################ ########ing ########s is that the Linux ######## and other ########ents are free and ########ource ########re. Linux is not the only such ########ing ########, ########gh it is by far the most ######## used.[109] Some free and ########ource ########re ########es are based on the ########ple of ########ft, a kind of ################ any work ########d from a ########ft piece of ########re must also be ########ft ########. The most ######## free ########re ########e, the GNU ########l ######## ########e (GPL), is a form of ########ft and is used for the Linux ######## and many of the ########ents from the GNU ########t.[110]

########based ################s are ########ed by ########pers for ################lity with other ########ing ########s and ########ished ########ing ########rds. Linux ########s ######## to POSIX,[111] ######## UNIX ################n (SUS),[112] Linux ########rd Base (LSB), ISO, and ANSI ########rds where ########le, ########gh to date only one Linux ################ has been POSIX.1 ########ied, ########FT.########114] The Open Group has ######## and ########ied at least two Linux ################s as ########ying for the Unix ########ark, ########S and ######## K-UX.[115]

Free ########re ########ts, ########gh ########ped ########h ################n, are often ########ed ################y of each other. The fact that the ########re ########es ########itly ######## ################on, ########r, ########es a basis for ################ ########ts that ########t the ########re ########ed by ########alone ########ts and make it ########ble all at once in the form of a Linux ################.

Many Linux ################s ######## a ######## ########tion of ######## ########re and ########ation ########re ########es ########ble for ########ad and ################ ########h a ########k ########tion. This ######## users to adapt the ########ing ######## to their ########ic needs. ################s are ########ined by ########duals, ########knit teams, ########eer ################s, and ########cial ########es. A ################ is ########sible for the ########t ################n of the ########led Linux ########, ########l ######## ########ty, and more ########lly ########ation of the ########ent ########re ########es into a ########nt whole. ################s ########lly use a ########e ########r such as apt, yum, ########, ######## or ########e to ########l, ########, and ######## all of a ########'s ########re from one ########l ########on.[116]

########ity
See also: Free ########re ########nt and Linux user group
A ################ is ########y ######## by its ########per and user ########ities. Some ########s ########p and fund their ################s on a ########eer basis, ######## being a ########nown ########e. ######## ########in a ########ity ########n of their ########cial ################s, as Red Hat does with ########, and SUSE does with ########SE.########118]

In many ######## and ########s, local ################ known as Linux User ######## ######## seek to ########e their ########red ################ and by ########ion free ########re. They hold ########gs and ########e free ################ns, ########ng, ########cal ########t, and ########ing ######## ################ to new users. Many ########et ########ities also ########e ########t to Linux users and ########pers. Most ################s and free ########re / ########ource ########ts have IRC ########oms or ########oups. ######## ######## are ########r means of ########t, with ########e ########es being Unix & Linux Stack ########ge,########120] ################ns.org and the ########s ########################fic ########t and ########ity ########, such as ones for ########, ########, Arch Linux, ########, etc. Linux ################s host ########g ######## ########ly there will be a ########ic topic such as usage or ########pment for a given list.

There are ########l ########logy ########es with a Linux focus. Print ########nes on Linux often ######## cover disks that carry ########re or even ########te Linux ################s.########122]

########gh Linux ################s are ########lly ########ble ########t ########, ########l large ################ sell, ########t, and ########bute to the ########pment of the ########ents of the ######## and free ########re. An ########is of the Linux ######## in 2017 ######## that well over 85% of the code was ########ped by ########mmers who are being paid for their work, ########g about 8.2% to ######## ########pers and 4.1% ################.[123] Some of the major ################ that ########e ################s ########e Intel, ########g, ########, AMD, ########, and ########ok.[123] ########l ################, ########y Red Hat, ########cal, and SUSE have built a ########icant ########ss ######## Linux ################s.

The free ########re ########es, on which the ########s ########re ########es of a ################ built on the Linux ######## are based, ########itly ########odate and ########age ######################## the ################ ########n a Linux ################ as a whole and ########dual ########s may be seen as ########tic. One ######## ########ss model of ########cial ########ers is ########ng for ########t, ########ally for ########ss users. A ######## of ########ies also offer a ########lized ########ss ########n of their ################, which adds ########etary ########t ########es and tools to ########ster ######## ########s of ################s or to ########fy ################ve tasks.[124]

########r ########ss model is to give away the ########re to sell ########re. This used to be the norm in the ########er ########ry, with ########ing ########s such as CP/M, Apple DOS, and ########ns of the ########c Mac OS ######## 7.6 ######## ########le (but not ########able). As ########er ########re ################ ########hout the 1980s, it ######## more ########ult for ########re ################s to ######## from this ########, as the OS would run on any ################'s ########er that ######## the same ################.########126]

########mming on Linux
Most ########mming ########ges ########t Linux ######## ########ly or ########h ########party ########ity based ports.[127] The ########al ########pment tools used for ########ng both Linux ################ and ########ing ######## ########ms are found ######## the GNU ########ain, which ########es the GNU ########er ########tion (GCC) and the GNU Build ########. ########t ########, GCC ########es ########ers for Ada, C, C++, Go and ########n. Many ########mming ########ges have a ################rm ########nce ################on that ########ts Linux, for ########e PHP, Perl, Ruby, ########, Java, Go, Rust and ########l. First ########ed in 2003, the LLVM ########t ########es an ########ative ################rm ########ource ########er for many ########ges. ########etary ########ers for Linux ########e the Intel C++ ########er, Sun ########, and IBM XL C/C++ ########er. BASIC is ########ble in ########ural form from QB64, ########sic, ########c, ########c, ########GL, ########, ########c, ########ic, and ########256, as well as ######## ########ed ########h ########, ########SIC, B4X, Basic for Qt, ########x ######## Basic, NS Basic, ########eX, ########nk Basic, ######## and Xojo. ######## is ########ented ########h GNU ########, Free ########, and ########l ########, as well as ########cally via ########s, ########ABC.NET, or ######## using ########nkey ########ously ########h ########d ########.########129]

A ######## ########e of ########ike ########s, Linux ########es ########ional ################pose ########mming ########ges ########ed at ########ing, text ########sing and ######## ################n and ########ment in ########l. Linux ################s ########t shell ########s, awk, sed and make. Many ########ms also have an ########ed ########mming ########ge to ########t ########uring or ########mming ########lves. For ########e, ########r ########sions are ########ted in ########ms like grep and ########, the ########ional Unix ########e ########er agent ########il ########ns its own ######## ########te ########ing ########, and the ########ed text ######## GNU Emacs is built ######## a ########l ########e Lisp ########reter.################32]

Most ################s also ########e ########t for PHP, Perl, Ruby, ######## and other ########c ########ges. While not as ########, Linux also ########ts C# and other CLI ########ges (via Mono), Vala, and ########. Guile ######## acts as an ########ion ########ge ########ing the GNU ######## ########ies, ########g to make the ################ly small, ########, ########ed C ########ms of Unix ######## ########y and ########cally ########ible via an ########t, ########onal ########evel ########ing ########; many GNU ########ms can be ########ed with ########al Guile ########gs to this end. A ######## of Java ########l ########es and ########pment kits run on Linux, ########ing the ########al Sun ################ JVM ########ot), and IBM's J2SE RE, as well as many ########ource ########ts like Kaffe and Jikes RVM; ########, Scala, ######## and other JVM ########ges are also ########ble.

GNOME and KDE are ########r ########p ################ and ########e a ########ork for ########ping ################. These ########ts are based on the GTK and Qt ######## ########ts, ################, which can also be used ################y of the ######## ########ork. Both ########t a wide ########y of ########ges. There are a ######## of ########ated ########pment ################ ########ble ########ing ########, ################, ########te, ########e, Geany, ########State ########, ########op, ########s, ########velop, ########ns, and Qt ########r, while the ################shed ########s Vim, nano and Emacs ######## ########r.[133]

########re ########t

Linux is ################ found on ########s types of ########re.
See also: List of ################ted ########er ################s
The Linux ######## is a ######## ######## ########ing ######## ########, ########ble for ########s ########g from ######## ######## to ################rs; it runs on a ######## ########e range of ########er ################s, ########ing ########sed ########d ########hones and the IBM Z ########ames. ########lized ################s and ######## forks exist for less ########ream ################s; for ########e, the ELKS ######## fork can run on Intel 8086 or Intel 80286 ######## ################ors,[134] while the ########x ######## fork may run on ########s ########t a ######## ########ment unit.[135] The ######## also runs on ################s that were only ever ########ed to use a ########etary ########################ed ########ing ########, such as ########osh ########################] (with ########C, Intel, and Apple ########n ########sors), PDAs, video game ########es, ########le music ########s, and ######## ########.

Linux has a ########tion for ########ting old ########re very well by ########ining ################ ########s for a long time.[138] There are ########l ########ry ################ and ########re ########ences ########d to ########ining and ########ing ########t for ########e ########re under Linux, such as ########mHEC. Over time, ########t for ########ent ########re has ########ed in Linux, ########ing in any ################f ########se ######## a "good ########" of being ########ible.[139]

In 2014, a new ########tive was ########ed to ################y ########t a ########se of all ######## ########re ################ns.[140]

Uses
Main ########e: Linux range of use
######## share and ########
Main ########e: Linux ########on
See also: Usage share of ########ing ########s
Many ################ ########s of ################urce ########re focus on ######## ########ing ######## share and ########ility, with ########us ########s ################ ########ing Linux.[141] The Linux ######## is ########g, and the Linux ########ing ######## ######## size is ########ed to see a ######## of 19.2% by 2027, ########ng $15.64 ########n, ########ed to $3.89 ########n in 2019.[142] ########ts ########t a ########nd ######## ######## Rate ######## of 13.7% ########n 2024 and 2032, ########ating in a ######## size of US$34.90 ########n by the ######## year.########ion ########] ########ts and ########ents ########ute the ########ve ########s of Linux to its ########ty, ########ility, low cost, and ########m from ######## ########n.########144]

########ps and ########s
########ing to web ######## ########tics (that is, based on the ########s ########ed from ######## to ########es by ######## ########s), in ########r 2024, the ########ted ######## share of Linux on ########p ########ers was ######## 4.3%. In ########ison, ########oft ########s had a ######## share of ######## 73.4%, while macOS ########d ######## 15.5%.[45]
Web ########s
######## ########hes stats that use the top 1,000,000 Alexa ########s,[145] which as of May 2015 ########te that 96.55% of web ########s run Linux, 1.73% run ########s, and 1.72% run ########D.[146]
########s ########hes stats that use the top 10,000,000 Alexa ########s and the top 1,000,000 ######## ########s, ########d ################ and as of ########er 2020 ########te that Linux is used by 39% of the web ########s, ######## 21.9% being used by ########oft ########s.[148] 40.1% used other types of Unix.[149]
IDC's Q1 2007 ######## ########ted that Linux held 12.7% of the ########l ######## ######## at that ########150] this ########te was based on the ######## of Linux ########s sold by ########s ########ies, and did not ########e ######## ########re ########sed ########tely that had Linux ########led on it later.
As of 2024, ########tes ########t Linux ########ts for at least 80% of the ######## cloud ########ad, ######## ######## to its ########read use in ########rms like ######## Web ########es (AWS), ########oft Azure, and ######## Cloud ########rm.################53]

ZDNet ######## that 96.3% of the top one ########n web ########s are ########g Linux.########155] ########s state that Linux ######## at least 39.2% of ########es whose ########ing ######## is known, with other ########tes ######## 55%.########157]

######## ########s
########d, which is based on the Linux ########, has ######## the ########nt ########ing ######## for ########hones. In April 2023, 68.61% of ######## ########s ########ing ########es using ########unter were from ########d.[158] ########d is also a ########r ########ing ######## for ########s, being ########sible for more than 60% of ######## sales as of 2013.[159] ########ing to web ######## ########tics, as of ########r 2021 ########d has a ######## share of about 71%, with iOS ########g 28%, and the ########ing 1% ########uted to ########s niche ########rms.[160]
Film ########tion
For years, Linux has been the ########rm of ######## in the film ########ry. The first major film ########ed on Linux ########s was ######## ########c.########162] Since then major ########s ########ing ########orks ########ion, Pixar, Weta ########l, and ########rial Light & Magic have ########ed to Linux.################65] ########ing to the Linux ######## Group, more than 95% of the ########s and ########ps at large ########ion and ######## ########s ########ies use Linux.[166]
Use in ########ment
Linux ################s have also ######## ########rity with ########s local and ########al ########ments. News of the ########n ########ry ########ng its own Linux ################ has also ########ed, and has come to ########on as the G.H.ost ########t.[167] The ######## state of ######## has gone to the ######## of ########ing that all state high ########s run Linux on their ########ers.########169] China uses Linux ########ively as the ########ing ######## for its ########on ########sor ######## to ########e ########logy ################.[170] In Spain, some ########s have ########ped their own Linux ################s, which are ######## used in ########ion and ########al ################, like ########Ex in ########adura and ########inex in ########sia. ######## and ########y have also taken steps ######## the ########on of Linux.[171] North ########s Red Star OS, ########ped as of 2002, is based on a ########n of ######## Linux.[172]
########ght, ########ark, and ########
See also: ########nux ######## ########versy and ########nux ########es
The Linux ######## is ########ed under the GNU ########l ######## ########e (GPL), ########n 2. The GPL ########es that ######## who ########butes ########re based on ######## code under this ########e must make the ########ating ######## code (and any ################s) ########ble to the ########ent under the same terms.[173] Other key ########ents of a ########l Linux ################ are also ######## ########ed under the GPL, but they may use other ########es; many ########ies use the GNU ######## ########l ######## ########e ########, a more ########sive ########t of the GPL, and the X.Org ################on of the X ######## ######## uses the MIT ########e.

########ds ######## that the Linux ######## will not move from ########n 2 of the GPL to ########n 3.########175] He ################ ########es some ########ions in the new ########e which ########it the use of the ########re in ########l ######## ########ment.[176] It would also be ########tical to ######## ########sion from all the ########ght ########s, who ######## in the ########nds.[177]

A 2001 study of Red Hat Linux 7.1 found that this ################ ########ned 30 ########n ######## lines of code.[178] Using the ################ Cost Model, the study ########ted that this ################ ########ed about eight ########nd ################ of ########pment time. ########ing to the study, if all this ########re had been ########ped by ################ ########etary means, it would have cost about US$1.82 ################ to ########p in 2023 in the ######## ########.[178] Most of the ######## code (71%) was ########n in the C ########mming ########ge, but many other ########ges were used, ########ing C++, Lisp, ########ly ########ge, Perl, ########, ########n, and ########s shell ########ing ########ges. ########ly over half of all lines of code were ########ed under the GPL. The Linux ######## ######## was 2.4 ########n lines of code, or 8% of the total.[178]

In a later study, the same ########is was ########med for ######## ########n 4.0 (etch, which was ########ed in 2007).[180] This ################ ########ned close to 283 ########n ######## lines of code, and the study ########ted that it would have ########ed about ########y three ########nd ########ars and cost US$10.2 ################ (in 2023 ########s) to ########p by ################ means.



The name ########" is also used for a ########y ########ent made by Swiss ########y R√∂sch.[181]
In the ######## ########, the name Linux is a ########ark ########ered to Linus ########ds.[15] ########lly, ######## ########ered it. ########r, on ######## 15, 1994, ########m R. Della Croce Jr. filed for the ########ark Linux, and then ########ed ########ies from Linux ################. In 1996, ########ds and some ########ed ################s sued him to have the ########ark ########ed to ########ds, and, in 1997, the case was ########d.[182] The ########ing of the ########ark has since been ########d by the Linux Mark ########ute (LMI). ########ds has ######## that he ########arked the name only to ########t ########e else from using it. LMI ########ally ########d a ########l ################ fee for use of the Linux name as part of ########arks,[183] but later ########d this in favor of ########ng a free, ########ual ########ide ########ense.[184]


Tux ########mes is ########ed with ################n of the GNU logo
The Free ########re ########tion (FSF) ########s ########nux as the name when ########ing to the ########ing ######## as a whole, ########e it ########ers Linux ################s to be ########ts of the GNU ########ing ######## ########ted in 1983 by ########d ########an, ########ent of the FSF.########0] The ########tion ########itly takes no issue over the name ########d for the ########d OS, which is also an ########ing ######## based on the Linux ########, as GNU is not a part of it.

A ########ty of ######## ########s and ########re ########ts other than ########an and the FSF, ########y ################s ########ting of only free ########re, such as ######## ######## had been ########red by the FSF up to 1996),[185] also use ########nux when ########ing to the ########ing ######## as a whole.################88] Most media and ######## usage, ########r, ######## to this ######## of ########ing ########s ######## as Linux, as do many large Linux ################s (for ########e, SUSE Linux and Red Hat ########rise ########.

As of May 2011, about 8% to 13% of the lines of code of the Linux ################ ######## ########on ########") is made of GNU ########ents (the range ########ing on ########r GNOME is ########ered part of GNU); ########ile, 6% is taken by the Linux ########, ########sed to 9% when ########ing its ######## ################.[189]

[?2004h[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex4 [H[2J[94mITINF25/lektion11/sed/viktigt_att_kunna
(B[m$ ./ex4 
[?2004lLinux ########ks/ ########s[16]) is a family of open source ########ke ########ng ######## based on the Linux kernel,[17] an ########ng system kernel first ########d on ########er 17, 1991, by Linus ########s.########][20] Linux is ########ly ########d as a Linux ########ution ########), which ########s the kernel and ########ing system ########e and ################ of which are ########d by third ########‚Äîto create a ########e ########ng system, ########d as a clone of Unix and ########d under the ########t GPL ########.[21]

########ds of Linux ########utions exist, many based ########y or ########tly on other ########################] ######## Linux ########################[26] ######## Debian, Fedora Linux, Linux Mint, Arch Linux, and Ubuntu, while ########ial ########utions ######## Red Hat ########ise Linux, SUSE Linux ########ise, and ########S. Linux ########utions are ########tly used in server ########ms.########] Many Linux ########utions use the word ######## in their name, but the Free ########e ########ion uses and ########nds the name ########nux" to ########ze the use and ########nce of GNU ########e in many ########utions, ######## some ########ersy.########] Other than the Linux kernel, key ########nts that make up a ########ution may ######## a ######## server ########ing ########, a ######## ########, a ########der and a Unix shell.

Linux is one of the most ########nt ########s of free and ########urce ########e ########ration. While ########lly ########ed for x86 based ########l ########rs, it has since been ported to more ########ms than any other ########ng system,[31] and is used on a wide ######## of ######## ########ng PCs, ########tions, ########mes and ########d ########. Linux is the ########nant ########ng system for ######## and is also used on all of the ######## 500 ######## ################.[g] When ########d with ########, which is ########ased and ########d for ########ones, they have the ######## ########ed base of all ################e ########ng ########.

########w
The Linux kernel was ########d by Linus ########s, ########ng the lack of a ######## kernel for GNU, a ################e ########ng system made ########y of free ########e that had been ########ing ########ment since 1983 by ######## ########n. A ######## Unix system called Minix was later ########d but its ######## was not ########y free at the ########] and it was made for an ########ve ########. The first ########y free Unix for ########l ########rs, 386BSD, did not appear until 1992, by which time ########s had ######## built and ########y ########d the first ######## of the Linux kernel on the ########t.[33] Like GNU and 386BSD, Linux did not have any Unix code, being a fresh ################on, and ########re ######## the then legal issues.[34] Linux ########utions became ######## in the 1990s and ########vely made Unix ########ogies ########ble to home users on ########l ########rs ######## ########sly it had been ########d to ########icated ########tions.[35]

######## Linux ########utions ######## a ########ng system such as X11 or ######## and a ######## ########ment such as GNOME, KDE Plasma or Xfce. ########utions ########d for ######## may not have a ########al user ########ce at all or ######## a ########n stack such as LAMP.

The source code of Linux may be used, ########d, and ########uted ########ially or ################ly by anyone under the terms of its ########ive ########s, such as the GNU ######## Public ######## (GPL). The ######## means ########g novel ########utions is ########ed by ########36] and is easier than it would be for an ########ng system such as MacOS or ########ft ########.########][39] The Linux kernel, for ########, is ########d under the GPLv2, with an ########on for system calls that allows code that calls the kernel via system calls not to be ########d under the GPL.########][36]

######## of the ########ce of ########ased ######## on ########ones, Linux, ########ng ########, has the ######## ########ed base of all ################e ########ng ######## as of May 2022.########][44] Linux is, as of March 2024, used by around 4 ######## of ######## ########rs.[45] The ########ook, which runs the Linux ########based ########S,########] ########es the US K‚Äì12 ########on market and ########nts nearly 20 ######## of ########0 ########k sales in the US.[48] Linux is the ######## ########ng system on ######## (over 96.4% of the top one ######## web ########' ########ng ######## are Linux),[49] leads other big iron ######## such as ########me ########rs,################ ########[50] and is used on all of the ######## 500 ######## ################[h] (as of ########r 2017, having ########ly ########ed all ########tors).########]

Linux also runs on ########d ########, i.e., ######## whose ########ng system is ########ly built into the ########e and is highly ########d to the system. This ########s ########, ########ion ########s, smart home ########, video game ########s, ########ions ########g and LG smart TVs),########][55] ########iles (Tesla, Audi, ########s-Benz, ########, and ########,[56] and ########aft ######## 9 rocket, Dragon crew ########, and the ########ty Mars ########ter).########]

########
Main ########: ######## of Linux
########ors

Linus ########s, ########al author of the Linux kernel
The Unix ########ng system was ########ed of and ########nted in 1969, at AT&T's Bell Labs in the United States, by Ken ########n, Dennis ########, ######## ########, and Joe ########.[59] First ########d in 1971, Unix was ######## ########y in ########y ########e, as was common ########e at the time. In 1973, in a key ########ing ########h, it was ########en in the C ########ming ########e by Dennis ######## ######## for some ########e and I/O ########s). The ########ility of a ########vel ########e ################ of Unix made its ######## to ########nt ########r ########ms easier.[60]

As a 1956 ########st case ######## AT&T from ########g the ########r ########s,[61] AT&T ########d the ########ng ########s source code to anyone who asked. As a result, Unix use grew ######## and it became widely ######## by ########c ########tions and ########ses. In 1984, AT&T ########d itself of its ########l ########ng ########es, and was ########d from its ########ion not to enter the ########r ########s; freed of that ########ion, Bell Labs began ######## Unix as a ########tary ########, where users were not ######## ######## to modify it.########]

Onyx ######## began ######## early ################based Unix ########tions in 1980. Later, Sun ########stems, ######## as a ########f of a ######## ######## at ########d ########ity, also began ######## ########sed ######## ########tions in 1982. While Sun ########tions did not use ########ty PC ########e, for which Linux was later ########lly ########ed, it ########nted the first ########ful ########ial ######## at ########uting a ########ly ########user ########mputer that ran a Unix ########ng system.########]

With Unix ########ingly ######## in" as a ########tary ########, the GNU ########, ######## in 1983 by ######## ########n, had the goal of ########g a ########te ################e ########e ######## ########d ########y of free ########e. Work began in 1984.[66] Later, in 1985, ########n ######## the Free ########e ########ion and wrote the GNU ######## Public ######## (GNU GPL) in 1989. By the early 1990s, many of the ########s ########d in an ########ng system (such as ########es, ########rs, text ########, a ########-line shell, and a ########ng ######## were ########ed, ########h ########el ########s such as device ########, ########, and the kernel, called GNU Hurd, were ######## and ########ete.[67]

Minix was ######## by Andrew S. ########um, a ########r ######## ########or, and ########d in 1987 as a ######## ########ke ########ng system ########d at ########s and others who wanted to learn ########ng system ########les. ########h the ########e source code of Minix was freely ########le, the ########ng terms ########ed it from being free ########e until the ########ng ######## in April 2000.[68]

########n
While ########ng the ########ity of ########i in the fall of 1990, ########s ########d in a Unix course.[69] The course used a ########X ########puter ######## Ultrix, and one of the ########d texts was ########ng ########: Design and ################ by Andrew S. ########um. This ########k ########d a copy of ########um's Minix ########ng system. It was with this course that ########s first became ######## to Unix. In 1991, he became ######## about ########ng ########.[70] ########ted by the ########ng of Minix, which at the time ######## it to ########onal use only,[68] he began to work on his ########ng system kernel, which ########lly became the Linux kernel.

On July 3, 1991, to ########nt Unix system calls, Linus ########s ########ed ################ to obtain a ######## copy of the POSIX ########ds ########tation with a ######## to the comp.os.minix ########up.[71] After not ######## the POSIX ########tation, ########s ########ly ########d to ########ning system calls from SunOS ########tation owned by the ########ity for use in ########ng its Sun ########stems server. He also ######## some system calls from ########um's Minix text.

########s began the ########ment of the Linux kernel on Minix and ########tions ######## for Minix were also used on Linux. Later, Linux ######## and ######## Linux kernel ########ment took place on Linux ########.[72] GNU ########tions also ########d all Minix ########nts, ######## it was ########geous to use the freely ########le code from the GNU ######## with the ########ng ########ng ######## code ########d under the GNU GPL can be reused in other ########r ########s as long as they also are ########d under the same or a ########ble ########. ########s ########ed a switch from his ########l ########, which ########ted ########ial ################, to the GNU GPL.[73] ########ers worked to ########te GNU ########nts with the Linux kernel, ########g a fully ########nal and free ########ng system.[74]

########h not ########d until 1992, due to legal ########ations, the ########ment of 386BSD, from which NetBSD, ######## and ######## ########ed, ########d that of Linux. Linus ########s has stated that if the GNU kernel or 386BSD had been ########le in 1991, he ########y would not have ######## Linux.########]

Naming

5.######## floppy disks ######## a very early ######## of Linux
Linus ########s had wanted to call his ########on ########, a ########teau of "free", ########, and "x" (as an ########n to Unix). During the start of his work on the system, some of the ########'s ########es ########d the name ######## for about half a year. ########s ########red the name ######## but ########ed it as too ########ical.[76]

To ########ate ########ment, the files were ########d to the FTP server of FUNET in ########er 1991. Ari Lemmke, ########s' ########r at the ########i ########ity of ########ogy (HUT) who was one of the ########er ################ for the FTP server at the time, did not think that ######## was a good name, so he named the ######## ######## on the server ######## ########ing ########s.[76] Later, ########, ########s ########ed to ########.

########ng to a ########up post by ########s,[16] the word ######## should be ########ced ########ks/ ‚ìò ########s) with a short 'i' as in ######## and 'u' as in 'put'. To ######## ########rate how the word ######## should be ########ced, he ########d an audio guide with the kernel source code.[77] ########, in this ########ng, he ########ces Linux as ########s/ ########uks) with a short but close front ########ed vowel, ######## of a ########ose ########ont ########ed vowel as in his ########up post.

########ial and ######## uptake
Main ########: Linux ########n




From ########t ########se: Nexus 5X ######## ########, ########ooks, server ########m, ########ht ########inment system
The ########n of Linux in ########ion ########ments, rather than being used only by ########ts, ######## to take off first in the ########0s in the ################ ########ty, where ########ations such as NASA ######## ########ng their ########ingly ########ve ########s with ########s of ########sive ########ty ########rs ######## Linux. ########ial use began when Dell and IBM, ########d by ################d, ######## ########g Linux ######## to escape ########ft's ########y in the ######## ########ng system market.[78]

Today, Linux ######## are used ########out ########ng, from ########d ######## to ########ly all ################,########] and have ######## a place in server ########ations such as the ######## LAMP ########tion stack. The use of Linux ########utions in home and ########ise ########s has been ########.################################

Linux ########utions have also become ######## in the ######## market, with many ######## ########g with ########zed Linux ########utions ########ed, and Google ########ng their own ########S ########d for ########s.

######## ########t ######## in the ########r market is ######## the mobile device market, with ######## being the ########t ########ng system on ########ones and very ######## on ######## and, more ########y, on ########es, and ########s. Linux gaming is also on the rise with Valve ######## its ######## for Linux and ######## out ########, its own ################d Linux ########ution, which was later ########nted in their Steam Deck ########m. Linux ########utions have also gained ########ity with ######## local and ########l ########ents, such as the ######## ########ent of Brazil.[87]

########ment
Linus ########s is the lead ########ner for the Linux kernel and guides its ########ment, while Greg ########artman is the lead ########ner for the stable branch.[88] Zo√´ ######## is the ########ve ########r of the Free ########e ########ion,[89] which in turn ########s the GNU ########nts.[90] ########, ########uals and ########tions ######## ########arty ######## ########nts. These ########arty ########nts ########e a vast body of work and may ######## both kernel ######## and user ########tions and ########es.

Linux ######## and ########ties ######## and ########ute the kernel, GNU ########nts, and ######## ########nts, with ########nal ######## ########ent ########e in the form of Linux ########utions.

Design
See also: Linux kernel ¬ß ########cture and ########s
Many ########ers of ########urce ########e agree that the Linux kernel was not ########d but rather ######## ######## ######## ########on. ########s ########rs that ########h the design of Unix served as a ########ding, "Linux grew with a lot of ########ns ‚Äì and ######## the ########ns were less than random, they were faster and more ########d than ################s in DNA."[91] Eric S. ######## ########rs ######## ########ionary ######## to be social, not ########al: before Linux, ######## ########e was ########d ########ly by small groups, but "Linux ######## in a ########ely ########nt way. From nearly the ########ng, it was rather ########y hacked on by huge ######## of ########ers ########ating only ######## the ########t. ######## was ########ned not by rigid ########ds or ########cy but by the ######## simple ########y of ########ng every week and ######## ########k from ########s of users within days, ########g a sort of rapid ########an ########on on the ########ns ########ced by ########ers."[92] Bryan ########l, an ########r of a ########ng OS, agrees that "Linux wasn't ########d, it ########", but ########rs this to be a ########ion, ########ng that some ########s, ########lly those ######## to ########y,[93] cannot be ######## into, "this is not a ########cal system at the end of the day, it's a ########e system."[94]

A ########ased system is a ######## ########ke ########ng system, ########g much of its basic design from ########les ########shed in Unix during the 1970s and 1980s. Such a system uses a ########hic kernel, the Linux kernel, which ######## ######## ########, ########ing, access to the ########rals, and file ########. Device ######## are either ########ted ########y with the kernel or added as ######## that are loaded while the system is ########.[95]

The GNU ########d is a key part of most ######## based on the Linux kernel, with ######## being a ######## ########on. The GNU C ########, an ################ of the C ########d ########, works as a ######## for the system calls of the Linux kernel ########ry to the ################ce ########ce, the ########in is a broad ########ion of ########ming tools vital to Linux ########ment ########ing the ########rs used to build the Linux kernel ########, and the ########ls ########nt many basic Unix tools. The GNU ######## also ########s Bash, a ######## CLI shell. The ########al user ########ce (or GUI) used by most Linux ######## is built on top of an ################ of the X Window System.[96] More ########y, some of the Linux ########ty has sought to move to using ######## as the ######## server ########l, ########ng X11.########]

Many other ########urce ########e ########s ########ute to Linux ########.

######## layers within Linux, also ######## ########ion ######## the ########d and kernel space
User ########er ################ash, ########fice, GIMP, ########, 0 A.D., ######## ########, ...
System ################t ########
OpenRC, runit, ########...######## ########:
########, smbd, sshd, udevd...########ing ########
X11, ########, ################ ################hics:
Mesa, AMD ########t, ...	Other ########es:
GTK, Qt, EFL, SDL, SFML, FLTK, ########, ...
C ########d ########	fopen, execv, malloc, memcpy, ########me, ################... (up to 2000 ########ines)
glibc aims to be fast, musl aims to be ########ight, uClibc ######## ########d ########, bionic was ######## for ########, etc. All aim to be ################atible.
Kernel ########nux ########stat, splice, dup, read, open, ioctl, write, mmap, close, exit, etc. (about 380 system calls)
The Linux kernel System Call ########ce (SCI), aims to be ########################99]
######## ########ing ########em	IPC ################ry ########ent ################ual files ################orking ########em
Other ########nts: ALSA, DRI, evdev, klibc, LVM, device mapper, Linux ######## ########er, ########er
Linux ########y ########: ########, TOMOYO, ########r, Smack
########e (CPU, main memory, data ######## ########, etc.)
########ed ########nts of a Linux system ######## the ################[100]

A ########der, for ######## GNU GRUB, LILO, ########X or ########-boot. This is a ######## that loads the Linux kernel into the ########r's main memory, by being ########d by the ########r when it is turned on and after the ########e ################ is ########ed.
An init ########, such as the ########onal ########t and the newer ########, OpenRC and ########. This is the first ######## ########d by the Linux kernel, and is at the root of the ######## tree. It starts ########es such as system ########s and login ######## ########r ########al or in ########l mode).
########e ########es, which ######## code that can be used by ######## ########es. On Linux ######## using ########mat ########ble files, the ######## linker that ######## the use of ######## ########es is known as ########x.so. If the system is set up for the user to ######## ########e ########ves, header files will also be ########d to ########e the ########ming ########ce of ########ed ########es. ######## the most ########y used ########e ######## on Linux ########, the GNU C ######## ########, there are ########s other ########es, such as SDL and Mesa.
The C ########d ######## is the ######## ########ry to run ########s ######## in C on a ########r system, with the GNU C ######## being the ########d. It ########s an ################ of the POSIX API, as well as ########ons to that API. For ########d ########, ########tives such as musl, EGLIBC (a glibc fork once used by ######## and uClibc (which was ########d for ########) have been ########ed, ########h the last two are no longer ########ned. ######## uses its own C ########, Bionic. ########, musl can ########nally be used as a ########ment for glibc on ######## and laptop ########, as seen on ######## Linux ########utions like Void Linux.
Basic Unix ########s, with GNU ########ls being the ########d ################. ########tives exist for ########d ########, such as the ########t ########, and the ########ensed Toybox.
Widget ########s are the ########es used to build ########al user ########ces (GUIs) for ########e ########tions. ########s widget ########s are ########le, ########ng GTK and ######## ########ed by the GNOME ########, Qt ########ed by the Qt ######## and led by The Qt ########, and ########enment ########ion ########es (EFL) ########ed ########ly by the ########enment team.
A ######## ########ent system, such as dpkg and RPM. ########tively ########s can be ########d from binary or source ########s.
User ########ce ########s such as ######## shells or ########ng ########ments.
User ########ce
The user ########ce, also known as the shell, is either a ########-line ########ce (CLI), a ########al user ########ce (GUI), or ########s ########d to the ########ted ########e, which is common for ########d ########. For ######## ########, the ######## user ########ce is ######## ########al, ########h the CLI is ########y ########le ######## ########l ########r ######## or on a ########e ######## ########.


GNOME Shell
CLI shells are ########sed user ########ces, which use text for both input and output. The ########t shell used in Linux is the ########Again Shell (bash), ########lly ########ed for the GNU ########; other shells such as Zsh are also used.########02] Most ########el Linux ########nts, ########ng ######## parts of the ########d, use the CLI ########vely. The CLI is ########larly suited for ########ion of ########ive or ######## tasks and ########s very simple ########rocess ########cation.


Debian ######## the Xfce ######## ########ment

Fedora Linux ######## the Plasma ######## ########ment
On ######## ########, the most ######## user ########ces are the GUI shells, ########d ########r with ########ve ######## ########ments, such as KDE Plasma, GNOME, MATE, ########n, LXDE, ########n, and Xfce, though a ######## of ########nal user ########ces exist. Most ######## user ########ces are based on the X Window System, often simply called "X" or "X11". It ########s ######## ########rency and ######## a ########al ########tion ######## on one system to be ########ed on ######## where a user may ########t with the ########tion; ########, ######## ########ons of the X Window System are not ######## of ######## over the ########.[103] ######## X ######## ######## exist, with the ########ce ################, X.Org Server, being the most ########.


I3 Tiling window ########
######## types of window ########s exist for X11, ########ng tiling, ########, ########g, and ########ting. Window ########s ######## means to ######## the ########nt and ########nce of ########ual ########tion ########, and ########t with the X Window System. ######## X window ########s such as dwm, ########on, or i3wm ######## a ########ist ########nality, while more ########te window ########s such as FVWM, ########enment, or Window Maker ######## more ########s such as a ########n ######## and themes, but are still ########ight when ########d to ######## ########ments. ######## ########ments ######## window ########s as part of their ########d ########ations, such as Mutter ########, KWin (KDE), or Xfwm (xfce), ########h users may choose to use a ########nt window ######## if ########ed.

######## is a ######## server ########l ########d as a ########ment for the X11 ########l; as of 2022, it has ########d ########ely wide ########n.[104] Unlike X11, ######## does not need an ########l window ######## and ########ting ########. ########re, a ######## ########tor takes the role of the ######## server, window ########, and ########ting ########. Weston is the ########ce ################ of ########, while ######## Mutter and KDE's KWin are being ported to ######## as ########one ######## ########. ########enment has ######## been ########fully ported since ######## 19.[105] ########nally, many window ########s have been made for ########, such as Sway or ########d, as well as other ########al ########es such as Waybar or Rofi.

Video input ################
Main ########: ########inux
Linux ########ly has two modern ################ce APIs for ########g video input ########: V4L2 API for video ######## and radio, and DVB API for ######## TV ########on.[106]

Due to the ########ity and ########ty of ########nt ########, and due to the large number of ######## and ########ds ######## by those APIs, this ################ needs to evolve to better fit other ########. Also, a good ########ce device ######## is the key to the ######## of having ########ce ########tions to be able to work with all ######## ########ed by those ########.########08]

########ment
Main ########s: Linux ########ution and Free ########e

########ied ######## of ########ke ########ng ########. Linux shares ######## ########cture and ########s (as part of the POSIX ########d) but does not share ########e source code with the ########l Unix or Minix.
The ######## ########nce ######## Linux and many other ######## ########orary ########ng ######## is that the Linux kernel and other ########nts are free and ########urce ########e. Linux is not the only such ########ng system, ########h it is by far the most widely used.[109] Some free and ########urce ########e ########s are based on the ########le of ########t, a kind of ########city: any work ######## from a ########t piece of ########e must also be ########t itself. The most common free ########e ########, the GNU ######## Public ######## (GPL), is a form of ########t and is used for the Linux kernel and many of the ########nts from the GNU ########.[110]

########ased ########utions are ########d by ########ers for ################ty with other ########ng ######## and ########shed ########ng ########ds. Linux ######## adhere to POSIX,[111] Single UNIX ########cation (SUS),[112] Linux ########d Base (LSB), ISO, and ANSI ########ds where ########e, ########h to date only one Linux ########ution has been POSIX.1 ########ed, ########T.########14] The Open Group has tested and ########ed at least two Linux ########utions as ########ing for the Unix ########rk, ######## and Inspur K-UX.[115]

Free ########e ########s, ########h ########ed ######## ########ration, are often ########d ########dently of each other. The fact that the ########e ########s ########tly permit ################, ########, ########s a basis for ########scale ########s that ######## the ########e ########d by ########lone ########s and make it ########le all at once in the form of a Linux ########ution.

Many Linux ########utions manage a remote ########ion of system ########e and ########tion ########e ########s ########le for ########d and ########ation ######## a ######## ########ion. This allows users to adapt the ########ng system to their ########c needs. ########utions are ########ned by ########uals, ########nit teams, ########er ########ations, and ########ial ########s. A ########ution is ########ible for the ######## ########ration of the ########ed Linux kernel, ######## system ########y, and more ########ly ########tion of the ########nt ########e ########s into a ########t whole. ########utions ########ly use a ######## ######## such as apt, yum, zypper, pacman or ######## to ########, remove, and update all of a ########s ########e from one ######## ########n.[116]

########ty
See also: Free ########e ########t and Linux user group
A ########ution is ######## driven by its ########er and user ########ties. Some ######## ######## and fund their ########utions on a ########er basis, Debian being a ########own ########. Others ########n a ########ty ######## of their ########ial ########utions, as Red Hat does with Fedora, and SUSE does with ########E.########18]

In many cities and ########, local ########tions known as Linux User Groups (LUGs) seek to ######## their ########ed ########ution and by ########on free ########e. They hold ########s and ######## free ################, ########g, ########al ########, and ########ng system ########ation to new users. Many ########t ########ties also ######## ######## to Linux users and ########ers. Most ########utions and free ########e / ########urce ########s have IRC ########ms or ########ups. Online forums are ######## means of ########, with ######## ########s being Unix & Linux Stack ########e,########20] ################.org and the ######## ######################## ######## and ########ty forums, such as ones for Ubuntu, Fedora, Arch Linux, Gentoo, etc. Linux ########utions host ######## lists; ########y there will be a ########c topic such as usage or ########ment for a given list.

There are ######## ########ogy ########s with a Linux focus. Print ########es on Linux often bundle cover disks that carry ########e or even ########e Linux ########utions.########22]

########h Linux ########utions are ########ly ########le ######## charge, ######## large ########tions sell, ########, and ########ute to the ########ment of the ########nts of the system and free ########e. An ########s of the Linux kernel in 2017 showed that well over 85% of the code was ########ed by ########mers who are being paid for their work, ######## about 8.2% to unpaid ########ers and 4.1% ########ified.[123] Some of the major ########tions that ######## ########utions ######## Intel, ########, Google, AMD, Oracle, and ########k.[123] ######## ########tions, ######## Red Hat, ########al, and SUSE have built a ########cant ########s around Linux ########utions.

The free ########e ########s, on which the ######## ########e ########s of a ########ution built on the Linux kernel are based, ########tly ########date and ########ge ################ion; the ########nship ######## a Linux ########ution as a whole and ########ual ######## may be seen as ########ic. One common ########s model of ########ial ########rs is ########g for ########, ########lly for ########s users. A number of ########es also offer a ########ized ########s ######## of their ########ution, which adds ########tary ######## ########s and tools to ########ter higher ######## of ########ations or to ########y ################ tasks.[124]

######## ########s model is to give away the ########e to sell ########e. This used to be the norm in the ########r ########y, with ########ng ######## such as CP/M, Apple DOS, and ########s of the ######## Mac OS before 7.6 freely ########e (but not ########ble). As ########r ########e ########dized ########out the 1980s, it became more ########lt for ########e ########turers to profit from this tactic, as the OS would run on any ################ ########r that shared the same ########cture.########26]

########ming on Linux
Most ########ming ########es ######## Linux either ########y or ######## ########arty ########ty based ports.[127] The ########l ########ment tools used for ########g both Linux ########tions and ########ng system ########s are found within the GNU ########in, which ########s the GNU ########r ########ion (GCC) and the GNU Build System. ######## others, GCC ########s ########rs for Ada, C, C++, Go and ########. Many ########ming ########es have a ################ ########ce ################ that ########s Linux, for ######## PHP, Perl, Ruby, Python, Java, Go, Rust and ########. First ########d in 2003, the LLVM ######## ########s an ########tive ################ ########urce ########r for many ########es. ########tary ########rs for Linux ######## the Intel C++ ########r, Sun Studio, and IBM XL C/C++ ########r. BASIC is ########le in ########ral form from QB64, ########ic, ########, ########, ########L, XBasic, ########, ########c, and ########56, as well as object ########d ######## Gambas, ########IC, B4X, Basic for Qt, ######## Object Basic, NS Basic, ########X, ########k Basic, RapidQ and Xojo. Pascal is ########nted ######## GNU Pascal, Free Pascal, and ######## Pascal, as well as ########ally via ########, ########BC.NET, or Delphi using ########key ########usly ######## ######## Kylix).########29]

A common ######## of ########ke ########, Linux ########s ########onal ################se ########ming ########es ########d at ########ng, text ########ing and system ########ration and ########ent in ########. Linux ########utions ######## shell ########, awk, sed and make. Many ########s also have an ########d ########ming ########e to ######## ########ring or ########ming ########ves. For ########, ######## ########ions are ########ed in ########s like grep and locate, the ########onal Unix ######## ########r agent ########l ########s its own Turing ########e ########ng system, and the ########d text editor GNU Emacs is built around a ######## ######## Lisp ########eter.################]

Most ########utions also ######## ######## for PHP, Perl, Ruby, Python and other ######## ########es. While not as common, Linux also ########s C# and other CLI ########es (via Mono), Vala, and Scheme. Guile Scheme acts as an ########on ########e ########ng the GNU system ########es, ######## to make the ################ small, static, ########d C ########s of Unix design ######## and ########ally ########ble via an ########, ########nal ########vel ########ng ######## many GNU ########s can be ########d with ########l Guile ########s to this end. A number of Java ######## ########s and ########ment kits run on Linux, ########ng the ########l Sun ########stems JVM ########t), and IBM's J2SE RE, as well as many ########urce ########s like Kaffe and Jikes RVM; Kotlin, Scala, Groovy and other JVM ########es are also ########le.

GNOME and KDE are ######## ######## ########ments and ######## a ########rk for ########ing ########tions. These ########s are based on the GTK and Qt widget ########s, ########ively, which can also be used ########dently of the larger ########rk. Both ######## a wide ######## of ########es. There are a number of ########ted ########ment ########ments ########le ########ng Anjuta, ########locks, ########e, ########, Geany, ########tate Komodo, ########p, ########, ########elop, ########s, and Qt ########, while the ################ed ######## Vim, nano and Emacs remain ########.[133]

########e ########

Linux is ########ously found on ######## types of ########e.
See also: List of ################d ########r ########ctures
The Linux kernel is a widely ported ########ng system kernel, ########le for ######## ######## from mobile phones to ################; it runs on a highly ######## range of ########r ########ctures, ########ng ########ed ######## ########ones and the IBM Z ########mes. ########ized ########utions and kernel forks exist for less ########eam ################ for ########, the ELKS kernel fork can run on Intel 8086 or Intel 80286 16-bit ################s,[134] while the ######## kernel fork may run on ######## ######## a memory ########ent unit.[135] The kernel also runs on ########ctures that were only ever ########d to use a ########tary ################reated ########ng system, such as ########sh ################[137] (with ########, Intel, and Apple ######## ########ors), PDAs, video game ########s, ########e music ########, and mobile phones.

Linux has a ########ion for ########ing old ########e very well by ########ning ########dized ######## for a long time.[138] There are ######## ########y ########tions and ########e ########nces ######## to ########ning and ########ng ######## for ######## ########e under Linux, such as ########HEC. Over time, ######## for ########nt ########e has ########d in Linux, ########ng in any ########-shelf ########e having a "good ######## of being ########ble.[139]

In 2014, a new ########ive was ########d to ########ically ######## a ########e of all tested ########e ################.[140]

Uses
Main ########: Linux range of use
Market share and uptake
Main ########: Linux ########n
See also: Usage share of ########ng ########
Many ########ative ######## of ################ce ########e focus on topics ########ng market share and ########lity, with ########s ######## ########cally ########ng Linux.[141] The Linux market is ########, and the Linux ########ng system market size is ########d to see a growth of 19.2% by 2027, ########g $15.64 ########, ########d to $3.89 ######## in 2019.[142] ########s ######## a ########d Annual Growth Rate (CAGR) of 13.7% ######## 2024 and 2032, ########ting in a market size of US$34.90 ######## by the latter year.########on ######## ########s and ########nts ########te the ########e ######## of Linux to its ########y, ########lity, low cost, and ######## from vendor ########.########44]

########s and ########
########ng to web server ########ics (that is, based on the ######## ########d from visits to ########s by client ########), in ######## 2024, the ########ed market share of Linux on ######## ########rs was around 4.3%. In ########son, ########ft ######## had a market share of around 73.4%, while macOS ######## around 15.5%.[45]
Web ########
W3Cook ########es stats that use the top 1,000,000 Alexa ########,[145] which as of May 2015 ########e that 96.55% of web ######## run Linux, 1.73% run ########, and 1.72% run ########.[146]
######## ########es stats that use the top 10,000,000 Alexa ######## and the top 1,000,000 Tranco ########, ######## ########[147] and as of ########r 2020 ########e that Linux is used by 39% of the web ########, versus 21.9% being used by ########ft ########.[148] 40.1% used other types of Unix.[149]
IDC's Q1 2007 report ########ed that Linux held 12.7% of the ######## server market at that ########50] this ########e was based on the number of Linux ######## sold by ######## ########es, and did not ######## server ########e ########ed ########ely that had Linux ########ed on it later.
As of 2024, ########es ######## Linux ########s for at least 80% of the public cloud ########d, partly thanks to its ########ead use in ########ms like Amazon Web ########s (AWS), ########ft Azure, and Google Cloud ########m.################]

ZDNet report that 96.3% of the top one ######## web ######## are ######## Linux.########55] ######## state that Linux powers at least 39.2% of ########s whose ########ng system is known, with other ########es saying 55%.########57]

Mobile ########
########, which is based on the Linux kernel, has become the ########t ########ng system for ########ones. In April 2023, 68.61% of mobile ######## ########ng ########s using ########nter were from ########.[158] ######## is also a ######## ########ng system for ########, being ########ible for more than 60% of tablet sales as of 2013.[159] ########ng to web server ########ics, as of ######## 2021 ######## has a market share of about 71%, with iOS ######## 28%, and the ########ng 1% ########ted to ######## niche ########ms.[160]
Film ########ion
For years, Linux has been the ########m of choice in the film ########y. The first major film ########d on Linux ######## was 1997's ########.########62] Since then major ######## ########ng ########rks ########on, Pixar, Weta ########, and ########ial Light & Magic have ########d to Linux.################] ########ng to the Linux Movies Group, more than 95% of the ######## and ########s at large ########on and visual ######## ########es use Linux.[166]
Use in ########ent
Linux ########utions have also gained ########ity with ######## local and ########l ########ents. News of the ######## ########y ########g its own Linux ########ution has also ########d, and has come to ########n as the G.H.ost ########.[167] The Indian state of Kerala has gone to the extent of ########ng that all state high ######## run Linux on their ########rs.########69] China uses Linux ########vely as the ########ng system for its ########n ########or family to ######## ########ogy ########dence.[170] In Spain, some ######## have ########ed their own Linux ########utions, which are widely used in ########on and ########l ########tions, like ########x in ########dura and ########nex in ########ia. France and ######## have also taken steps toward the ########n of Linux.[171] North ######## Red Star OS, ########ed as of 2002, is based on a ######## of Fedora Linux.[172]
########ht, ########rk, and naming
See also: ########ux naming ########ersy and ########ux ########s
The Linux kernel is ########d under the GNU ######## Public ######## (GPL), ######## 2. The GPL ########s that anyone who ########utes ########e based on source code under this ######## must make the ########ting source code (and any ################ ########le to the ########nt under the same terms.[173] Other key ########nts of a ######## Linux ########ution are also mainly ########d under the GPL, but they may use other ########s; many ########es use