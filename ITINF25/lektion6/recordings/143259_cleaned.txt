Script started on 2025-09-25 14:32:59+02:00 [TERM="xterm-256color" TTY="/dev/pts/3" COLUMNS="82" LINES="21"]
ITINF25/lektion6
$ ITINF25/lektion6
$ X=rulle
ITINF25/lektion6
$ echo $X
rulle
ITINF25/lektion6
$ echo ${}
rulle
ITINF25/lektion6
$ echo ${X:2

lle
ITINF25/lektion6
$ echo ${X:21

ulle
ITINF25/lektion6
$ echo ${X:1:2

ul
ITINF25/lektion6
$ ITINF25/lektion6
$ echo ${X:1:2#X

5
ITINF25/lektion6
$ echo ${#XX/er/b

bulle
ITINF25/lektion6
$ # byter ut r mot b.
ITINF25/lektion6
$ ITINF25/lektion6
$ man bash
BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

...skipping...
              tution, process substitution, and quote removal  on  those  words
              (the  expansions  that  would occur if the words were enclosed in
              double quotes).  Conditional operators such as  -f  must  be  un‐
              quoted to be recognized as primaries.

              When  used  with [[, the < and > operators sort lexicographically
              using the current locale.

       See the description of the test builtin command (section  SHELL  BUILTIN
       COMMANDS  below)  for  the handling of parameters (i.e.  missing parame‐
       ters).

       When the == and != operators are used, the string to the  right  of  the
       operator  is considered a pattern and matched according to the rules de‐
       scribed below under Pattern Matching, as if  the  extglob  shell  option
       were  enabled.   The = operator is equivalent to ==.  If the nocasematch
       shell option is enabled, the match is performed without  regard  to  the
       case  of  alphabetic  characters.   The  return value is 0 if the string
       matches (==) or does not match (!=) the pattern, and 1  otherwise.   Any
       part  of  the  pattern  may  be quoted to force the quoted portion to be
...skipping...ash(1) line 368/6591 6% (press h for help or q to quit)
              command  substitution,  process  substitution  and quote removal.
              Each pattern examined is expanded using tilde expansion,  parame‐
              ter and variable expansion, arithmetic expansion, command substi‐
              tution, process substitution, and quote removal.  If the  nocase‐
              match shell option is enabled, the match is performed without re‐
              gard to the case of  alphabetic  characters.   When  a  match  is
              found, the corresponding list is executed.  If the ;; operator is
              used, no subsequent matches are attempted after the first pattern
              match.  Using ;& in place of ;; causes execution to continue with
              the list associated with the next set of patterns.  Using ;;&  in
              place of ;; causes the shell to test the next pattern list in the
              statement, if any, and execute any associated list on a  success‐
              ful match, continuing the case statement execution as if the pat‐
              tern list had not matched.  The exit status is zero if no pattern
              matches.   Otherwise,  it  is the exit status of the last command
              executed in list.

       if list; then list; [ elif list; then list; ] ... [ else list; ] fi
              The if list is executed.  If its exit status is  zero,  the  then
              list is executed.  Otherwise, each elif list is executed in turn,
              and if its exit status is zero, the corresponding  then  list  is
              executed  and the command completes.  Otherwise, the else list is
              executed, if present.  The exit status is the exit status of  the
...skipping...ash(1) line 481/6591 8% (press h for help or q to quit)
       process  substitutions,  the  file descriptors are not available in sub‐
       shells.

       The process ID of the shell spawned to execute the coprocess  is  avail‐
       able  as  the  value of the variable NAME_PID.  The wait builtin command
       may be used to wait for the coprocess to terminate.

       Since the coprocess is created as an asynchronous  command,  the  coproc
       command always returns success.  The return status of a coprocess is the
       exit status of command.

   Shell Function Definitions
       A shell function is an object that is called like a simple  command  and
       executes  a  compound  command  with a new set of positional parameters.
       Shell functions are declared as follows:

       fname () compound-command [redirection]
       function fname [()] compound-command [redirection]
              This defines a function named fname.  The reserved word  function
              is  optional.   If  the  function  reserved word is supplied, the
...skipping...ash(1) line 552/6591 9% (press h for help or q to quit)
       mand substitution, arithmetic expansion, and quote removal  (see  EXPAN‐
       SION  below).  If the variable has its integer attribute set, then value
       is evaluated as an arithmetic expression even if the $((...))  expansion
       is  not used (see Arithmetic Expansion below).  Word splitting and path‐
       name expansion are not performed.  Assignment statements may also appear
       as arguments to the alias, declare, typeset, export, readonly, and local
       builtin commands (declaration commands).   When  in  posix  mode,  these
       builtins may appear in a command after one or more instances of the com‐
       mand builtin and retain these assignment statement properties.

       In the context where an assignment statement is assigning a value  to  a
       shell  variable or array index, the += operator can be used to append to
       or add to the variable's previous value.   This  includes  arguments  to
       builtin commands such as declare that accept assignment statements (dec‐
       laration commands).  When += is applied to a variable for which the  in‐
       teger  attribute  has  been set, value is evaluated as an arithmetic ex‐
       pression and added to the variable's current value, which is also evalu‐
       ated.  When += is applied to an array variable using compound assignment
       (see Arrays below), the variable's value is not unset (as it is when us‐
       ing  =),  and  new  values  are  appended  to the array beginning at one
...skipping...ash(1) line 700/6591 11% (press h for help or q to quit)
              subjected  to  parameter  expansion,  command  substitution,  and
              arithmetic  expansion  before  being  interpreted  as a filename.
              PATH is not used to search for the resultant filename.
       BASH_XTRACEFD
              If set to an integer corresponding to a  valid  file  descriptor,
              bash will write the trace output generated when set -x is enabled
              to that file descriptor.  The  file  descriptor  is  closed  when
              BASH_XTRACEFD  is  unset  or  assigned  a  new  value.  Unsetting
              BASH_XTRACEFD or assigning it the empty string causes  the  trace
              output  to  be  sent  to  the  standard error.  Note that setting
              BASH_XTRACEFD to 2 (the standard error file descriptor) and  then
              unsetting it will result in the standard error being closed.
       CDPATH The  search  path  for the cd command.  This is a colon-separated
              list of directories in which the shell looks for destination  di‐
              rectories  specified  by  the  cd  command.   A  sample  value is
              ".:~:/usr".
       CHILD_MAX
              Set the number of exited child status values for the shell to re‐
              member.   Bash  will not allow this value to be decreased below a
              POSIX-mandated minimum, and there is a maximum  value  (currently
...skipping...ash(1) line 1121/6591 18% (press h for help or q to quit)
              acter  is  the  quick  substitution  character,  which is used as
              shorthand for re-running the previous command entered, substitut‐
              ing  one  string for another in the command.  The default is `^'.
              The optional third character is  the  character  which  indicates
              that  the  remainder  of  the line is a comment when found as the
              first character of a word, normally  `#'.   The  history  comment
              character  causes  history substitution to be skipped for the re‐
              maining words on the line.  It does  not  necessarily  cause  the
              shell parser to treat the rest of the line as a comment.

   Arrays
       Bash  provides  one-dimensional indexed and associative array variables.
       Any variable may be used as an indexed array; the declare  builtin  will
       explicitly  declare  an array.  There is no maximum limit on the size of
       an array, nor any requirement that members be indexed or  assigned  con‐
       tiguously.   Indexed  arrays  are  referenced  using integers (including
       arithmetic expressions) and are zero-based; associative arrays are  ref‐
       erenced  using arbitrary strings.  Unless otherwise noted, indexed array
       indices must be non-negative integers.

       An indexed array is created automatically if any variable is assigned to
       using  the syntax name[subscript]=value.  The subscript is treated as an
       arithmetic expression that must evaluate to a number.  To explicitly de‐
       clare  an indexed array, use declare -a name (see SHELL BUILTIN COMMANDS
       below).  declare -a name[subscript] is also accepted; the  subscript  is
       ignored.
...skipping...ash(1) line 1433/6591 23% (press h for help or q to quit)
       tilde expansion, parameter and variable expansion, command substitution,
       arithmetic expansion, word splitting, and pathname expansion.

       The  order of expansions is: brace expansion; tilde expansion, parameter
       and variable expansion, arithmetic expansion, and  command  substitution
       (done  in  a left-to-right fashion); word splitting; and pathname expan‐
       sion.

       On systems that can support it, there is an additional expansion  avail‐
       able:  process  substitution.   This  is  performed  at the same time as
       tilde, parameter, variable, and arithmetic expansion and command substi‐
       tution.

       After  these  expansions  are performed, quote characters present in the
       original word are removed unless they have been quoted themselves (quote
       removal).

       Only  brace  expansion,  word  splitting, and pathname expansion can in‐
       crease the number of words of the expansion; other expansions  expand  a
       single  word  to a single word.  The only exceptions to this are the ex‐
       pansions of "$@" and "${name[@]}", and, in most cases, $* and ${name[*]}
       as explained above (see PARAMETERS).

   Brace Expansion
       Brace  expansion is a mechanism by which arbitrary strings may be gener‐
       ated.  This mechanism is similar to pathname expansion,  but  the  file‐
       names  generated need not exist.  Patterns to be brace expanded take the
       form of an optional preamble, followed by either a series of comma-sepa‐
       rated  strings  or  a sequence expression between a pair of braces, fol‐
...skipping...ash(1) line 1557/6591 25% (press h for help or q to quit)
       The `$' character introduces parameter expansion, command  substitution,
       or  arithmetic  expansion.   The parameter name or symbol to be expanded
       may be enclosed in braces, which are optional but serve to  protect  the
       variable  to  be expanded from characters immediately following it which
       could be interpreted as part of the name.

       When braces are used, the matching ending brace is the first `}' not es‐
       caped by a backslash or within a quoted string, and not within an embed‐
       ded arithmetic expansion, command substitution, or parameter expansion.

       ${parameter}
              The value of parameter is substituted.  The braces  are  required
              when  parameter  is  a  positional  parameter  with more than one
              digit, or when parameter is followed by a character which is  not
              to  be interpreted as part of its name.  The parameter is a shell
              parameter as described above PARAMETERS) or  an  array  reference
              (Arrays).

       If the first character of parameter is an exclamation point (!), and pa‐
       rameter is not a nameref, it introduces a level  of  indirection.   Bash
       uses  the value formed by expanding the rest of parameter as the new pa‐
       rameter; this is then expanded and that value is used in the rest of the
       expansion, rather than the expansion of the original parameter.  This is
       known as indirect expansion.  The value is subject to  tilde  expansion,
       parameter expansion, command substitution, and arithmetic expansion.  If
       parameter is a nameref, this expands to the name of the parameter refer‐
       enced  by  parameter  instead of performing the complete indirect expan‐
       sion.  The exceptions to this are  the  expansions  of  ${!prefix*}  and
       ${!name[@]}  described  below.   The  exclamation point must immediately
       follow the left brace in order to introduce indirection.

       In each of the cases below, word is subject to tilde expansion,  parame‐
       ter expansion, command substitution, and arithmetic expansion.

       When  not performing substring expansion, using the forms documented be‐
       low (e.g., :-), bash tests for a parameter that is unset or null.  Omit‐
       ting the colon results in a test only for a parameter that is unset.

       ${parameter:-word}
              Use Default Values.  If parameter is unset or null, the expansion
              of word is substituted.  Otherwise, the  value  of  parameter  is
              substituted.
       ${parameter:=word}
              Assign Default Values.  If parameter is unset or null, the expan‐
              sion of word is assigned to parameter.  The value of parameter is
              then  substituted.   Positional parameters and special parameters
              may not be assigned to in this way.
       ${parameter:?word}
              Display Error if Null or Unset.  If parameter is null  or  unset,
              the expansion of word (or a message to that effect if word is not
              present) is written to the standard error and the shell, if it is
              not  interactive,  exits.   Otherwise,  the value of parameter is
...skipping...ash(1) line 1697/6591 27% (press h for help or q to quit)
              Pattern  substitution.  The pattern is expanded to produce a pat‐
              tern just as in pathname expansion.  Parameter  is  expanded  and
              the  longest  match of pattern against its value is replaced with
              string.  string undergoes tilde expansion, parameter and variable
              expansion,  arithmetic  expansion,  command and process substitu‐
              tion, and quote removal.  The match is performed using the  rules
              described under Pattern Matching below.  In the first form above,
              only the first match is replaced.  If there are two slashes sepa‐
              rating parameter and pattern (the second form above), all matches
              of pattern are replaced with string.  If pattern is preceded by #
              (the third form above), it must match at the beginning of the ex‐
              panded value of parameter.  If pattern  is  preceded  by  %  (the
              fourth  form  above),  it  must  match at the end of the expanded
              value of parameter.  If the expansion of string is null,  matches
              of  pattern  are  deleted.  If string is null, matches of pattern
              are deleted and the / following pattern may be omitted.

              If the patsub_replacement shell option is  enabled  using  shopt,
              any  unquoted  instances  of  &  in  string are replaced with the
              matching portion of pattern.
...skipping...ash(1) line 1824/6591 29% (press h for help or q to quit)
              parameter is @ or *, the substitution  operation  is  applied  to
              each  positional  parameter in turn, and the expansion is the re‐
              sultant list.  If parameter is an array variable subscripted with
              @  or  *, the substitution operation is applied to each member of
              the array in turn, and the expansion is the resultant list.

       ${parameter^pattern}
       ${parameter^^pattern}
       ${parameter,pattern}
       ${parameter,,pattern}
              Case modification.  This expansion modifies the  case  of  alpha‐
              betic  characters  in parameter.  The pattern is expanded to pro‐
              duce a pattern just as in pathname expansion.  Each character  in
              the  expanded  value of parameter is tested against pattern, and,
              if it matches the pattern, its case is  converted.   The  pattern
              should not attempt to match more than one character.  The ^ oper‐
              ator converts lowercase letters matching  pattern  to  uppercase;
              the  , operator converts matching uppercase letters to lowercase.
              The ^^ and ,, expansions convert each matched  character  in  the
              expanded value; the ^ and , expansions match and convert only the
              first character in the expanded value.  If pattern is omitted, it
              is treated like a ?, which matches every character.  If parameter
              is @ or *, the case modification operation is applied to each po‐
...skipping...ash(1) line 1864/6591 30% (press h for help or q to quit)
   Command Substitution
       Command  substitution allows the output of a command to replace the com‐
       mand name.  There are two forms:

              $(command)
       or
              `command`

       Bash performs the expansion by executing command in a subshell  environ‐
       ment  and replacing the command substitution with the standard output of
       the command, with any trailing newlines deleted.  Embedded newlines  are
       not deleted, but they may be removed during word splitting.  The command
       substitution $(cat file) can be replaced by the  equivalent  but  faster
       $(< file).

       When the old-style backquote form of substitution is used, backslash re‐
       tains its literal meaning except when followed by $, `, or \.  The first
       backquote  not  preceded by a backslash terminates the command substitu‐
       tion.  When using the $(command) form, all characters between the paren‐
       theses make up the command; none are treated specially.
/Manual page bash(1) line 1934/6591 31% (press h for help or q to quit)
       Command  substitutions may be nested.  To nest when using the backquoted
       form, escape the inner backquotes with backslashes.

       If the substitution appears within double  quotes,  word  splitting  and
       pathname expansion are not performed on the results.

   Arithmetic Expansion
       Arithmetic  expansion  allows the evaluation of an arithmetic expression
       and the substitution of the result.  The format for arithmetic expansion
       is:

              $((expression))6/6591 31% (press h for help or q to quit)

       The old format $[expression] is deprecated and will be removed in upcom‐
       ing versions of bash.49/6591 31% (press h for help or q to quit)

       The expression undergoes the same expansions as if it were within double
       quotes,  but  double quote characters in expression are not treated spe‐
       cially and are removed.  All tokens in the expression undergo  parameter
       and  variable  expansion,  command substitution, and quote removal.  The
       result is treated as the arithmetic expression to be evaluated.   Arith‐
       metic expansions may be nested.

       The  evaluation  is  performed according to the rules listed below under
       ARITHMETIC EVALUATION.  If expression is invalid, bash prints a  message
       indicating failure and no substitution occurs.

   Process Substitution
       Process  substitution  allows a process's input or output to be referred
       to using a filename.  It takes the form  of  <(list)  or  >(list).   The
       process list is run asynchronously, and its input or output appears as a
       filename.  This filename is passed as an argument to the current command
       as the result of the expansion.  If the >(list) form is used, writing to
       the file will provide input for list.  If the <(list) form is used,  the
       file  passed as an argument should be read to obtain the output of list.
       Process substitution is supported on systems that  support  named  pipes
       (FIFOs) or the /dev/fd method of naming open files.

       When  available,  process  substitution is performed simultaneously with
       parameter and variable expansion, command substitution,  and  arithmetic
       expansion.

   Word Splitting
       The  shell  scans  the results of parameter expansion, command substitu‐
       tion, and arithmetic expansion that did not occur within  double  quotes
       for word splitting.1980/6591 32% (press h for help or q to quit)

       The  shell  treats  each character of IFS as a delimiter, and splits the
       results of the other expansions into words  using  these  characters  as
       field   terminators.    If  IFS  is  unset,  or  its  value  is  exactly
       <space><tab><newline>, the default, then sequences  of  <space>,  <tab>,
       and  <newline>  at  the beginning and end of the results of the previous
       expansions are ignored, and any sequence of IFS characters  not  at  the
       beginning or end serves to delimit words.  If IFS has a value other than
       the default, then sequences of the whitespace characters space, tab, and
       newline are ignored at the beginning and end of the word, as long as the
       whitespace character is in the value of IFS (an IFS  whitespace  charac‐
       ter).   Any  character in IFS that is not IFS whitespace, along with any
       adjacent IFS whitespace characters, delimits a field.  A sequence of IFS
...skipping...ash(1) line 1994/6591 32% (press h for help or q to quit)
       terns, including shell functions and command substitutions.

       When matching filenames, the dotglob shell option determines the set  of
       filenames that are tested: when dotglob is enabled, the set of filenames
       includes all files beginning with ``.'', but ``.'' and  ``..''  must  be
       matched  by  a pattern or sub-pattern that begins with a dot; when it is
       disabled, the set does not include any filenames  beginning  with  ``.''
       unless  the pattern or sub-pattern begins with a ``.''.  As above, ``.''
       only has a special meaning when matching filenames.

       Complicated extended pattern matching against long strings is slow,  es‐
       pecially  when the patterns contain alternations and the strings contain
       multiple matches.  Using separate matches against  shorter  strings,  or
       using arrays of strings instead of a single long string, may be faster.

   Quote Removal
       After  the preceding expansions, all unquoted occurrences of the charac‐
       ters \, ', and " that did not result from one of  the  above  expansions
       are removed.

...skipping...ash(1) line 2141/6591 34% (press h for help or q to quit)
       expansion,  parameter  and  variable  expansion,  command  substitution,
       arithmetic expansion, quote removal, pathname expansion, and word split‐
       ting.  If it expands to more than one word, bash reports an error.

       Note  that  the  order of redirections is significant.  For example, the
       command

              ls > dirlist 2>&1

       directs both standard output and standard error  to  the  file  dirlist,
       while the command

              ls 2>&1 > dirlist

       directs  only  the standard output to file dirlist, because the standard
       error was duplicated from the standard output before the standard output
       was redirected to dirlist.

       Bash  handles several filenames specially when they are used in redirec‐
       tions, as described in the following table.  If the operating system  on
...skipping...ash(1) line 2190/6591 35% (press h for help or q to quit)
       No parameter and variable expansion,  command  substitution,  arithmetic
       expansion,  or  pathname expansion is performed on word.  If any part of
       word is quoted, the delimiter is the result of quote  removal  on  word,
       and  the  lines  in  the here-document are not expanded.  If word is un‐
       quoted, all lines of the here-document are subjected to parameter expan‐
       sion,  command substitution, and arithmetic expansion, the character se‐
       quence \<newline> is ignored, and \ must be used to quote the characters
       \, $, and `.

       If  the redirection operator is <<-, then all leading tab characters are
       stripped from input lines and the line containing delimiter.   This  al‐
       lows  here-documents  within  shell  scripts to be indented in a natural
       fashion.

   Here Strings
       A variant of here documents, the format is:

              [n]<<<word

       The word undergoes tilde expansion, parameter  and  variable  expansion,
       command substitution, arithmetic expansion, and quote removal.  Pathname
       expansion and word splitting are not performed.  The result is  supplied
       as a single string, with a newline appended, to the command on its stan‐
       dard input (or file descriptor n if n is specified).

   Duplicating File Descriptors6591 36% (press h for help or q to quit)
       The redirection operator

              [n]<&word

       is used to duplicate input file descriptors.  If word expands to one  or
       more  digits,  the  file descriptor denoted by n is made to be a copy of
       that file descriptor.  If the digits in word do not specify a  file  de‐
       scriptor  open for input, a redirection error occurs.  If word evaluates
       to -, file descriptor n is closed.  If n is not specified, the  standard
       input (file descriptor 0) is used.

       The operator

              [n]>&word
...skipping...ash(1) line 2346/6591 37% (press h for help or q to quit)
              expansion,  parameter expansion, command substitution, arithmetic
              expansion, and quote removal before being assigned to  the  vari‐
              able.

       If  no command name results, the variable assignments affect the current
       shell environment.  In the case of such a  command  (one  that  consists
       only  of  assignment statements and redirections), assignment statements
       are performed before redirections.  Otherwise, the variables  are  added
       to the environment of the executed command and do not affect the current
       shell environment.  If any of the assignments attempts to assign a value
       to  a  readonly  variable, an error occurs, and the command exits with a
       non-zero status.

       If no command name results, redirections are performed, but do  not  af‐
       fect the current shell environment.  A redirection error causes the com‐
       mand to exit with a non-zero status.

       If there is a command name left after expansion, execution  proceeds  as
       described  below.   Otherwise,  the command exits.  If one of the expan‐
       sions contained a command substitution, the exit status of  the  command
       is the exit status of the last command substitution performed.  If there
       were no command substitutions, the command exits with a status of zero.

COMMAND EXECUTION
       After a command has been split into words, if it  results  in  a  simple
       command  and  an  optional  list of arguments, the following actions are
       taken.

       If the command name contains no slashes, the shell  attempts  to  locate
       it.  If there exists a shell function by that name, that function is in‐
       voked as described above in FUNCTIONS.  If the name  does  not  match  a
       function, the shell searches for it in the list of shell builtins.  If a
       match is found, that builtin is invoked.

       If the name is neither a shell function nor a builtin, and  contains  no
       slashes, bash searches each element of the PATH for a directory contain‐
       ing an executable file by that name.  Bash uses a hash table to remember
       the  full  pathnames  of  executable files (see hash under SHELL BUILTIN
       COMMANDS below).  A full search of the directories in PATH is  performed
M       described  below.   Otherwise,  the command exits.  If one of the expan‐
M       If there is a command name left after expansion, execution  proceeds  as
MESESCOApage bash(1) line 2745/6591 42% (press h for help or q to quit)
M       mand to exit with a non-zero status.ss h for help or q to quit)
M       fect the current shell environment.  A redirection error causes the com‐
M       If no command name results, redirections are performed, but do  not  af‐
MESESCOApage bash(1) line 2741/6591 42% (press h for help or q to quit)
M       non-zero status.e 2740/6591 42% (press h for help or q to quit)
M       to  a  readonly  variable, an error occurs, and the command exits with a
M       shell environment.  If any of the assignments attempts to assign a value
M       to the environment of the executed command and do not affect the current
M       are performed before redirections.  Otherwise, the variables  are  added
M       only  of  assignment statements and redirections), assignment statements
M       shell environment.  In the case of such a  command  (one  that  consists
M       If  no command name results, the variable assignments affect the current
MESESCOApage bash(1) line 2732/6591 42% (press h for help or q to quit)
M              able. line 2731/6591 42% (press h for help or q to quit)
M              expansion, and quote removal before being assigned to  the  vari‐
M              expansion,  parameter expansion, command substitution, arithmetic
M       4.     The text after the = in each variable assignment undergoes  tilde
MESESCOApage bash(1) line 2727/6591 42% (press h for help or q to quit)
M       3.     Redirections are performed as described above under REDIRECTION.
MESESCOApage bash(1) line 2725/6591 42% (press h for help or q to quit)
M              the arguments.4/6591 42% (press h for help or q to quit)
M              taken  to  be the name of the command and the remaining words are
M              expanded.  If any words remain after expansion, the first word is
M       2.     The  words  that are not variable assignments or redirections are
MESESCOApage bash(1) line 2720/6591 42% (press h for help or q to quit)
M              later processing.591 42% (press h for help or q to quit)
M              (those preceding the command name) and redirections are saved for
M       1.     The  words  that  the  parser  has marked as variable assignments
MESESCOApage bash(1) line 2716/6591 41% (press h for help or q to quit)
M       lowing order.line 2715/6591 41% (press h for help or q to quit)
M       pansions, assignments, and redirections, from left to right, in the fol‐
M       When  a simple command is executed, the shell performs the following ex‐
MSIMPLE COMMAND EXPANSION 2712/6591 41% (press h for help or q to quit)
MESESCOApage bash(1) line 2711/6591 41% (press h for help or q to quit)
M              TION above).710/6591 41% (press h for help or q to quit)
M              are evaluated as arithmetic expressions (see  ARITHMETIC  EVALUA‐
M              negative  integers.  When used with the [[ command, Arg1 and Arg2
M              or equal to arg2, respectively.  Arg1 and arg2 may be positive or
M              less  than,  less than or equal to, greater than, or greater than
M              binary operators return true if arg1 is equal to, not  equal  to,
M              OP  is  one of -eq, -ne, -lt, -le, -gt, or -ge.  These arithmetic
M       arg1 OP arg2 line 2703/6591 41% (press h for help or q to quit)
MESESCOApage bash(1) line 2702/6591 41% (press h for help or q to quit)
M              True if string1 sorts after string2 lexicographically.t)
M       string1 > string2 2700/6591 41% (press h for help or q to quit)
MESESCOApage bash(1) line 2699/6591 41% (press h for help or q to quit)
M              True if string1 sorts before string2 lexicographically.)
M       string1 < string2 2697/6591 41% (press h for help or q to quit)
MESESCOApage bash(1) line 2696/6591 41% (press h for help or q to quit)
M              True if the strings are not equal.for help or q to quit)
M       string1 != string22694/6591 41% (press h for help or q to quit)
MESESCOApage bash(1) line 2693/6591 41% (press h for help or q to quit)
M              mands).ine 2692/6591 41% (press h for help or q to quit)
M              this performs pattern matching as described above (Compound  Com‐
M              command  for  POSIX  conformance.  When used with the [[ command,
M              True if the strings are equal.  = should be used  with  the  test
M       string1 = string2 2688/6591 41% (press h for help or q to quit)
M       string1 == string22687/6591 41% (press h for help or q to quit)
MESESCOApage bash(1) line 2686/6591 41% (press h for help or q to quit)
M              True if the length of string is non-zero.p or q to quit)
M       -n string(1) line 2684/6591 41% (press h for help or q to quit)
M       stringash(1) line 2683/6591 41% (press h for help or q to quit)
M              True if the length of string is zero. help or q to quit)
M       -z string(1) line 2681/6591 41% (press h for help or q to quit)
M              ence. line 2680/6591 41% (press h for help or q to quit)
M              True  if  the  shell variable varname is set and is a name refer‐
M       -R varname1) line 2678/6591 41% (press h for help or q to quit)
M              value).ine 2677/6591 41% (press h for help or q to quit)
M              True if the shell variable varname is set (has  been  assigned  a
M       -v varname1) line 2675/6591 41% (press h for help or q to quit)
M              below.line 2674/6591 41% (press h for help or q to quit)
M              tions  under  the description of the -o option to the set builtin
M              True if the shell option optname is enabled.  See the list of op‐
M       -o optname1) line 2671/6591 41% (press h for help or q to quit)
M              does not.e 2670/6591 41% (press h for help or q to quit)
M              True  if  file1 is older than file2, or if file2 exists and file1
M       file1 -ot file2ne 2668/6591 41% (press h for help or q to quit)
M              file2, or if file1 exists and file2 does not. q to quit)
M              True if file1 is newer  (according  to  modification  date)  than
M       file1 -nt file2ne 2665/6591 41% (press h for help or q to quit)
M              bers. line 2664/6591 41% (press h for help or q to quit)
M              True  if  file1 and file2 refer to the same device and inode num‐
M       file1 -ef file2ne 2662/6591 41% (press h for help or q to quit)
M              True if file exists and is a socket.r help or q to quit)
M       -S filesh(1) line 2660/6591 41% (press h for help or q to quit)
M              True if file exists and is owned by the effective user id.
M       -O filesh(1) line 2658/6591 41% (press h for help or q to quit)
M              True if file exists and has been modified since it was last read.
M       -N filesh(1) line 2656/6591 41% (press h for help or q to quit)
M              True if file exists and is a symbolic link.or q to quit)
M       -L filesh(1) line 2654/6591 41% (press h for help or q to quit)
M              True if file exists and is owned by the effective group id.
M       -G filesh(1) line 2652/6591 41% (press h for help or q to quit)
M              True if file exists and is executable.help or q to quit)
M       -x filesh(1) line 2650/6591 41% (press h for help or q to quit)
M              True if file exists and is writable.r help or q to quit)
M       -w filesh(1) line 2648/6591 41% (press h for help or q to quit)
M              True if file exists and its set-user-id bit is set.quit)
M       -u filesh(1) line 2646/6591 41% (press h for help or q to quit)
M       -t fd  True if file descriptor fd is open and refers to a terminal.
M              True if file exists and has a size greater than zero.it)
M       -s filesh(1) line 2643/6591 41% (press h for help or q to quit)
M              True if file exists and is readable.r help or q to quit)
M       -r filesh(1) line 2641/6591 41% (press h for help or q to quit)
M              True if file exists and is a named pipe (FIFO). to quit)
M       -p filesh(1) line 2639/6591 41% (press h for help or q to quit)
M              True if file exists and its ``sticky'' bit is set. quit)
M       -k filesh(1) line 2637/6591 40% (press h for help or q to quit)
M              True if file exists and is a symbolic link.or q to quit)
M       -h filesh(1) line 2635/6591 40% (press h for help or q to quit)
M              True if file exists and is set-group-id.lp or q to quit)
M       -g filesh(1) line 2633/6591 40% (press h for help or q to quit)
M              True if file exists and is a regular file. or q to quit)
M       -f filesh(1) line 2631/6591 40% (press h for help or q to quit)
M              True if file exists. 40% (press h for help or q to quit)
M       -e filesh(1) line 2629/6591 40% (press h for help or q to quit)
M              True if file exists and is a directory.elp or q to quit)
M       -d filesh(1) line 2627/6591 40% (press h for help or q to quit)
M              True if file exists and is a character special file.uit)
M       -c filesh(1) line 2625/6591 40% (press h for help or q to quit)
M              True if file exists and is a block special file.to quit)
M       -b filesh(1) line 2623/6591 40% (press h for help or q to quit)
M              True if file exists. 40% (press h for help or q to quit)
M       -a filesh(1) line 2621/6591 40% (press h for help or q to quit)
MESESCOApage bash(1) line 2620/6591 40% (press h for help or q to quit)
M       the current locale.  The test command sorts using ASCII ordering.
M       When used with [[, the < and > operators  sort  lexicographically  using
MESESCOApage bash(1) line 2617/6591 40% (press h for help or q to quit)
M       itself.sh(1) line 2616/6591 40% (press h for help or q to quit)
M       bolic  links and operate on the target of the link, rather than the link
M       Unless otherwise specified, primaries that operate on files follow  sym‐
MESESCOApage bash(1) line 2613/6591 40% (press h for help or q to quit)
M       or /dev/stderr, file descriptor 0, 1, or 2, respectively, is checked.
M       file argument to one of the primaries is one of /dev/stdin, /dev/stdout,
M       is of the form /dev/fd/n, then file descriptor n  is  checked.   If  the
MManual page bash(1) line 2609/6591 40% (press h for help or q to quit)
M       1003.1).  Bash can be configured to be POSIX-conformant by default.
M       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
M       Bash  is  intended  to  be  a conformant implementation of the Shell and
M
M       rates useful features from the Korn and C shells (ksh and csh).
M       mands read from the standard input or from a file.  Bash  also  incorpo‐
M       Bash is an sh-compatible command language interpreter that executes com‐
MDESCRIPTION
M
M       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.
MCOPYRIGHT
M
M       bash [options] [command_string | file]
MSYNOPSIS
M
M       bash - GNU Bourne-Again SHell
MNAME
M
MBASH(1)                     General Commands Manual                     BASH(1)
BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

...skipping...
       sion in the EXPANSION section.

       When bash is invoked as an interactive login shell, or as a non-interac‐
       tive shell with the --login option, it first reads and executes commands
       from  the  file  /etc/profile,  if that file exists.  After reading that
       file, it looks for ~/.bash_profile, ~/.bash_login,  and  ~/.profile,  in
       that  order, and reads and executes commands from the first one that ex‐
       ists and is readable.  The --noprofile option may be used when the shell
       is started to inhibit this behavior.

       When  an interactive login shell exits, or a non-interactive login shell
       executes the exit builtin command, bash reads and executes commands from
       the file ~/.bash_logout, if it exists.

       When  an  interactive  shell  that is not a login shell is started, bash
       reads and executes commands  from  /etc/bash.bashrc  and  ~/.bashrc,  if
       these  files  exist.   This may be inhibited by using the --norc option.
       The --rcfile file option will force bash to read  and  execute  commands
       from file instead of /etc/bash.bashrc and ~/.bashrc.

...skipping...ash(1) line 142/6591 2% (press h for help or q to quit)
       TORY  EXPANSION below), the history expansion character, usually !, must
       be quoted to prevent history expansion.

       There are three quoting mechanisms: the escape character, single quotes,
       and double quotes.

       A  non-quoted  backslash  (\) is the escape character.  It preserves the
       literal value of the next character that follows, with the exception  of
       <newline>.   If  a \<newline> pair appears, and the backslash is not it‐
       self quoted, the \<newline> is treated as a line continuation (that  is,
       it is removed from the input stream and effectively ignored).

       Enclosing  characters  in  single  quotes preserves the literal value of
       each character within the quotes.  A single quote may not occur  between
       single quotes, even when preceded by a backslash.

       Enclosing characters in double quotes preserves the literal value of all
       characters within the quotes, with the exception of $, `, \,  and,  when
       history expansion is enabled, !.  When the shell is in posix mode, the !
       has no special meaning within double quotes, even when history expansion
...skipping...ash(1) line 609/6591 9% (press h for help or q to quit)
       expanded, it must be enclosed in braces (see EXPANSION below).

   Special Parameters
       The  shell  treats  several  parameters specially.  These parameters may
       only be referenced; assignment to them is not allowed.
       *      Expands to the positional parameters, starting  from  one.   When
              the expansion is not within double quotes, each positional param‐
              eter expands to a separate word.  In contexts where  it  is  per‐
              formed,  those  words  are  subject to further word splitting and
              pathname expansion.  When  the  expansion  occurs  within  double
              quotes, it expands to a single word with the value of each param‐
              eter separated by the first character of the  IFS  special  vari‐
              able.  That is, "$*" is equivalent to "$1c$2c...", where c is the
              first character of the value of the IFS variable.  If IFS is  un‐
              set, the parameters are separated by spaces.  If IFS is null, the
              parameters are joined without intervening separators.
       @      Expands to the positional parameters, starting from one.  In con‐
              texts  where word splitting is performed, this expands each posi‐
              tional parameter to a separate word; if not within double quotes,
              these  words  are  subject  to word splitting.  In contexts where
...skipping...ash(1) line 760/6591 12% (press h for help or q to quit)
              tokenization (see HISTORY EXPANSION below).  The first  character
              is  the  history expansion character, the character which signals
              the start of a history expansion, normally `!'.  The second char‐
              acter  is  the  quick  substitution  character,  which is used as
              shorthand for re-running the previous command entered, substitut‐
              ing  one  string for another in the command.  The default is `^'.
              The optional third character is  the  character  which  indicates
              that  the  remainder  of  the line is a comment when found as the
              first character of a word, normally  `#'.   The  history  comment
              character  causes  history substitution to be skipped for the re‐
              maining words on the line.  It does  not  necessarily  cause  the
              shell parser to treat the rest of the line as a comment.

   Arrays
       Bash  provides  one-dimensional indexed and associative array variables.
       Any variable may be used as an indexed array; the declare  builtin  will
       explicitly  declare  an array.  There is no maximum limit on the size of
       an array, nor any requirement that members be indexed or  assigned  con‐
       tiguously.   Indexed  arrays  are  referenced  using integers (including
       arithmetic expressions) and are zero-based; associative arrays are  ref‐
...skipping...ash(1) line 1424/6591 23% (press h for help or q to quit)
       sions described below under EXPANSION.  When assigning  to  indexed  ar‐
       rays, if the optional brackets and subscript are supplied, that index is
       assigned to; otherwise the index of the element assigned is the last in‐
       dex assigned to by the statement plus one.  Indexing starts at zero.

       When  assigning to an associative array, the words in a compound assign‐
       ment may be either assignment statements, for which the subscript is re‐
       quired,  or  a list of words that is interpreted as a sequence of alter‐
       nating keys and values: name=( key1 value1 key2 value2 ...).  These  are
       treated  identically  to  name=(  [key1]=value1 [key2]=value2 ...).  The
       first word in the list determines how the  remaining  words  are  inter‐
       preted;  all assignments in a list must be of the same type.  When using
       key/value pairs, the keys may not be missing or empty; a  final  missing
       value is treated like the empty string.

       This  syntax  is also accepted by the declare builtin.  Individual array
       elements may be assigned to using the name[subscript]=value  syntax  in‐
       troduced  above.   When  assigning  to an indexed array, if name is sub‐
       scripted by a negative number, that number is interpreted as relative to
       one  greater  than  the maximum index of name, so negative indices count
...skipping...ash(1) line 1463/6591 23% (press h for help or q to quit)
EXPANSION
       Expansion is performed on the command line after it has been split  into
       words.   There  are seven kinds of expansion performed: brace expansion,
       tilde expansion, parameter and variable expansion, command substitution,
       arithmetic expansion, word splitting, and pathname expansion.

       The  order of expansions is: brace expansion; tilde expansion, parameter
       and variable expansion, arithmetic expansion, and  command  substitution
       (done  in  a left-to-right fashion); word splitting; and pathname expan‐
       sion.

       On systems that can support it, there is an additional expansion  avail‐
       able:  process  substitution.   This  is  performed  at the same time as
       tilde, parameter, variable, and arithmetic expansion and command substi‐
       tution.

       After  these  expansions  are performed, quote characters present in the
       original word are removed unless they have been quoted themselves (quote
       removal).

       Only  brace  expansion,  word  splitting, and pathname expansion can in‐
       crease the number of words of the expansion; other expansions  expand  a
       single  word  to a single word.  The only exceptions to this are the ex‐
       pansions of "$@" and "${name[@]}", and, in most cases, $* and ${name[*]}
       as explained above (see PARAMETERS).ess h for help or q to quit)
 ESESCOBpage bash(1) line 1550/6591 25% (press h for help or q to quit)
   Brace Expansion1) line 1551/6591 25% (press h for help or q to quit)
       Brace  expansion is a mechanism by which arbitrary strings may be gener‐
       ated.  This mechanism is similar to pathname expansion,  but  the  file‐
       names  generated need not exist.  Patterns to be brace expanded take the
       form of an optional preamble, followed by either a series of comma-sepa‐
       rated  strings  or  a sequence expression between a pair of braces, fol‐
       lowed by an optional postscript.   The  preamble  is  prefixed  to  each
       string  contained within the braces, and the postscript is then appended
       to each resulting string, expanding left to right. or q to quit)
 ESESCOBpage bash(1) line 1560/6591 25% (press h for help or q to quit)
       Brace expansions may be nested.  The results of each expanded string are
       not  sorted;  left  to right order is preserved.  For example, a{d,c,b}e
       expands into `ade ace abe'.1 25% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1564/6591 25% (press h for help or q to quit)
       A sequence expression takes the form {x..y[..incr]}, where x and  y  are
       either  integers  or single letters, and incr, an optional increment, is
       an integer.  When integers are supplied, the expression expands to  each
       number  between  x  and y, inclusive.  Supplied integers may be prefixed
       with 0 to force each term to have the same width.  When either  x  or  y
       begins  with  a zero, the shell attempts to force all generated terms to
       contain the same number of digits, zero-padding where  necessary.   When
       letters  are  supplied, the expression expands to each character lexico‐
       graphically between x and y, inclusive,  using  the  default  C  locale.
       Note  that  both  x  and y must be of the same type (integer or letter).
       When the increment is supplied, it is used  as  the  difference  between
       each term.  The default increment is 1 or -1 as appropriate.uit)
 ESESCOBpage bash(1) line 1577/6591 25% (press h for help or q to quit)
       Brace  expansion is performed before any other expansions, and any char‐
       acters special to other expansions are preserved in the result.   It  is
       strictly  textual.   Bash does not apply any syntactic interpretation to
       the context of the expansion or the text between the braces.uit)
 ESESCOBpage bash(1) line 1582/6591 25% (press h for help or q to quit)
       A correctly-formed brace expansion must  contain  unquoted  opening  and
       closing  braces, and at least one unquoted comma or a valid sequence ex‐
       pression.  Any incorrectly formed brace expansion is left unchanged.   A
       {  or  ,  may be quoted with a backslash to prevent its being considered
       part of a brace expression.  To avoid conflicts  with  parameter  expan‐
       sion,  the string ${ is not considered eligible for brace expansion, and
       inhibits brace expansion until the closing }. help or q to quit)
 ESESCOBpage bash(1) line 1590/6591 25% (press h for help or q to quit)
       This construct is typically used as shorthand when the common prefix  of
       the strings to be generated is longer than in the above example:
 ESESCOBpage bash(1) line 1593/6591 26% (press h for help or q to quit)
              mkdir /usr/local/src/bash/{old,new,dist,bugs}r q to quit)
       orage bash(1) line 1595/6591 26% (press h for help or q to quit)
              chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}} quit)
 ESESCOBpage bash(1) line 1597/6591 26% (press h for help or q to quit)
       Brace expansion introduces a slight incompatibility with historical ver‐
       sions of sh.  sh does not treat opening or closing braces specially when
       they  appear  as part of a word, and preserves them in the output.  Bash
       removes braces from words as a consequence of brace expansion.  For  ex‐
       ample, a word entered to sh as file{1,2} appears identically in the out‐
       put.  The same word is output as file1 file2 after  expansion  by  bash.
       If  strict  compatibility with sh is desired, start bash with the +B op‐
       tion or disable brace expansion with the +B option to  the  set  command
       (see SHELL BUILTIN COMMANDS below).ress h for help or q to quit)
 ESESCOBpage bash(1) line 1607/6591 26% (press h for help or q to quit)
   Tilde Expansion1) line 1608/6591 26% (press h for help or q to quit)
       If  a  word  begins  with  an unquoted tilde character (`~'), all of the
       characters preceding the first unquoted slash  (or  all  characters,  if
       there  is  no unquoted slash) are considered a tilde-prefix.  If none of
       the characters in the tilde-prefix are quoted,  the  characters  in  the
       tilde-prefix  following  the tilde are treated as a possible login name.
       If this login name is the null string, the tilde is  replaced  with  the
       value of the shell parameter HOME.  If HOME is unset, the home directory
       of the user executing the shell is substituted instead.  Otherwise,  the
       tilde-prefix  is  replaced  with  the home directory associated with the
       specified login name.18/6591 26% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1619/6591 26% (press h for help or q to quit)
       If the tilde-prefix is a `~+', the value of the shell variable  PWD  re‐
       places  the  tilde-prefix.   If the tilde-prefix is a `~-', the value of
       the shell variable OLDPWD, if it is set, is substituted.  If the charac‐
       ters  following the tilde in the tilde-prefix consist of a number N, op‐
       tionally prefixed by a `+' or a `-', the tilde-prefix is  replaced  with
       the  corresponding element from the directory stack, as it would be dis‐
       played by the dirs builtin invoked with the tilde-prefix as an argument.
       If  the  characters following the tilde in the tilde-prefix consist of a
       number without a leading `+' or `-', `+' is assumed.r q to quit)
M   Tilde Expansion) line 1629/6591 26% (press h for help or q to quit)
       number without a leading `+' or `-', `+' is assumed.r q to quit)
 ESESCOBpage bash(1) line 1629/6591 26% (press h for help or q to quit)
       If the login name is invalid, or the tilde expansion fails, the word  is
       unchanged.(1) line 1631/6591 26% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1632/6591 26% (press h for help or q to quit)
       Each  variable assignment is checked for unquoted tilde-prefixes immedi‐
       ately following a : or the first =.  In these cases, tilde expansion  is
       also  performed.  Consequently, one may use filenames with tildes in as‐
       signments to PATH, MAILPATH, and CDPATH, and the shell assigns  the  ex‐
       panded value. line 1637/6591 26% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1638/6591 26% (press h for help or q to quit)
       Bash also performs tilde expansion on words satisfying the conditions of
       variable assignments (as described above under PARAMETERS) when they ap‐
       pear as arguments to simple commands.  Bash does not do this, except for
       the declaration commands listed above, when in posix mode. quit)
 ESESCOBpage bash(1) line 1643/6591 26% (press h for help or q to quit)
   Parameter Expansionine 1644/6591 26% (press h for help or q to quit)
       The `$' character introduces parameter expansion, command  substitution,
       or  arithmetic  expansion.   The parameter name or symbol to be expanded
       may be enclosed in braces, which are optional but serve to  protect  the
       variable  to  be expanded from characters immediately following it which
       could be interpreted as part of the name. for help or q to quit)
 ESESCOBpage bash(1) line 1650/6591 26% (press h for help or q to quit)
       When braces are used, the matching ending brace is the first `}' not es‐
       caped by a backslash or within a quoted string, and not within an embed‐
       ded arithmetic expansion, command substitution, or parameter expansion.
 ESESCOBpage bash(1) line 1654/6591 26% (press h for help or q to quit)
       ${parameter}) line 1655/6591 26% (press h for help or q to quit)
              The value of parameter is substituted.  The braces  are  required
              when  parameter  is  a  positional  parameter  with more than one
              digit, or when parameter is followed by a character which is  not
              to  be interpreted as part of its name.  The parameter is a shell
              parameter as described above PARAMETERS) or  an  array  reference
              (Arrays).ne 1661/6591 27% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1662/6591 27% (press h for help or q to quit)
       If the first character of parameter is an exclamation point (!), and pa‐
       rameter is not a nameref, it introduces a level  of  indirection.   Bash
       uses  the value formed by expanding the rest of parameter as the new pa‐
       rameter; this is then expanded and that value is used in the rest of the
       expansion, rather than the expansion of the original parameter.  This is
       known as indirect expansion.  The value is subject to  tilde  expansion,
       parameter expansion, command substitution, and arithmetic expansion.  If
       parameter is a nameref, this expands to the name of the parameter refer‐
       enced  by  parameter  instead of performing the complete indirect expan‐
       sion.  The exceptions to this are  the  expansions  of  ${!prefix*}  and
       ${!name[@]}  described  below.   The  exclamation point must immediately
       follow the left brace in order to introduce indirection.to quit)
 ESESCOBpage bash(1) line 1675/6591 27% (press h for help or q to quit)
       In each of the cases below, word is subject to tilde expansion,  parame‐
       ter expansion, command substitution, and arithmetic expansion.t)
 ESESCOBpage bash(1) line 1678/6591 27% (press h for help or q to quit)
       When  not performing substring expansion, using the forms documented be‐
       low (e.g., :-), bash tests for a parameter that is unset or null.  Omit‐
       ting the colon results in a test only for a parameter that is unset.
 ESESCOBpage bash(1) line 1682/6591 27% (press h for help or q to quit)
       ${parameter:-word} 1683/6591 27% (press h for help or q to quit)
              Use Default Values.  If parameter is unset or null, the expansion
              of word is substituted.  Otherwise, the  value  of  parameter  is
              substituted.1686/6591 27% (press h for help or q to quit)
       ${parameter:=word} 1687/6591 27% (press h for help or q to quit)
              Assign Default Values.  If parameter is unset or null, the expan‐
              sion of word is assigned to parameter.  The value of parameter is
              then  substituted.   Positional parameters and special parameters
              may not be assigned to in this way.for help or q to quit)
       ${parameter:?word} 1692/6591 27% (press h for help or q to quit)
              Display Error if Null or Unset.  If parameter is null  or  unset,
              the expansion of word (or a message to that effect if word is not
              present) is written to the standard error and the shell, if it is
              not  interactive,  exits.   Otherwise,  the value of parameter is
              substituted.1697/6591 27% (press h for help or q to quit)
       ${parameter:+word} 1698/6591 27% (press h for help or q to quit)
              Use Alternate Value.  If parameter is null or unset,  nothing  is
              substituted, otherwise the expansion of word is substituted.
       ${parameter:offset}1701/6591 27% (press h for help or q to quit)
       ${parameter:offset:length}91 27% (press h for help or q to quit)
              Substring  Expansion.   Expands to up to length characters of the
              value of parameter starting at the character specified by offset.
              If  parameter  is @ or *, an indexed array subscripted by @ or *,
              or an associative array name, the results differ as described be‐
              low.  If length is omitted, expands to the substring of the value
              of parameter starting at the character specified  by  offset  and
              extending  to the end of the value.  length and offset are arith‐
              metic expressions (see ARITHMETIC EVALUATION below).quit)
 ESESCOBpage bash(1) line 1711/6591 27% (press h for help or q to quit)
              If offset evaluates to a number less than zero, the value is used
              as  an  offset in characters from the end of the value of parame‐
              ter.  If length evaluates to a number less than zero, it  is  in‐
              terpreted as an offset in characters from the end of the value of
              parameter rather than a number of characters, and  the  expansion
              is  the  characters  between offset and that result.  Note that a
              negative offset must be separated from the colon by at least  one
              space to avoid being confused with the :- expansion.quit)
 ESESCOBpage bash(1) line 1720/6591 28% (press h for help or q to quit)
              If  parameter  is @ or *, the result is length positional parame‐
              ters beginning at offset.  A negative offset is taken relative to
              one  greater than the greatest positional parameter, so an offset
              of -1 evaluates to the last positional parameter.  It is  an  ex‐
              pansion error if length evaluates to a number less than zero.
 ESESCOBpage bash(1) line 1726/6591 28% (press h for help or q to quit)
              If  parameter is an indexed array name subscripted by @ or *, the
              result is the length members of the array beginning with ${param‐
              eter[offset]}.   A  negative  offset  is  taken  relative  to one
              greater than the maximum index of the specified array.  It is  an
              expansion error if length evaluates to a number less than zero.
 ESESCOBpage bash(1) line 1732/6591 28% (press h for help or q to quit)
              Substring  expansion applied to an associative array produces un‐
              defined results./6591 28% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1735/6591 28% (press h for help or q to quit)
              Substring indexing is zero-based unless the positional parameters
              are  used, in which case the indexing starts at 1 by default.  If
              offset is 0, and the positional parameters are used, $0  is  pre‐
              fixed to the list.591 28% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1740/6591 28% (press h for help or q to quit)
       ${!prefix*}1) line 1741/6591 28% (press h for help or q to quit)
       ${!prefix@}1) line 1742/6591 28% (press h for help or q to quit)
              Names  matching  prefix.  Expands to the names of variables whose
              names begin with prefix, separated by the first character of  the
              IFS  special  variable.  When @ is used and the expansion appears
              within double quotes, each variable name expands  to  a  separate
              word.) line 1747/6591 28% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1748/6591 28% (press h for help or q to quit)
       ${!name[@]}1) line 1749/6591 28% (press h for help or q to quit)
       ${!name[*]}1) line 1750/6591 28% (press h for help or q to quit)
              List of array keys.  If name is an array variable, expands to the
              list of array indices (keys) assigned in name.  If name is not an
              array, expands to 0 if name is set and null otherwise.  When @ is
              used and the expansion appears within double quotes, each key ex‐
              pands to a separate word. (press h for help or q to quit)
 ESESCOBpage bash(1) line 1756/6591 28% (press h for help or q to quit)
       ${#parameter} line 1757/6591 28% (press h for help or q to quit)
              Parameter  length.   The length in characters of the value of pa‐
              rameter is substituted.  If parameter is * or @, the  value  sub‐
              stituted is the number of positional parameters.  If parameter is
              an array name subscripted by * or @, the value substituted is the
              number  of elements in the array.  If parameter is an indexed ar‐
              ray name subscripted by a negative number, that number is  inter‐
              preted  as  relative to one greater than the maximum index of pa‐
              rameter, so negative indices count back from the end of  the  ar‐
              ray, and an index of -1 references the last element.quit)
 ESESCOBpage bash(1) line 1767/6591 28% (press h for help or q to quit)
       ${parameter#word}e 1768/6591 28% (press h for help or q to quit)
       ${parameter##word} 1769/6591 28% (press h for help or q to quit)
              Remove  matching prefix pattern.  The word is expanded to produce
              a pattern just as in pathname expansion, and matched against  the
              expanded  value of parameter using the rules described under Pat‐
              tern Matching below.  If the pattern matches the beginning of the
              value  of  parameter, then the result of the expansion is the ex‐
              panded value of parameter with the shortest matching pattern (the
              ``#''  case)  or  the  longest matching pattern (the ``##'' case)
              deleted.  If parameter is @ or *, the pattern  removal  operation
              is  applied  to each positional parameter in turn, and the expan‐
              sion is the resultant list.  If parameter is  an  array  variable
              subscripted with @ or *, the pattern removal operation is applied
              to each member of the array in turn, and the expansion is the re‐
              sultant list.782/6591 29% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1783/6591 29% (press h for help or q to quit)
       ${parameter%word}e 1784/6591 29% (press h for help or q to quit)
       ${parameter%%word} 1785/6591 29% (press h for help or q to quit)
              Remove  matching suffix pattern.  The word is expanded to produce
              a pattern just as in pathname expansion, and matched against  the
              expanded  value of parameter using the rules described under Pat‐
              tern Matching below.  If the pattern matches a  trailing  portion
              of the expanded value of parameter, then the result of the expan‐
              sion is the expanded value of parameter with the shortest  match‐
              ing pattern (the ``%'' case) or the longest matching pattern (the
              ``%%'' case) deleted.  If parameter is @ or *,  the  pattern  re‐
              moval  operation is applied to each positional parameter in turn,
              and the expansion is the resultant list.  If parameter is an  ar‐
              ray  variable subscripted with @ or *, the pattern removal opera‐
              tion is applied to each member of the array in turn, and the  ex‐
              pansion is the resultant list.ss h for help or q to quit)
 ESESCOBpage bash(1) line 1799/6591 29% (press h for help or q to quit)
       ${parameter/pattern/string}1 29% (press h for help or q to quit)
       ${parameter//pattern/string} 29% (press h for help or q to quit)
       ${parameter/#pattern/string} 29% (press h for help or q to quit)
       ${parameter/%pattern/string} 29% (press h for help or q to quit)
              Pattern  substitution.  The pattern is expanded to produce a pat‐
              tern just as in pathname expansion.  Parameter  is  expanded  and
              the  longest  match of pattern against its value is replaced with
              string.  string undergoes tilde expansion, parameter and variable
              expansion,  arithmetic  expansion,  command and process substitu‐
              tion, and quote removal.  The match is performed using the  rules
              described under Pattern Matching below.  In the first form above,
              only the first match is replaced.  If there are two slashes sepa‐
              rating parameter and pattern (the second form above), all matches
              of pattern are replaced with string.  If pattern is preceded by #
              (the third form above), it must match at the beginning of the ex‐
              panded value of parameter.  If pattern  is  preceded  by  %  (the
              fourth  form  above),  it  must  match at the end of the expanded
              value of parameter.  If the expansion of string is null,  matches
              of  pattern  are  deleted.  If string is null, matches of pattern
              are deleted and the / following pattern may be omitted.t)
 ESESCOBpage bash(1) line 1820/6591 29% (press h for help or q to quit)
              If the patsub_replacement shell option is  enabled  using  shopt,
              any  unquoted  instances  of  &  in  string are replaced with the
              matching portion of pattern.ress h for help or q to quit)
 ESESCOBpage bash(1) line 1824/6591 29% (press h for help or q to quit)
              Quoting any part of string inhibits replacement in the  expansion
              of  the  quoted  portion, including replacement strings stored in
              shell variables.  Backslash will escape & in  string;  the  back‐
              slash  is  removed in order to permit a literal & in the replace‐
              ment string.  Backslash can also be used to escape  a  backslash;
              \\  results  in  a  literal  backslash in the replacement.  Users
              should take care if string is double-quoted to avoid unwanted in‐
              teractions  between the backslash and double-quoting, since back‐
              slash has special meaning within double quotes.  Pattern  substi‐
              tution  performs the check for unquoted & after expanding string;
              shell programmers should quote any occurrences of & they want  to
              be taken literally in the replacement and ensure any instances of
              & they want to be replaced are unquoted.elp or q to quit)
 ESESCOBpage bash(1) line 1838/6591 30% (press h for help or q to quit)
              If the nocasematch shell option is enabled,  the  match  is  per‐
              formed  without  regard to the case of alphabetic characters.  If
              parameter is @ or *, the substitution  operation  is  applied  to
              each  positional  parameter in turn, and the expansion is the re‐
              sultant list.  If parameter is an array variable subscripted with
              @  or  *, the substitution operation is applied to each member of
              the array in turn, and the expansion is the resultant list.
 ESESCOBpage bash(1) line 1846/6591 30% (press h for help or q to quit)
       ${parameter^pattern}847/6591 30% (press h for help or q to quit)
       ${parameter^^pattern}48/6591 30% (press h for help or q to quit)
       ${parameter,pattern}849/6591 30% (press h for help or q to quit)
       ${parameter,,pattern}50/6591 30% (press h for help or q to quit)
              Case modification.  This expansion modifies the  case  of  alpha‐
              betic  characters  in parameter.  The pattern is expanded to pro‐
              duce a pattern just as in pathname expansion.  Each character  in
              the  expanded  value of parameter is tested against pattern, and,
              if it matches the pattern, its case is  converted.   The  pattern
              should not attempt to match more than one character.  The ^ oper‐
              ator converts lowercase letters matching  pattern  to  uppercase;
              the  , operator converts matching uppercase letters to lowercase.
              The ^^ and ,, expansions convert each matched  character  in  the
              expanded value; the ^ and , expansions match and convert only the
              first character in the expanded value.  If pattern is omitted, it
              is treated like a ?, which matches every character.  If parameter
              is @ or *, the case modification operation is applied to each po‐
              sitional  parameter  in  turn, and the expansion is the resultant
              list.  If parameter is an array variable subscripted with @ or *,
              the  case modification operation is applied to each member of the
              array in turn, and the expansion is the resultant list.t)
 ESESCOBpage bash(1) line 1868/6591 30% (press h for help or q to quit)
       ${parameter@operator}69/6591 30% (press h for help or q to quit)
              Parameter transformation.  The expansion is either a  transforma‐
              tion of the value of parameter or information about parameter it‐
              self, depending on the value of operator.   Each  operator  is  a
              single letter:73/6591 30% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1874/6591 30% (press h for help or q to quit)
              U      The  expansion  is a string that is the value of parameter
                     with lowercase alphabetic characters converted  to  upper‐
                     case.1877/6591 30% (press h for help or q to quit)
              u      The  expansion  is a string that is the value of parameter
                     with the first character converted to uppercase, if it  is
                     alphabetic.591 30% (press h for help or q to quit)
              L      The  expansion  is a string that is the value of parameter
                     with uppercase alphabetic characters converted  to  lower‐
                     case.1883/6591 30% (press h for help or q to quit)
              Q      The  expansion  is a string that is the value of parameter
                     quoted in a format that can be reused as input.it)
              E      The expansion is a string that is the value  of  parameter
                     with  backslash  escape  sequences  expanded  as  with the
                     $'...' quoting mechanism. h for help or q to quit)
              P      The expansion is a string that is the result of  expanding
                     the  value of parameter as if it were a prompt string (see
                     PROMPTING below).% (press h for help or q to quit)
              A      The expansion is a string in the  form  of  an  assignment
                     statement  or  declare  command  that,  if evaluated, will
                     recreate parameter with its attributes and value.)
              K      Produces a possibly-quoted version of the value of parame‐
                     ter, except that it prints the values of indexed and asso‐
                     ciative arrays as a sequence  of  quoted  key-value  pairs
                     (see Arrays above).(press h for help or q to quit)
              a      The expansion is a string consisting of flag values repre‐
                     senting parameter's attributes. help or q to quit)
              k      Like the K transformation, but expands the keys and values
                     of  indexed and associative arrays to separate words after
                     word splitting.31% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1904/6591 31% (press h for help or q to quit)
              If parameter is @ or *, the operation is applied  to  each  posi‐
              tional  parameter  in  turn,  and  the expansion is the resultant
              list.  If parameter is an array variable subscripted with @ or *,
              the operation is applied to each member of the array in turn, and
              the expansion is the resultant list.or help or q to quit)
 ESESCOBpage bash(1) line 1910/6591 31% (press h for help or q to quit)
              The result of the expansion is  subject  to  word  splitting  and
              pathname expansion as described below. help or q to quit)
 ESESCOBpage bash(1) line 1913/6591 31% (press h for help or q to quit)
   Command Substitutionne 1914/6591 31% (press h for help or q to quit)
       Command  substitution allows the output of a command to replace the com‐
       mand name.  There are two forms: (press h for help or q to quit)
 ESESCOBpage bash(1) line 1917/6591 31% (press h for help or q to quit)
              $(command)e 1918/6591 31% (press h for help or q to quit)
       orage bash(1) line 1919/6591 31% (press h for help or q to quit)
              `command`ne 1920/6591 31% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1921/6591 31% (press h for help or q to quit)
       Bash performs the expansion by executing command in a subshell  environ‐
       ment  and replacing the command substitution with the standard output of
       the command, with any trailing newlines deleted.  Embedded newlines  are
       not deleted, but they may be removed during word splitting.  The command
       substitution $(cat file) can be replaced by the  equivalent  but  faster
       $(< file).(1) line 1927/6591 31% (press h for help or q to quit)
 ESESCOBpage bash(1) line 1928/6591 31% (press h for help or q to quit)
       When the old-style backquote form of substitution is used, backslash re‐
       tains its literal meaning except when followed by $, `, or \.  The first
       backquote  not  preceded by a backslash terminates the command substitu‐
       tion.  When using the $(command) form, all characters between the paren‐
       theses make up the command; none are treated specially. to quit)
 ESESCOBpage bash(1) line 1934/6591 31% (press h for help or q to quit)
       Command  substitutions may be nested.  To nest when using the backquoted
M       Command  substitution allows the output of a command to replace the com‐
M   Command Substitutione 1935/6591 31% (press h for help or q to quit)
MESESCOApage bash(1) line 1934/6591 31% (press h for help or q to quit)
       theses make up the command; none are treated specially. to quit)
>ITINF25/lektion6(1) line 1934/6591 31% (press h for help or q to quit)
$ ITINF25/lektion6
$ echo $(ls /etc













adduser.conf adjtime aliases alsa alternatives anacrontab apache2 apg.conf apparmor apparmor.d appstream.conf apt avahi bash.bashrc bash_completion bash_completion.d bindresvport.blacklist binfmt.d bluetooth bogofilter.cf ca-certificates ca-certificates.conf ca-certificates.conf.dpkg-old catdocrc chatscripts chromium cni console-setup containerd containers cracklib cron.d cron.daily cron.hourly cron.monthly crontab cron.weekly cron.yearly cryptsetup-initramfs crypttab cups cupshelpers dbus-1 dconf debconf.conf debian_version debsig debuginfod default deluser.conf dhcp dictionaries-common discover.conf.d discover-modprobe.conf docker dpkg dput.cf e2scrub.conf elinks emacs email-addresses environment environment.d ethertypes exim4 exports firefox-esr fish fonts fstab fstab.bak fuse.conf fwupd gai.conf gconf gdb gdm3 geoclue ghostscript gimp glvnd gnome gnome-chess GNUstep gprofng.rc groff group group- grub.d gshadow gshadow- gss gtk-2.0 gtk-3.0 host.conf hostname hosts hosts.allow hosts.deny idmapd.conf ifplugd igfx_user_feature_next.txt igfx_user_feature.txt ImageMagick-6 init.d initramfs-tools inputrc insserv.conf.d ipp-usb iproute2 issue issue.net java java-17-openjdk kernel kernel-img.conf keyutils ldap ld.so.cache ld.so.conf ld.so.conf.d libao.conf libaudit.conf libblockdev libguestfs-tools.conf libibverbs.d libnl-3 libpaper.d libreoffice libvirt lightdm lighttpd locale.alias locale.gen localtime logcheck login.defs logrotate.conf logrotate.d lvm lynx machine-id magic magic.mime mailcap mailcap.order mailname mail.rc manpath.config maven mdadm mdevctl.d mime.types mke2fs.conf ModemManager modprobe.d modules modules-load.d motd mtab mtools.conf mysql nanorc netconfig network NetworkManager networks nfs.conf nfs.conf.d nftables.conf nsswitch.conf ODBCDataSources odbc.ini odbcinst.ini openal openni2 opt os-release PackageKit pam.conf pam.d papersize passwd passwd- perl pki plymouth polkit-1 popularity-contest.conf ppp printcap profile profile.d protocols pulse python3 python3.11 qemu-ifdown qemu-ifup rc0.d rc1.d rc2.d rc3.d rc4.d rc5.d rc6.d rcS.d reportbug.conf request-key.conf request-key.d resolv.conf rmt rpc runit rygel.conf sane.d sasl2 security selinux sensors3.conf sensors.d services sgml shadow shadow- shells signon-ui skel smartd.conf smartmontools snmp speech-dispatcher ssh ssl subgid subgid- subuid subuid- sudo.conf sudoers sudoers.d sudo_logsrvd.conf sv swtpm-localca.conf swtpm-localca.options swtpm_setup.conf sysctl.conf sysctl.d sysstat systemd terminfo texmf timezone timidity tmpfiles.d ucf.conf udev udisks2 ufw updatedb.conf update-motd.d UPower usb_modeswitch.conf usb_modeswitch.d vbox vdpau_wrapper.cfg vim virt-builder vulkan w3m wgetrc wpa_supplicant X11 xattr.conf xdg xfce4 xml zsh
ITINF25/lektion6
$ echo $(ls /etc)"ITINF25/lektion6
$ echo "$(ls /etc)





adduser.conf
adjtime
aliases
alsa
alternatives
anacrontab
apache2
apg.conf
apparmor
apparmor.d
appstream.conf
apt
avahi
bash.bashrc
bash_completion
bash_completion.d
bindresvport.blacklist
binfmt.d
bluetooth
bogofilter.cf
ca-certificates
ca-certificates.conf
ca-certificates.conf.dpkg-old
catdocrc
chatscripts
chromium
cni
console-setup
containerd
containers
cracklib
cron.d
cron.daily
cron.hourly
cron.monthly
crontab
cron.weekly
cron.yearly
cryptsetup-initramfs
crypttab
cups
cupshelpers
dbus-1
dconf
debconf.conf
debian_version
debsig
debuginfod
default
deluser.conf
dhcp
dictionaries-common
discover.conf.d
discover-modprobe.conf
docker
dpkg
dput.cf
e2scrub.conf
elinks
emacs
email-addresses
environment
environment.d
ethertypes
exim4
exports
firefox-esr
fish
fonts
fstab
fstab.bak
fuse.conf
fwupd
gai.conf
gconf
gdb
gdm3
geoclue
ghostscript
gimp
glvnd
gnome
gnome-chess
GNUstep
gprofng.rc
groff
group
group-
grub.d
gshadow
gshadow-
gss
gtk-2.0
gtk-3.0
host.conf
hostname
hosts
hosts.allow
hosts.deny
idmapd.conf
ifplugd
igfx_user_feature_next.txt
igfx_user_feature.txt
ImageMagick-6
init.d
initramfs-tools
inputrc
insserv.conf.d
ipp-usb
iproute2
issue
issue.net
java
java-17-openjdk
kernel
kernel-img.conf
keyutils
ldap
ld.so.cache
ld.so.conf
ld.so.conf.d
libao.conf
libaudit.conf
libblockdev
libguestfs-tools.conf
libibverbs.d
libnl-3
libpaper.d
libreoffice
libvirt
lightdm
lighttpd
locale.alias
locale.gen
localtime
logcheck
login.defs
logrotate.conf
logrotate.d
lvm
lynx
machine-id
magic
magic.mime
mailcap
mailcap.order
mailname
mail.rc
manpath.config
maven
mdadm
mdevctl.d
mime.types
mke2fs.conf
ModemManager
modprobe.d
modules
modules-load.d
motd
mtab
mtools.conf
mysql
nanorc
netconfig
network
NetworkManager
networks
nfs.conf
nfs.conf.d
nftables.conf
nsswitch.conf
ODBCDataSources
odbc.ini
odbcinst.ini
openal
openni2
opt
os-release
PackageKit
pam.conf
pam.d
papersize
passwd
passwd-
perl
pki
plymouth
polkit-1
popularity-contest.conf
ppp
printcap
profile
profile.d
protocols
pulse
python3
python3.11
qemu-ifdown
qemu-ifup
rc0.d
rc1.d
rc2.d
rc3.d
rc4.d
rc5.d
rc6.d
rcS.d
reportbug.conf
request-key.conf
request-key.d
resolv.conf
rmt
rpc
runit
rygel.conf
sane.d
sasl2
security
selinux
sensors3.conf
sensors.d
services
sgml
shadow
shadow-
shells
signon-ui
skel
smartd.conf
smartmontools
snmp
speech-dispatcher
ssh
ssl
subgid
subgid-
subuid
subuid-
sudo.conf
sudoers
sudoers.d
sudo_logsrvd.conf
sv
swtpm-localca.conf
swtpm-localca.options
swtpm_setup.conf
sysctl.conf
sysctl.d
sysstat
systemd
terminfo
texmf
timezone
timidity
tmpfiles.d
ucf.conf
udev
udisks2
ufw
updatedb.conf
update-motd.d
UPower
usb_modeswitch.conf
usb_modeswitch.d
vbox
vdpau_wrapper.cfg
vim
virt-builder
vulkan
w3m
wgetrc
wpa_supplicant
X11
xattr.conf
xdg
xfce4
xml
zsh
ITINF25/lektion6
$ echo "$(ls /etc)"ITINF25/lektion6
$ echo "$(ls /etc)











 
adduser.conf
adjtime
aliases
alsa
alternatives
anacrontab
apache2
apg.conf
apparmor
apparmor.d
appstream.conf
apt
avahi
bash.bashrc
bash_completion
bash_completion.d
bindresvport.blacklist
binfmt.d
bluetooth
bogofilter.cf
ca-certificates
ca-certificates.conf
ca-certificates.conf.dpkg-old
catdocrc
chatscripts
chromium
cni
console-setup
containerd
containers
cracklib
cron.d
cron.daily
cron.hourly
cron.monthly
crontab
cron.weekly
cron.yearly
cryptsetup-initramfs
crypttab
cups
cupshelpers
dbus-1
dconf
debconf.conf
debian_version
debsig
debuginfod
default
deluser.conf
dhcp
dictionaries-common
discover.conf.d
discover-modprobe.conf
docker
dpkg
dput.cf
e2scrub.conf
elinks
emacs
email-addresses
environment
environment.d
ethertypes
exim4
exports
firefox-esr
fish
fonts
fstab
fstab.bak
fuse.conf
fwupd
gai.conf
gconf
gdb
gdm3
geoclue
ghostscript
gimp
glvnd
gnome
gnome-chess
GNUstep
gprofng.rc
groff
group
group-
grub.d
gshadow
gshadow-
gss
gtk-2.0
gtk-3.0
host.conf
hostname
hosts
hosts.allow
hosts.deny
idmapd.conf
ifplugd
igfx_user_feature_next.txt
igfx_user_feature.txt
ImageMagick-6
init.d
initramfs-tools
inputrc
insserv.conf.d
ipp-usb
iproute2
issue
issue.net
java
java-17-openjdk
kernel
kernel-img.conf
keyutils
ldap
ld.so.cache
ld.so.conf
ld.so.conf.d
libao.conf
libaudit.conf
libblockdev
libguestfs-tools.conf
libibverbs.d
libnl-3
libpaper.d
libreoffice
libvirt
lightdm
lighttpd
locale.alias
locale.gen
localtime
logcheck
login.defs
logrotate.conf
logrotate.d
lvm
lynx
machine-id
magic
magic.mime
mailcap
mailcap.order
mailname
mail.rc
manpath.config
maven
mdadm
mdevctl.d
mime.types
mke2fs.conf
ModemManager
modprobe.d
modules
modules-load.d
motd
mtab
mtools.conf
mysql
nanorc
netconfig
network
NetworkManager
networks
nfs.conf
nfs.conf.d
nftables.conf
nsswitch.conf
ODBCDataSources
odbc.ini
odbcinst.ini
openal
openni2
opt
os-release
PackageKit
pam.conf
pam.d
papersize
passwd
passwd-
perl
pki
plymouth
polkit-1
popularity-contest.conf
ppp
printcap
profile
profile.d
protocols
pulse
python3
python3.11
qemu-ifdown
qemu-ifup
rc0.d
rc1.d
rc2.d
rc3.d
rc4.d
rc5.d
rc6.d
rcS.d
reportbug.conf
request-key.conf
request-key.d
resolv.conf
rmt
rpc
runit
rygel.conf
sane.d
sasl2
security
selinux
sensors3.conf
sensors.d
services
sgml
shadow
shadow-
shells
signon-ui
skel
smartd.conf
smartmontools
snmp
speech-dispatcher
ssh
ssl
subgid
subgid-
subuid
subuid-
sudo.conf
sudoers
sudoers.d
sudo_logsrvd.conf
sv
swtpm-localca.conf
swtpm-localca.options
swtpm_setup.conf
sysctl.conf
sysctl.d
sysstat
systemd
terminfo
texmf
timezone
timidity
tmpfiles.d
ucf.conf
udev
udisks2
ufw
updatedb.conf
update-motd.d
UPower
usb_modeswitch.conf
usb_modeswitch.d
vbox
vdpau_wrapper.cfg
vim
virt-builder
vulkan
w3m
wgetrc
wpa_supplicant
X11
xattr.conf
xdg
xfce4
xml
zsh
ITINF25/lektion6
$ ITINF25/lektion6
$ echo "$(ls /etc)"















lsoutput=





ITINF25/lektion6
$ echecho "$lsopuutput"
adduser.conf
adjtime
aliases
alsa
alternatives
anacrontab
apache2
apg.conf
apparmor
apparmor.d
appstream.conf
apt
avahi
bash.bashrc
bash_completion
bash_completion.d
bindresvport.blacklist
binfmt.d
bluetooth
bogofilter.cf
ca-certificates
ca-certificates.conf
ca-certificates.conf.dpkg-old
catdocrc
chatscripts
chromium
cni
console-setup
containerd
containers
cracklib
cron.d
cron.daily
cron.hourly
cron.monthly
crontab
cron.weekly
cron.yearly
cryptsetup-initramfs
crypttab
cups
cupshelpers
dbus-1
dconf
debconf.conf
debian_version
debsig
debuginfod
default
deluser.conf
dhcp
dictionaries-common
discover.conf.d
discover-modprobe.conf
docker
dpkg
dput.cf
e2scrub.conf
elinks
emacs
email-addresses
environment
environment.d
ethertypes
exim4
exports
firefox-esr
fish
fonts
fstab
fstab.bak
fuse.conf
fwupd
gai.conf
gconf
gdb
gdm3
geoclue
ghostscript
gimp
glvnd
gnome
gnome-chess
GNUstep
gprofng.rc
groff
group
group-
grub.d
gshadow
gshadow-
gss
gtk-2.0
gtk-3.0
host.conf
hostname
hosts
hosts.allow
hosts.deny
idmapd.conf
ifplugd
igfx_user_feature_next.txt
igfx_user_feature.txt
ImageMagick-6
init.d
initramfs-tools
inputrc
insserv.conf.d
ipp-usb
iproute2
issue
issue.net
java
java-17-openjdk
kernel
kernel-img.conf
keyutils
ldap
ld.so.cache
ld.so.conf
ld.so.conf.d
libao.conf
libaudit.conf
libblockdev
libguestfs-tools.conf
libibverbs.d
libnl-3
libpaper.d
libreoffice
libvirt
lightdm
lighttpd
locale.alias
locale.gen
localtime
logcheck
login.defs
logrotate.conf
logrotate.d
lvm
lynx
machine-id
magic
magic.mime
mailcap
mailcap.order
mailname
mail.rc
manpath.config
maven
mdadm
mdevctl.d
mime.types
mke2fs.conf
ModemManager
modprobe.d
modules
modules-load.d
motd
mtab
mtools.conf
mysql
nanorc
netconfig
network
NetworkManager
networks
nfs.conf
nfs.conf.d
nftables.conf
nsswitch.conf
ODBCDataSources
odbc.ini
odbcinst.ini
openal
openni2
opt
os-release
PackageKit
pam.conf
pam.d
papersize
passwd
passwd-
perl
pki
plymouth
polkit-1
popularity-contest.conf
ppp
printcap
profile
profile.d
protocols
pulse
python3
python3.11
qemu-ifdown
qemu-ifup
rc0.d
rc1.d
rc2.d
rc3.d
rc4.d
rc5.d
rc6.d
rcS.d
reportbug.conf
request-key.conf
request-key.d
resolv.conf
rmt
rpc
runit
rygel.conf
sane.d
sasl2
security
selinux
sensors3.conf
sensors.d
services
sgml
shadow
shadow-
shells
signon-ui
skel
smartd.conf
smartmontools
snmp
speech-dispatcher
ssh
ssl
subgid
subgid-
subuid
subuid-
sudo.conf
sudoers
sudoers.d
sudo_logsrvd.conf
sv
swtpm-localca.conf
swtpm-localca.options
swtpm_setup.conf
sysctl.conf
sysctl.d
sysstat
systemd
terminfo
texmf
timezone
timidity
tmpfiles.d
ucf.conf
udev
udisks2
ufw
updatedb.conf
update-motd.d
UPower
usb_modeswitch.conf
usb_modeswitch.d
vbox
vdpau_wrapper.cfg
vim
virt-builder
vulkan
w3m
wgetrc
wpa_supplicant
X11
xattr.conf
xdg
xfce4
xml
zsh
ITINF25/lektion6
$ ITINF25/lektion6
$ ls
återblick_lektion5.txt	namninput_kopia2.txt  sant
falskt			namninput_kopia.txt   skostorlek.txt
for			namninput.txt	      skript.sh
for-in			radfil.txt	      slumpfil.txt
hejfil.txt		read1		      stderr_felmeddelande.txt
indikatorfil		read3lines	      tomfil.txt
indikatorfil2		readalllines	      while
lsfil.txt		recordings
ITINF25/lektion6
$ touch fil1 fil2
ITINF25/lektion6
$ touch fil1 filfil2"
ITINF25/lektion6
$ touch "fil1 fil2ITINF25/lektion6
$ "fil1 fil2F=







ITINF25/lektion6
$ rm $ $- $v $


removed 'fil1'
removed 'fil2'
ITINF25/lektion6
$ rm -v $F"$F
removed 'fil1 fil2'
ITINF25/lektion6
$ ITINF25/lektion6
$ C="ls -l"
ITINF25/lektion6
$ $C
total 84
-rw-r--r-- 1 kent kent 2125 Sep 25 09:34 återblick_lektion5.txt
-rwxr-xr-x 1 kent kent   20 Sep 25 12:51 falskt
-rwxr-xr-x 1 kent kent  139 Sep 25 13:42 for
-rwxr-xr-x 1 kent kent   55 Sep 25 13:30 for-in
-rw-r--r-- 1 kent kent    4 Sep 25 10:21 hejfil.txt
-rw-r--r-- 1 kent kent    0 Sep 25 13:02 indikatorfil
-rw-r--r-- 1 kent kent    1 Sep 25 13:58 indikatorfil2
-rw-r--r-- 1 kent kent  157 Sep 25 10:56 lsfil.txt
-rw-r--r-- 1 kent kent    4 Sep 25 10:50 namninput_kopia2.txt
-rw-r--r-- 1 kent kent    4 Sep 25 10:50 namninput_kopia.txt
-rw-r--r-- 1 kent kent   12 Sep 25 10:28 namninput.txt
-rw-r--r-- 1 kent kent   35 Sep 25 10:23 radfil.txt
-rwxr-xr-x 1 kent kent  134 Sep 25 14:05 read1
-rwxr-xr-x 1 kent kent  191 Sep 25 14:21 read3lines
-rwxr-xr-x 1 kent kent   84 Sep 25 14:26 readalllines
drwxr-xr-x 2 kent kent 4096 Sep 25 14:32 recordings
-rwxr-xr-x 1 kent kent   20 Sep 25 12:53 sant
-rw-r--r-- 1 kent kent    3 Sep 25 10:59 skostorlek.txt
-rw-r--r-- 1 kent kent   68 Sep 25 12:35 skript.sh
-rw-r--r-- 1 kent kent   18 Sep 25 11:05 slumpfil.txt
-rw-r--r-- 1 kent kent   16 Sep 25 10:37 stderr_felmeddelande.txt
-rw-r--r-- 1 kent kent    0 Sep 25 10:20 tomfil.txt
-rwxr-xr-x 1 kent kent   99 Sep 25 13:57 while
ITINF25/lektion6
$ $CITINF25/lektion6
$ $C="ls -l"
ITINF25/lektion6
$CC="ls -l"
"$C

bash: ls -l: command not found
ITINF25/lektion6
$ IF
$IF









$C
total 84
-rw-r--r-- 1 kent kent 2125 Sep 25 09:34 återblick_lektion5.txt
-rwxr-xr-x 1 kent kent   20 Sep 25 12:51 falskt
-rwxr-xr-x 1 kent kent  139 Sep 25 13:42 for
-rwxr-xr-x 1 kent kent   55 Sep 25 13:30 for-in
-rw-r--r-- 1 kent kent    4 Sep 25 10:21 hejfil.txt
-rw-r--r-- 1 kent kent    0 Sep 25 13:02 indikatorfil
-rw-r--r-- 1 kent kent    1 Sep 25 13:58 indikatorfil2
-rw-r--r-- 1 kent kent  157 Sep 25 10:56 lsfil.txt
-rw-r--r-- 1 kent kent    4 Sep 25 10:50 namninput_kopia2.txt
-rw-r--r-- 1 kent kent    4 Sep 25 10:50 namninput_kopia.txt
-rw-r--r-- 1 kent kent   12 Sep 25 10:28 namninput.txt
-rw-r--r-- 1 kent kent   35 Sep 25 10:23 radfil.txt
-rwxr-xr-x 1 kent kent  134 Sep 25 14:05 read1
-rwxr-xr-x 1 kent kent  191 Sep 25 14:21 read3lines
-rwxr-xr-x 1 kent kent   84 Sep 25 14:26 readalllines
drwxr-xr-x 2 kent kent 4096 Sep 25 14:32 recordings
-rwxr-xr-x 1 kent kent   20 Sep 25 12:53 sant
-rw-r--r-- 1 kent kent    3 Sep 25 10:59 skostorlek.txt
-rw-r--r-- 1 kent kent   68 Sep 25 12:35 skript.sh
-rw-r--r-- 1 kent kent   18 Sep 25 11:05 slumpfil.txt
-rw-r--r-- 1 kent kent   16 Sep 25 10:37 stderr_felmeddelande.txt
-rw-r--r-- 1 kent kent    0 Sep 25 10:20 tomfil.txt
-rwxr-xr-x 1 kent kent   99 Sep 25 13:57 while
ITINF25/lektion6
$ ITINF25/lektion6
$ ls
återblick_lektion5.txt	namninput_kopia2.txt  sant
falskt			namninput_kopia.txt   skostorlek.txt
for			namninput.txt	      skript.sh
for-in			radfil.txt	      slumpfil.txt
hejfil.txt		read1		      stderr_felmeddelande.txt
indikatorfil		read3lines	      tomfil.txt
indikatorfil2		readalllines	      while
lsfil.txt		recordings
ITINF25/lektion6
$ ITINF25/lektion6
$ "$BIL





h"$BILo"$BIL "$BIL

ITINF25/lektion6
$ echo "$BIL'HEjsaejsan $x

Hejsan $x
ITINF25/lektion6
$ ITINF25/lektion6
$ man bash
BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

BASH(1)                     General Commands Manual                     BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash is an sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash  also  incorpo‐
       rates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be  a conformant implementation of the Shell and
       Utilities  portion  of  the  IEEE  POSIX  specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

...skipping...
   Pathname Expansion
       After word splitting, unless the -f option has been set, bash scans each
       word for the characters *, ?, and [.  If one  of  these  characters  ap‐
       pears,  and  is  not quoted, then the word is regarded as a pattern, and
       replaced with an alphabetically sorted list of  filenames  matching  the
       pattern  (see  Pattern  Matching  below).   If no matching filenames are
       found, and the shell option nullglob is not enabled, the  word  is  left
       unchanged.  If the nullglob option is set, and no matches are found, the
       word is removed.  If the failglob shell option is set,  and  no  matches
       are  found, an error message is printed and the command is not executed.
       If the shell option nocaseglob is enabled, the match is performed  with‐
       out  regard  to the case of alphabetic characters.  Note that when using
       range expressions like [a-z] (see below), letters of the other case  may
       be  included, depending on the setting of LC_COLLATE.  When a pattern is
       used for pathname expansion, the character ``.''  at the start of a name
       or  immediately following a slash must be matched explicitly, unless the
       shell option dotglob is set.  In order to match the filenames ``.''  and
       ``..'', the pattern must begin with ``.'' (for example, ``.?''), even if
       dotglob is set.  If the globskipdots shell option is enabled, the  file‐
       names  ``.''   and ``..''  are never matched, even if the pattern begins
       with a ``.''.  When not matching pathnames, the ``.''  character is  not
       treated  specially.   When matching a pathname, the slash character must
       always be matched explicitly by a slash in the  pattern,  but  in  other
       matching  contexts  it  can be matched by a special pattern character as
       described below under Pattern Matching.  See the  description  of  shopt
       below  under SHELL BUILTIN COMMANDS for a description of the nocaseglob,
       nullglob, globskipdots, failglob, and dotglob shell options.
 ESESCOBpage bash(1) line 2035 (press h for help or q to quit)
       The GLOBIGNORE shell variable may be used to restrict the  set  of  file
       names matching a pattern.  If GLOBIGNORE is set, each matching file name
       that also matches one of the patterns in GLOBIGNORE is removed from  the
       list  of matches.  If the nocaseglob option is set, the matching against
       the patterns in GLOBIGNORE is performed without  regard  to  case.   The
       filenames  ``.''   and ``..''  are always ignored when GLOBIGNORE is set
       and not null.  However, setting GLOBIGNORE to a non-null value  has  the
       effect  of enabling the dotglob shell option, so all other filenames be‐
       ginning with a ``.''  will match.  To get the old behavior  of  ignoring
       filenames  beginning  with  a ``.'', make ``.*''  one of the patterns in
       GLOBIGNORE.  The dotglob option is disabled when  GLOBIGNORE  is  unset.
       The pattern matching honors the setting of the extglob shell option.
 ESESCOBpage bash(1) line 2048 (press h for help or q to quit)
       Pattern Matchingne 2049 (press h for help or q to quit)
 ESESCOBpage bash(1) line 2050 (press h for help or q to quit)
       Any  character that appears in a pattern, other than the special pattern
       characters described below, matches itself.  The NUL character  may  not
       occur  in  a  pattern.  A backslash escapes the following character; the
       escaping backslash is discarded  when  matching.   The  special  pattern
       characters must be quoted if they are to be matched literally.
 ESESCOBpage bash(1) line 2056 (press h for help or q to quit)
       The special pattern characters have the following meanings:
 ESESCOBpage bash(1) line 2058 (press h for help or q to quit)
              *      Matches  any  string, including the null string.  When the
                     globstar shell option is enabled, and * is used in a path‐
                     name  expansion  context, two adjacent *s used as a single
                     pattern will match all files and zero or more  directories
                     and  subdirectories.   If followed by a /, two adjacent *s
                     will match only directories and subdirectories.
              ?      Matches any single character.r q to quit)
              [...]  Matches any one of the enclosed  characters.   A  pair  of
                     characters  separated  by a hyphen denotes a range expres‐
                     sion; any character that falls between those  two  charac‐
                     ters,  inclusive, using the current locale's collating se‐
                     quence and character set, is matched.  If the first  char‐
                     acter  following  the  [ is a !  or a ^ then any character
                     not enclosed is matched.  The sorting order of  characters
                     in  range  expressions, and the characters included in the
                     range, are determined by the current locale and the values
                     of  the  LC_COLLATE or LC_ALL shell variables, if set.  To
                     obtain the traditional  interpretation  of  range  expres‐
                     sions,  where  [a-d] is equivalent to [abcd], set value of
                     the LC_ALL shell variable to C, or  enable  the  globasci‐
                     iranges  shell option.  A - may be matched by including it
                     as the first or last character in the set.   A  ]  may  be
                     matched by including it as the first character in the set.
 ESESCOBpage bash(1) line 2082 (press h for help or q to quit)
                     Within  [  and ], character classes can be specified using
                     the syntax [:class:], where class is one of the  following
                     classes defined in the POSIX standard:it)
                     alnum  alpha  ascii  blank  cntrl  digit graph lower print
                     punct space upper word xdigitr q to quit)
                     A character class matches any character belonging to  that
                     class.   The word character class matches letters, digits,
                     and the character _.or help or q to quit)
 ESESCOBpage bash(1) line 2091 (press h for help or q to quit)
                     Within [ and ], an equivalence class can be specified  us‐
                     ing  the  syntax  [=c=], which matches all characters with
                     the same collation weight (as defined by the  current  lo‐
                     cale) as the character c.lp or q to quit)
 ESESCOBpage bash(1) line 2096 (press h for help or q to quit)
                     Within  [ and ], the syntax [.symbol.] matches the collat‐
                     ing symbol symbol. for help or q to quit)
 ESESCOBpage bash(1) line 2099 (press h for help or q to quit)
       If the extglob shell option is enabled  using  the  shopt  builtin,  the
       shell  recognizes  several  extended pattern matching operators.  In the
       following description, a pattern-list is a list of one or more  patterns
       separated by a |.  Composite patterns may be formed using one or more of
       the following sub-patterns:ess h for help or q to quit)
 ESESCOBpage bash(1) line 2105 (press h for help or q to quit)
              ?(pattern-list)6 (press h for help or q to quit)
                     Matches zero or one occurrence of the given patterns
              *(pattern-list)8 (press h for help or q to quit)
                     Matches zero or more occurrences of the given patterns
              +(pattern-list)0 (press h for help or q to quit)
                     Matches one or more occurrences of the given patterns
              @(pattern-list)2 (press h for help or q to quit)
                     Matches one of the given patternsto quit)
M                     ing  the  syntax  [=c=], which matches all characters with
M                     Within [ and ], an equivalence class can be specified  us‐
MESESCOApage bash(1) line 2112 (press h for help or q to quit)
M                     and the character _.r help or q to quit)
M                     class.   The word character class matches letters, digits,
M                     A character class matches any character belonging to  that
M                     punct space upper word xdigit q to quit)
M                     alnum  alpha  ascii  blank  cntrl  digit graph lower print
M                     classes defined in the POSIX standard:t)
M                     the syntax [:class:], where class is one of the  following
M                     Within  [  and ], character classes can be specified using
MESESCOApage bash(1) line 2103 (press h for help or q to quit)
M                     matched by including it as the first character in the set.
M                     as the first or last character in the set.   A  ]  may  be
M                     iranges  shell option.  A - may be matched by including it
M                     the LC_ALL shell variable to C, or  enable  the  globasci‐
M                     sions,  where  [a-d] is equivalent to [abcd], set value of
M                     obtain the traditional  interpretation  of  range  expres‐
M                     of  the  LC_COLLATE or LC_ALL shell variables, if set.  To
M                     range, are determined by the current locale and the values
M                     in  range  expressions, and the characters included in the
M                     not enclosed is matched.  The sorting order of  characters
M                     acter  following  the  [ is a !  or a ^ then any character
M                     quence and character set, is matched.  If the first  char‐
M                     ters,  inclusive, using the current locale's collating se‐
M                     sion; any character that falls between those  two  charac‐
M                     characters  separated  by a hyphen denotes a range expres‐
M              [...]  Matches any one of the enclosed  characters.   A  pair  of
M              ?      Matches any single character. q to quit)
M                     will match only directories and subdirectories.
M                     and  subdirectories.   If followed by a /, two adjacent *s
M                     pattern will match all files and zero or more  directories
M                     name  expansion  context, two adjacent *s used as a single
M                     globstar shell option is enabled, and * is used in a path‐
M              *      Matches  any  string, including the null string.  When the
MESESCOApage bash(1) line 2079 (press h for help or q to quit)
M       The special pattern characters have the following meanings:
MESESCOApage bash(1) line 2077 (press h for help or q to quit)
M       characters must be quoted if they are to be matched literally.
M       escaping backslash is discarded  when  matching.   The  special  pattern
M       occur  in  a  pattern.  A backslash escapes the following character; the
M       characters described below, matches itself.  The NUL character  may  not
M       Any  character that appears in a pattern, other than the special pattern
MESESCOApage bash(1) line 2071 (press h for help or q to quit)
M       Pattern Matchinge 2070 (press h for help or q to quit)
MESESCOApage bash(1) line 2069 (press h for help or q to quit)
M       The pattern matching honors the setting of the extglob shell option.
M       GLOBIGNORE.  The dotglob option is disabled when  GLOBIGNORE  is  unset.
M       filenames  beginning  with  a ``.'', make ``.*''  one of the patterns in
M       ginning with a ``.''  will match.  To get the old behavior  of  ignoring
M       effect  of enabling the dotglob shell option, so all other filenames be‐
M       and not null.  However, setting GLOBIGNORE to a non-null value  has  the
M       filenames  ``.''   and ``..''  are always ignored when GLOBIGNORE is set
M       the patterns in GLOBIGNORE is performed without  regard  to  case.   The
M       list  of matches.  If the nocaseglob option is set, the matching against
M       that also matches one of the patterns in GLOBIGNORE is removed from  the
M       names matching a pattern.  If GLOBIGNORE is set, each matching file name
M       The GLOBIGNORE shell variable may be used to restrict the  set  of  file
MESESCOApage bash(1) line 2056 (press h for help or q to quit)
M       nullglob, globskipdots, failglob, and dotglob shell options.
M       below  under SHELL BUILTIN COMMANDS for a description of the nocaseglob,
M       described below under Pattern Matching.  See the  description  of  shopt
M       matching  contexts  it  can be matched by a special pattern character as
M       always be matched explicitly by a slash in the  pattern,  but  in  other
M       treated  specially.   When matching a pathname, the slash character must
M       with a ``.''.  When not matching pathnames, the ``.''  character is  not
M       names  ``.''   and ``..''  are never matched, even if the pattern begins
M       dotglob is set.  If the globskipdots shell option is enabled, the  file‐
M       ``..'', the pattern must begin with ``.'' (for example, ``.?''), even if
M       shell option dotglob is set.  In order to match the filenames ``.''  and
M       or  immediately following a slash must be matched explicitly, unless the
       effect  of enabling the dotglob shell option, so all other filenames be‐
       ginning with a ``.''  will match.  To get the old behavior  of  ignoring
       filenames  beginning  with  a ``.'', make ``.*''  one of the patterns in
       GLOBIGNORE.  The dotglob option is disabled when  GLOBIGNORE  is  unset.
       The pattern matching honors the setting of the extglob shell option.
 ESESCOBpage bash(1) line 2048 (press h for help or q to quit)
       Pattern Matchingne 2049 (press h for help or q to quit)
 ESESCOBpage bash(1) line 2050 (press h for help or q to quit)
       Any  character that appears in a pattern, other than the special pattern
       characters described below, matches itself.  The NUL character  may  not
       occur  in  a  pattern.  A backslash escapes the following character; the
       escaping backslash is discarded  when  matching.   The  special  pattern
       characters must be quoted if they are to be matched literally.
 ESESCOBpage bash(1) line 2056 (press h for help or q to quit)
       The special pattern characters have the following meanings:
 ESESCOBpage bash(1) line 2058 (press h for help or q to quit)
              *      Matches  any  string, including the null string.  When the
                     globstar shell option is enabled, and * is used in a path‐
                     name  expansion  context, two adjacent *s used as a single
                     pattern will match all files and zero or more  directories
                     and  subdirectories.   If followed by a /, two adjacent *s
                     will match only directories and subdirectories.
              ?      Matches any single character.r q to quit)
              [...]  Matches any one of the enclosed  characters.   A  pair  of
                     characters  separated  by a hyphen denotes a range expres‐
                     sion; any character that falls between those  two  charac‐
                     ters,  inclusive, using the current locale's collating se‐
                     quence and character set, is matched.  If the first  char‐
                     acter  following  the  [ is a !  or a ^ then any character
                     not enclosed is matched.  The sorting order of  characters
                     in  range  expressions, and the characters included in the
                     range, are determined by the current locale and the values
                     of  the  LC_COLLATE or LC_ALL shell variables, if set.  To
                     obtain the traditional  interpretation  of  range  expres‐
                     sions,  where  [a-d] is equivalent to [abcd], set value of
                     the LC_ALL shell variable to C, or  enable  the  globasci‐
MESESCOApage bash(1) line 2079 (press h for help or q to quit)
                     the LC_ALL shell variable to C, or  enable  the  globasci‐
                     iranges  shell option.  A - may be matched by including it
                     as the first or last character in the set.   A  ]  may  be
                     matched by including it as the first character in the set.
 ESESCOBpage bash(1) line 2082 (press h for help or q to quit)
                     Within  [  and ], character classes can be specified using
                     the syntax [:class:], where class is one of the  following
                     classes defined in the POSIX standard:it)
                     alnum  alpha  ascii  blank  cntrl  digit graph lower print
                     punct space upper word xdigitr q to quit)
                     A character class matches any character belonging to  that
                     class.   The word character class matches letters, digits,
                     and the character _.or help or q to quit)
 ESESCOBpage bash(1) line 2091 (press h for help or q to quit)
                     Within [ and ], an equivalence class can be specified  us‐
                     ing  the  syntax  [=c=], which matches all characters with
                     the same collation weight (as defined by the  current  lo‐
                     cale) as the character c.lp or q to quit)
 ESESCOBpage bash(1) line 2096 (press h for help or q to quit)
                     Within  [ and ], the syntax [.symbol.] matches the collat‐
                     ing symbol symbol. for help or q to quit)
 ESESCOBpage bash(1) line 2099 (press h for help or q to quit)
       If the extglob shell option is enabled  using  the  shopt  builtin,  the
       shell  recognizes  several  extended pattern matching operators.  In the
       following description, a pattern-list is a list of one or more  patterns
       separated by a |.  Composite patterns may be formed using one or more of
       the following sub-patterns:ess h for help or q to quit)
 ESESCOBpage bash(1) line 2105 (press h for help or q to quit)
M                     classes defined in the POSIX standard:t)
M                     the syntax [:class:], where class is one of the  following
M                     Within  [  and ], character classes can be specified using
MESESCOApage bash(1) line 2103 (press h for help or q to quit)
M                     matched by including it as the first character in the set.
M                     as the first or last character in the set.   A  ]  may  be
M                     iranges  shell option.  A - may be matched by including it
M                     the LC_ALL shell variable to C, or  enable  the  globasci‐
M                     sions,  where  [a-d] is equivalent to [abcd], set value of
M                     obtain the traditional  interpretation  of  range  expres‐
M                     of  the  LC_COLLATE or LC_ALL shell variables, if set.  To
M                     range, are determined by the current locale and the values
M                     in  range  expressions, and the characters included in the
M                     not enclosed is matched.  The sorting order of  characters
M                     acter  following  the  [ is a !  or a ^ then any character
M                     quence and character set, is matched.  If the first  char‐
M                     ters,  inclusive, using the current locale's collating se‐
                     class.   The word character class matches letters, digits,
M                     ters,  inclusive, using the current locale's collating se‐
M                     sion; any character that falls between those  two  charac‐
M                     characters  separated  by a hyphen denotes a range expres‐
M              [...]  Matches any one of the enclosed  characters.   A  pair  of
M              ?      Matches any single character. q to quit)
M                     will match only directories and subdirectories.
M                     and  subdirectories.   If followed by a /, two adjacent *s
M                     pattern will match all files and zero or more  directories
M                     name  expansion  context, two adjacent *s used as a single
M                     globstar shell option is enabled, and * is used in a path‐
M              *      Matches  any  string, including the null string.  When the
MESESCOApage bash(1) line 2079 (press h for help or q to quit)
M       The special pattern characters have the following meanings:
MESESCOApage bash(1) line 2077 (press h for help or q to quit)
M       characters must be quoted if they are to be matched literally.
M       escaping backslash is discarded  when  matching.   The  special  pattern
M       occur  in  a  pattern.  A backslash escapes the following character; the
M       characters described below, matches itself.  The NUL character  may  not
M       Any  character that appears in a pattern, other than the special pattern
>ITINF25/lektion6(1) line 2071 (press h for help or q to quit)
$ touch pathname_expansion
ITINF25/lektion6
$ chmod +x pathname_expansion 
ITINF25/lektion6
$ code pathname_expansion 
ITINF25/lektion6
$ ITINF25/lektion6
$ echo *.tx













återblick_lektion5.txt hejfil.txt lsfil.txt namninput_kopia2.txt namninput_kopia.txt namninput.txt radfil.txt skostorlek.txt slumpfil.txt stderr_felmeddelande.txt tomfil.txt
ITINF25/lektion6
$ ITINF25/lektion6
$ echo *.sh
skript.sh
ITINF25/lektion6
s *.s *.s- *.sl *.s*.sh
-rw-r--r-- 1 kent kent 68 Sep 25 12:35 skript.sh
ITINF25/lektion6
$ ls -l *.stxt
-rw-r--r-- 1 kent kent 2125 Sep 25 09:34 återblick_lektion5.txt
-rw-r--r-- 1 kent kent    4 Sep 25 10:21 hejfil.txt
-rw-r--r-- 1 kent kent  157 Sep 25 10:56 lsfil.txt
-rw-r--r-- 1 kent kent    4 Sep 25 10:50 namninput_kopia2.txt
-rw-r--r-- 1 kent kent    4 Sep 25 10:50 namninput_kopia.txt
-rw-r--r-- 1 kent kent   12 Sep 25 10:28 namninput.txt
-rw-r--r-- 1 kent kent   35 Sep 25 10:23 radfil.txt
-rw-r--r-- 1 kent kent    3 Sep 25 10:59 skostorlek.txt
-rw-r--r-- 1 kent kent   18 Sep 25 11:05 slumpfil.txt
-rw-r--r-- 1 kent kent   16 Sep 25 10:37 stderr_felmeddelande.txt
-rw-r--r-- 1 kent kent    0 Sep 25 10:20 tomfil.txt
ITINF25/lektion6
$ ITINF25/lektion6
$ ls -l *.tx*a*
-rwxr-xr-x 1 kent kent  20 Sep 25 12:51 falskt
-rw-r--r-- 1 kent kent   0 Sep 25 13:02 indikatorfil
-rw-r--r-- 1 kent kent   1 Sep 25 13:58 indikatorfil2
-rw-r--r-- 1 kent kent   4 Sep 25 10:50 namninput_kopia2.txt
-rw-r--r-- 1 kent kent   4 Sep 25 10:50 namninput_kopia.txt
-rw-r--r-- 1 kent kent  12 Sep 25 10:28 namninput.txt
-rwxr-xr-x 1 kent kent  13 Sep 25 15:01 pathname_expansion
-rw-r--r-- 1 kent kent  35 Sep 25 10:23 radfil.txt
-rwxr-xr-x 1 kent kent 134 Sep 25 14:05 read1
-rwxr-xr-x 1 kent kent 191 Sep 25 14:21 read3lines
-rwxr-xr-x 1 kent kent  84 Sep 25 14:26 readalllines
-rwxr-xr-x 1 kent kent  20 Sep 25 12:53 sant
-rw-r--r-- 1 kent kent  16 Sep 25 10:37 stderr_felmeddelande.txt
ITINF25/lektion6
$ ITINF25/lektion6
$ hisgtortory
   39  ls -l
   40  chown yellow yellows-fil 
   41  sudo chown yellow yellows-fil 
   42  ls -l
   43  nano yellows-fil 
   44  ssh ubse
   45  ssh ubse
   46  ssh ubse
   47  exit
   48  ssh ubse
   49  exit
   50  ls
   51  ssh ubse
   52  exit
   53  ls
   54  ssh ubse
   55  scp -r ubse:/home/kent ubsekent
   56  ls
   57  exit
   58  exit
   59  cd Downloads
   60  rm ZipGrade\ -\ Konverterare\ -\ output.csv 
   61  ls -tr
   62  ls -1 *.pdf | wc -l
   63  ls ~/Dropbox
   64  cp -r ~/Dropbox/devops24linux{1,2}
   65  cd ~/Dropbox/devops24linux2/
   66  rm *.pdf
   67  rm *~
   68  rm -rf output/
   69  mkdir output
   70  mv ~/Downloads/*.pdf .
   71  xdg-open .
   72  . stencylize.sh 
   73  stencylize 
   74  for x in *.pdf; do echo $x; done
   75  for x in *.pdf; do echo stencylize "$x" "$x"; done
   76  for x in *.pdf; do echo stencylize "$x" "${x##.pdf}"; done
   77  for x in *.pdf; do echo stencylize "$x" "${x%%.pdf}"; done
   78  for x in *.pdf; do echo stencylize "$x" stencil.png; done
   79  for x in *.pdf; do stencylize "$x" stencil.png; done
   80  cd output/
   81  tldr zip
   82  zip -r x.zip *.pdf
   83  mv x.zip rattning_devops24_linux2_15_sep.zip
   84  cd bokforing
   85  ls *faktura*
   86  xdg-open a52\ -\ faktura\ nackademin\ linux\ 1.pdf 
   87  cd Downloads
   88  rm c8-it-ab-faktura-42*
   89  xdg-open a52\ -\ faktura\ nackademin\ linux\ 1.pdf 
   90  rm c8-it-ab-faktura-42*
   91  cd Downloads
   92  rm *.pdf
   93  ls ~/.ssh/
   94  man ssh-keygen 
   95  man ssh-copy-id
   96  man ssh-keygen
   97  man ssh-copy-id
   98  man ssh-keygen
   99  cd Documents
  100  cd nackademin/
  101  cd linux
  102  cd linux1
  103  cd l1-live/
  104  git push
  105  git repo view --web
  106  gh repo view --web
  107  bin/educator --edit
  108  git status
  109  git checkout main
  110  git pull
  111  code .
  112  fc-list : family style file | grep -i -E 'monolisa|fira code|ibm plex mono|droid sans mono'
  113  fc-match -s "MonoLisa Variable"
  114  fc-match -s "Monolisa"
  115  exit
  116  rm c8-it-ab-faktura-42*
  117  cd Downloads
  118  rm *.pdf
  119  ls ~/.ssh/
  120  man ssh-keygen 
  121  man ssh-copy-id
  122  man ssh-keygen
  123  bin/educator 
  124  cp .vscode/settings.json x.json
  125  bin/educator --edit
  126  jq -S . file.json > file.json.tmp && mv file.json.tmp file.json
  127  json_sort_layer1 { jq -S . "$1.json" > "$1".tmp && mv "$1".tmp "$1"; }
  128  json_sort_layer1() { jq -S . "$1.json" > "$1".tmp && mv "$1".tmp "$1"; }
  129  chmod+x ~/.bin/json_sort_layer1.bash
  130  chmod +x ~/.bin/json_sort_layer1.bash
  131  ~/.bin/link 
  132  unset json_sort_layer1
  133  nano ~/.bin/json_sort_layer1.bash
  134  code ~/.bin/json_sort_layer1.bash
  135  json_sort_layer1 .profiles/educator_present/dot_vscode/settings.json 
  136  bin/educator 
  137  exit
  138  man 5 sshd_config 
  139  man 5 ssh_config 
  140  man scp
  141  git stash
  142  ls
  143  man ssh
  144  ssh -p 10022 localhost
  145  cat /etc/os-release 
  146  ls /home/kent/.ssh/
  147  less /home/kent/.ssh/known_hosts
  148  ls
  149  ls /home/kent/.ssh/
  150  ssh-keygen 
  151  ssh-keygen -t ed25519
  152  ls /home/kent/.ssh/
  153  cat /home/kent/.ssh/id_ed25519_ubsembr.pub 
  154  ssh -p 10022 localhost
  155  ssh -p 10022 localhost
  156  ssh -p 10022 localhost
  157  ssh -p 10022 localhost
  158  ssh -p 10022 localhost
  159  man ssh-copy-id
  160  ssh-copy-id -p 10022 -i /home/kent/.ssh/id_ed25519_ubsembr
  161  ssh-copy-id -p 10022 -i /home/kent/.ssh/id_ed25519_ubsembr localhost
  162  ssh -p 10022 localhost
  163  exit
  164  cd /home/kent/.ssh/
  165  ls
  166  less config 
  167  code config 
  168  ssh server-kent
  169  ssh server-kent
  170  ssh server-kent ls
  171  ssh server-kent ls -A
  172  ssh server-kent hostname
  173  hostname
  174  ssh server-kent cat /etc/ssh/sshd_config
  175  ssh server-kent sudo cat /etc/ssh/sshd_config
  176  code info.sh
  177  uptime
  178  chmod a+x info.sh 
  179  ./info.sh 
  180  ssh server-kent < info.sh 
  181  ssh -p 10022 localhost
  182  id
  183  ssh -p 10022 kent@localhost
  184  man man
  185  man 5 ssh_config
  186  ssh -p 10022 kent@localhost
  187  ls /home/kent/.ssh/
  188  man 5 ssh_config
  189  man 5 ssh_config
  190  ls /home/kent/.ssh/id_ed25519_ubsembr 
  191  code ~/.ssh/config 
  192  ssh server-kent
  193  ssh server-kent
  194  ssh server-kent
  195  exit
  196  ls
  197  man scp
  198  scp -p 10022 info.sh kent@localhost:
  199  scp -P 10022 info.sh kent@localhost:
  200  scp -p 10022 kent@localhost
  201  ssh -p 10022 kent@localhost
  202  scp info.sh server-kent:
  203  scp info.sh server-kent:info2
  204  ssh server-kent ls
  205  scp info.sh server-kent:/home/kent/info3
  206  ssh server-kent ls
  207  ssh server-kent
  208  ls
  209  scp server-kent:/home/kent/superinfo.sh .
  210  cd /tmp/
  211  ls
  212  ls
  213  cd
  214  ls
  215  git clone git@github.com:nackc8/l11-apache-d4-kc8se-1.git
  216  cd l11-apache-d4-kc8se-1/
  217  ls
  218  code .
  219  man scp
  220  ls /etc/modprobe.d/blacklist-kvm.conf
  221  ls /etc/modprobe.d/
  222  man scp
  223  ls /etc/modprobe.d/blacklist-kvm.conf
  224  ls /etc/modprobe.d/
  225  cd l11-apache-d4-kc8se-1/
  226  gh repo set-default
  227  gh repo view --web
  228  cd ..
  229  rm -rf l11-apache-d4-kc8se-1/
  230  gh-repo-create-
  231  gh-sync-organization 
  232  echo $MININST1
  233  echo $BASHPID
  234  exit
  235  gh-sync-organization 
  236  echo $SAL
  237  echo $MININST1 
  238  bash 
  239  echo $BASHPID
  240  exit
  241  echo $Y
  242  echo $BASHPID
  243  exit
  244  echo $Y
  245  exit
  246  exit
  247  rm -rf l11-apache-d4-kc8se-1/
  248  gh-repo-create-
  249  gh-sync-organization 
  250  git stash
  251  pwsh
  252  man ls
  253  ls
  254  touch -h
  255  ls
  256  touch -- -h
  257  ls
  258  ls -l -h
  259  man ls
  260  ls -l
  261  ls -l -h
  262  ls -l -- -h
  263  ls
  264  ls -1
  265  ls -l
  266  ls -t -r
  267  ls -l -t -r
  268  touch nyfil
  269  ls -l -t -r
  270  ls -ltr
  271  ls -l -t -r recordings/
  272  ls -t -l -r recordings/
  273  ls -t -r recordings/ -l
  274  ls -l -t -r recordings/
  275  ls /home/kent/
  276  ls ~
  277  SAL=B408
  278  NUMMER=123
  279  echo Hej hopp
  280  echo
  281  echo Hej hopp jie jie jei jie eij ejie jie ei ejie iej
  282  echo Vi sitter i sal B408
  283  echo Vi sitter i sal $SAL
  284  echo Vi sitter i sal B408
  285  echo Vi sitter i sal $SAL
  286  SAL=B200
  287  echo Vi sitter i sal $SAL
  288  touch banan_l.jpg banan_s.jpg
  289  ls
  290  frukt=banan
  291  rm $frukt
  292  rm $frukt_l.jpg
  293  echo Du har en snabb $BIL .... 
  294  echo Du har en snabb $BIL .... 
  295  BIL=Toyota
  296  echo Du har en snabb $BIL .... 
  297  BIL=
  298  echo Du har en snabb $BIL .... 
  299  ls
  300  echo $FRUKT
  301  echo $frukt
  302  rm ${frukt}
  303  rm -v ${frukt}_l.jpg ${frukt}_s.jpg
  304  touch apelsin_l.jpg
  305  touch apelsin_s.jpg
  306  frukt=apelsin
  307  rm -v ${frukt}_l.jpg ${frukt}_s.jpg
  308  ps -e
  309  echo PID $$
  310  ps -e | less
  311  ls
  312  env
  313  printenv
  314  MININST1="Bra inställning"
  315  echo $MININST1 
  316  printenv | less
  317  export MININST1
  318  printenv | less
  319  ls
  320  echo $SAL
  321  bash
  322  echo $BASHPID
  323  Y=777 bash
  324  echo $BASHPID
  325  echo $Y
  326  Y=Hejsan
  327  Y=777 bash
  328  echo $Y
  329  nano mittskript
  330  ls
  331  mittskript
  332  ./mittskript
  333  ls -l ./mittskript
  334  chmod 744 mittskript 
  335  ls -l ./mittskript
  336  ./mittskript 
  337  ln mittskript mittskript.sh
  338  ./mittskript 
  339  ./mittskript 
  340  ./mittskript 
  341  VAR_A=astuff VAR_B=bstuff ./mittskript
  342  echo $VAR_A
  343  VAR_A=hund
  344  ./mittskript 
  345  export VAR_A
  346  ./mittskript 
  347  ./mittskript 
  348  VAR_B=katt ./mittskript 
  349  echo $VAR_A
  350  echo $VAR_B
  351  VAR_B=katt ./mittskript 
  352  VAR_B=katt ./mittskript 
  353  echo $VAR_A
  354  VAR_B=katt VAR_A=drake ./mittskript
  355  echo $VAR_A
  356  echo $VAR_A
  357  echo $VAR_B
  358  ./mittskript 
  359  export VAR_B=orm
  360  ./mittskript 
  361  unset VAR_B
  362  ./mittskript 
  363  echo $LANG
  364  man ls
  365  LANG_BACKUP=$LANG
  366  echo $LANG_BACKUP 
  367  LANG=sv_SE.UTF-8
  368  printenv | less
  369  man man
  370  touch annatskript
  371  bash annatskript 
  372  ./annatskript
  373  bash annatskript 
  374  1=2
  375  A=2
  376  touch fin fil
  377  ls
  378  touch {fin fil}
  379  ls
  380  touch "fin fil"
  381  ls
  382  rm -- fin fil
  383  ls
  384  rm -- 'fin fil'
  385  ls
  386  echo $BIL
  387  BIL=Ford
  388  echo $BIL
  389  echo Fin bil: $BIL
  390  BIL=-h
  391  echo Fin bil: $BIL
  392  BIL=-n
  393  echo Fin bil: $BIL
  394  man echo
  395  echo Fin bil: $BIL
  396  echo $BIL Fin bil
  397  echo -n Fin bil
  398  echo "$BIL Fin bil"
  399  echo $BIL
  400  echo "$BIL"
  401  echo -- "$BIL"
  402  echo -- $BIL
  403  echo "$BIL"
  404  BIL=hej
  405  echo "$BIL"
  406  echo "$BIL jeeiie"
  407  echo '$BIL jeeiie'
  408  ls
  409  touch 'mycket bra fil'
  410  ls
  411  rm mycket\ bra\ fil
  412  ls
  413  touch 'mycket bra fil'
  414  ls
  415  rm mycket\ bra\ fil 
  416  ls
  417  sl
  418  sl
  419  ls
  420  puff() { echo DU ANROPADE PUFF; }
  421  puff
  422  sl() { echo "[  ]-[  ]-[  ] <-- SL";  }
  423  sl
  424  help cd
  425  builtin
  426  help builtin
  427  help builtins
  428  ls
  429  mkdir kat
  430  help mkdir
  431  cd kat/
  432  ls
  433  cd ..
  434  echo $PATH
  435  ls bin
  436  ls ~/bin
  437  hej
  438  ssh server-ubuntu
  439  hej
  440  command_not_found_handle() { echo "$1" "$2" "$3"; }
  441  hej
  442  command_not_found_handle() { echo "Hörru!" "$1" "$2" "$3"; }
  443  hej
  444  nano sourceamig
  445  chmod +x sourceamig 
  446  ls -l sourceamig 
  447  chmod +w sourceamig
  448  ls -l sourceamig 
  449  ./sourceamig 
  450  ./sourceamig 
  451  echo $X
  452  ./sourceamig 
  453  echo $X
  454  source sourceamig 
  455  echo $X
  456  help source
  457  source ~/.bashrc
  458  ssh server-kent
  459  echo -e 'Kalle\nLotta\nOve\nMayank'
  460  echo -e 'Kalle\nLotta\nOve\nMayank' | sort -R
  461  exit
  462  cd Downloads
  463  rm *.pdf
  464  exit
  465  cd Documents
  466  cd nackademin/
  467  l
  468  cd linux1/
  469  cd l1-live/
  470  git fetch origin/main
  471  git fetch origin main
  472  bin/educator --edit
  473  code .
  474  git checkout main
  475  git pull
  476  help
  477  enable
  478  enable -a
  479  help enable
  480  help help
  481  help -s
  482  man bash
  483  ssh server-kent
  484  exit
  485  git ira
  486  git rebase origin/main
  487  git rebase --abort
  488  git merge main
  489  git merge origin/main
  490  git push -f
  491  gh repo view --web
  492  less /etc/locale.gen 
  493  bin/educator 
  494  exit
  495  echo -e eiujeoiej oierj oie jeoie joiej eoijeoiejoeijeoije oiej eoijeoej oiejeoijeoie joeij eoijeoiejeo
  496  exit
  497  exit
  498  echo > indikatorfil2
  499  exit
  500  X=rulle
  501  echo $X
  502  echo ${X}
  503  echo ${X:2}
  504  echo ${X:1}
  505  echo ${X:1:2}
  506  echo ${#X}
  507  echo ${X/r/b}
  508  # byter ut r mot b.
  509  man bash
  510  echo $(ls /etc
