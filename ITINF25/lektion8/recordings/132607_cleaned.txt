Script started on 2025-09-30 13:26:07+02:00 [TERM="xterm-256color" TTY="/dev/pts/5" COLUMNS="85" LINES="10"]
ITINF25/lektion8
$ cd 2.5\ arithmetic\ expansion/
ITINF25/lektion8/2.5 arithmetic expansion
$ ITINF25/lektion8/2.5 arithmetic expansion
$ ls
ITINF25/lektion8/2.5 arithmetic expansion
(reverse-i-search)`':c': cd 2.5\ arithmetic\ expansion
failed reverse-i-search)`cm': cd 2.5\ arithmeti
o
d^C
ITINF25/lektion8/2.5 arithmetic expansion
(reverse-i-search)`':c': cd 2.5\ arithmetic\ expansionh': echo God mam': chmod +x falskto': chmod': chmodpathname_expansiow sourceamix sourceamig
failed reverse-i-search)`chmod': chmo
^C
ITINF25/lektion8/2.5 arithmetic expansion
$ ITINF25/lektion8/2.5 arithmetic expansion
$ cp ../2.1\ brace_expansion/

exempel1             nummerfiler/         realistiska_exempel/ 
gator/               nummerfiler2/        
ITINF25/lektion8/2.5 arithmetic expansion
$ cp ../2.1\ brace_expansion/exempel1 .
ITINF25/lektion8/2.5 arithmetic expansion
$ ITINF25/lektion8/2.5 arithmetic expansion
$ echo PLUS $(( ) ) )2 )+ )3



PLUS 5
ITINF25/lektion8/2.5 arithmetic expansion
$ echo PLUS $(( 2 + 3  ))*ITINF25/lektion8/2.5 arithmetic expansion
$ echo PLUS $(( 2 * 3 )<ULMULTI
MULTI 6
ITINF25/lektion8/2.5 arithmetic expansion
$ echo MULTI $(( 2 * 3 )SUBTRACTION-ITINF25/lektion8/2.5 arithmetic expansion
$ echo SUBTRACTION $(( 2 - 3 )








SUBTRACTION -1
ITINF25/lektion8/2.5 arithmetic expansion
$ echo SUBTRACTION $(( 2 - 3 )DIV_INT10 )) )/ ) )2 )






ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_INT $(( 10 / 2 ))
DIV_INT 5
ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_INT $(( 10 / 2 )9MAYBE_FLOAT




DIV_MAYBE_FLOAT 4
ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_MAYBE_FLOAT $(( 9 / 2 )





DIV_MAYBE_FLOAT 9 / 2
ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_MAYBE_FLOAT 9 / $(( 9 / 2 )









bash: syntax error near unexpected token `('
ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_MAYBE_FLOAT (( 9 / 2 ) 
$(( 9 / 2 ())
DIV_MAYBE_FLOAT 4
ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_MAYBE_FLOAT $(( 9 / 2 )DECIMALS_CHOPPED_OFF













DIV_DECIMALS_CHOPPED_OFF 4
ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_DECIMALS_CHOPPED_OFF $(( 9 / 2 )5.2








bash: 5.2 / 2 : syntax error: invalid arithmetic operator (error token is ".2 / 2 ")
ITINF25/lektion8/2.5 arithmetic expansion
$ ITINF25/lektion8/2.5 arithmetic expansion
$ echo DIV_DECIMALS_CHOPPED_OFF $(( 5.2 / 2 )95.2

MAYBE_FLOAT ^CALS_CHOPPED_OFF $(( 5.2 / 2 )9
ITINF25/lektion8/2.5 arithmetic expansion
$ bc
bc 1.07.1
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'. 
2.2 * 2
4.4

ITINF25/lektion8/2.5 arithmetic expansion
$ ITINF25/lektion8/2.5 arithmetic expansion
$ for a in {a,u,o,å}{b,c,d,e}; do
        echo "$x"
done
for a in {a,u,o,å}{b,c,d,e}; do
        echo "$x"
done
















ITINF25/lektion8/2.5 arithmetic expansion
$ ITINF25/lektion8/2.5 arithmetic expansion
$ for a in {a,u,o,å}{b,c,d,e}; do
        echo "$a"
donefor a in {a,u,o,å}{b,c,d,e}; do
        echo "$a"
done
ab
ac
ad
ae
ub
uc
ud
ue
ob
oc
od
oe
åb
åc
åd
åe
ITINF25/lektion8/2.5 arithmetic expansion
$ ITINF25/lektion8/2.5 arithmetic expansion
$ 
$ man bash
BASH(1)                       General Commands Manual                      BASH(1)

NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [command_string | file]

COPYRIGHT
       Bash is Copyright (C) 1989-2022 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash  is  an  sh-compatible command language interpreter that executes com‐
       mands read from the standard input or from a file.  Bash also  incorporates
       useful features from the Korn and C shells (ksh and csh).

 Manual page bash(1) line 1 (press h for help or q to quit)
       Bash  is intended to be a conformant implementation of the Shell and Utili‐
       ties portion of the IEEE POSIX specification (IEEE Standard 1003.1).   Bash
       can be configured to be POSIX-conformant by default.
 ESESCOBpage bash(1) line 4 (press h for help or q to quit)
OPTIONSBpage bash(1) line 5 (press h for help or q to quit)
       All  of the single-character shell options documented in the description of
       the set builtin command, including -o, can be  used  as  options  when  the
       shell  is invoked.  In addition, bash interprets the following options when
       it is invoked:line 9 (press h for help or q to quit)
 ESESCOBpage bash(1) line 10 (press h for help or q to quit)
       -c        If the -c option is present, then  commands  are  read  from  the
                 first non-option argument command_string.  If there are arguments
                 after the command_string, the first argument is  assigned  to  $0
                 and any remaining arguments are assigned to the positional param‐
                 eters.  The assignment to $0 sets the name of the shell, which is
                 used in warning and error messages.to quit)
       -i        If the -i option is present, the shell is interactive.
       -l        Make bash act as if it had been invoked as a login shell (see IN‐
                 VOCATION below).ss h for help or q to quit)
       -r        If the -r option is present, the shell  becomes  restricted  (see
                 RESTRICTED SHELL below). help or q to quit)
       -s        If  the -s option is present, or if no arguments remain after op‐
                 tion processing, then commands are read from the standard  input.
                 This  option  allows the positional parameters to be set when in‐
                 voking an interactive shell or when reading input through a pipe.
       -v        Print shell input lines as they are read.t)
       -x        Print commands and their arguments as they are executed.
       -D        A list of all double-quoted strings preceded by $ is  printed  on
                 the  standard  output.  These are the strings that are subject to
                 language translation when the current locale is not C  or  POSIX.
                 This implies the -n option; no commands will be executed.
       [-+]O [shopt_option]2 (press h for help or q to quit)
                 shopt_option  is  one  of the shell options accepted by the shopt
                 builtin (see SHELL BUILTIN COMMANDS below).  If  shopt_option  is
                 present,  -O  sets  the  value  of that option; +O unsets it.  If
                 shopt_option is not supplied, the names and values of  the  shell
                 options accepted by shopt are printed on the standard output.  If
                 the invocation option is +O, the output is displayed in a  format
                 that may be reused as input.p or q to quit)
       --        A  -- signals the end of options and disables further option pro‐
                 cessing.  Any arguments after the -- are treated as filenames and
                 arguments.  An argument of - is equivalent to --.
 ESESCOBpage bash(1) line 43 (press h for help or q to quit)
       Bash  also  interprets  a number of multi-character options.  These options
       must appear on the command line before the single-character options  to  be
       recognized.1) line 46 (press h for help or q to quit)
 ESESCOBpage bash(1) line 47 (press h for help or q to quit)
       --debugger(1) line 48 (press h for help or q to quit)
              Arrange  for  the  debugger  profile to be executed before the shell
              starts.  Turns on extended debugging mode (see  the  description  of
              the extdebug option to the shopt builtin below).
       --dump-po-stringse 52 (press h for help or q to quit)
              Equivalent  to -D, but the output is in the GNU gettext po (portable
              object) file format.s h for help or q to quit)
       --dump-stringsline 55 (press h for help or q to quit)
              Equivalent to -D.ress h for help or q to quit)
       --help Display a usage message on standard output and exit successfully.
       --init-file filene 58 (press h for help or q to quit)
       --rcfile file line 59 (press h for help or q to quit)
              Execute commands from file instead of the system wide initialization
              file  /etc/bash.bashrc and the standard personal initialization file
              ~/.bashrc if the shell is interactive (see INVOCATION below).
 ESESCOBpage bash(1) line 63 (press h for help or q to quit)
       --loginash(1) line 64 (press h for help or q to quit)
              Equivalent to -l.ress h for help or q to quit)
 ESESCOBpage bash(1) line 66 (press h for help or q to quit)
       --noediting1) line 67 (press h for help or q to quit)
              Do not use the GNU readline library to read command lines  when  the
              shell is interactive. h for help or q to quit)
 ESESCOBpage bash(1) line 70 (press h for help or q to quit)
       --noprofile1) line 71 (press h for help or q to quit)
              Do  not read either the system-wide startup file /etc/profile or any
              of the personal initialization files ~/.bash_profile, ~/.bash_login,
              or  ~/.profile.   By  default, bash reads these files when it is in‐
              voked as a login shell (see INVOCATION below).
 ESESCOBpage bash(1) line 76 (press h for help or q to quit)
       --norc Do  not  read  and  execute  the  system  wide  initialization  file
              /etc/bash.bashrc  and  the personal initialization file ~/.bashrc if
              the shell is interactive.  This option is on by default if the shell
              is invoked as sh.ress h for help or q to quit)
 ESESCOBpage bash(1) line 81 (press h for help or q to quit)
       --posixash(1) line 82 (press h for help or q to quit)
              Change the behavior of bash where the default operation differs from
              the POSIX standard to match the standard (posix mode).  See SEE ALSO
              below  for a reference to a document that details how posix mode af‐
              fects bash's behavior.h for help or q to quit)
 ESESCOBpage bash(1) line 87 (press h for help or q to quit)
       --restricted) line 88 (press h for help or q to quit)
              The shell becomes restricted (see RESTRICTED SHELL below).
 ESESCOBpage bash(1) line 90 (press h for help or q to quit)
       --verboseh(1) line 91 (press h for help or q to quit)
              Equivalent to -v.ress h for help or q to quit)
 ESESCOBpage bash(1) line 93 (press h for help or q to quit)
       --versionh(1) line 94 (press h for help or q to quit)
              Show version information for this instance of bash on  the  standard
              output and exit successfully.elp or q to quit)
 ESESCOBpage bash(1) line 97 (press h for help or q to quit)
ARGUMENTSage bash(1) line 98 (press h for help or q to quit)
       If  arguments remain after option processing, and neither the -c nor the -s
       option has been supplied, the first argument is assumed to be the name of a
       file  containing shell commands.  If bash is invoked in this fashion, $0 is
       set to the name of the file, and the positional parameters are set  to  the
       remaining arguments.  Bash reads and executes commands from this file, then
       exits.  Bash's exit status is the exit status of the last command  executed
       in  the script.  If no commands are executed, the exit status is 0.  An at‐
       tempt is first made to open the file in the current directory, and,  if  no
       file  is  found,  then  the  shell searches the directories in PATH for the
       script.ash(1) line 108 (press h for help or q to quit)
 ESESCOBpage bash(1) line 109 (press h for help or q to quit)
INVOCATIONge bash(1) line 110 (press h for help or q to quit)
       A login shell is one whose first character of argument zero is a -, or  one
       started with the --login option.for help or q to quit)
 ESESCOBpage bash(1) line 113 (press h for help or q to quit)
       An interactive shell is one started without non-option arguments (unless -s
       is specified) and without the -c option, whose standard input and error are
       both  connected  to  terminals (as determined by isatty(3)), or one started
       with the -i option.  PS1 is set and $- includes i if bash  is  interactive,
       allowing a shell script or a startup file to test this state.
 ESESCOBpage bash(1) line 119 (press h for help or q to quit)
       The  following paragraphs describe how bash executes its startup files.  If
       any of the files exist but cannot be read, bash reports an  error.   Tildes
       are  expanded  in filenames as described below under Tilde Expansion in the
       EXPANSION section. 123 (press h for help or q to quit)
 ESESCOBpage bash(1) line 124 (press h for help or q to quit)
       When bash is invoked as an interactive login shell, or as a non-interactive
       shell  with  the  --login option, it first reads and executes commands from
       the file /etc/profile, if that file exists.  After reading  that  file,  it
       looks  for  ~/.bash_profile,  ~/.bash_login, and ~/.profile, in that order,
       and reads and executes commands from the first one that exists and is read‐
       able.   The --noprofile option may be used when the shell is started to in‐
M       An interactive shell is one started without non-option arguments (unless -s
MESESCOApage bash(1) line 130 (press h for help or q to quit)
M       started with the --login option.or help or q to quit)
M       A login shell is one whose first character of argument zero is a -, or  one
MINVOCATIONe bash(1) line 127 (press h for help or q to quit)
MESESCOApage bash(1) line 126 (press h for help or q to quit)
M       script.sh(1) line 125 (press h for help or q to quit)
M       file  is  found,  then  the  shell searches the directories in PATH for the
M       tempt is first made to open the file in the current directory, and,  if  no
M       in  the script.  If no commands are executed, the exit status is 0.  An at‐
M       exits.  Bash's exit status is the exit status of the last command  executed
       The  following paragraphs describe how bash executes its startup files.  If
       any of the files exist but cannot be read, bash reports an  error.   Tildes
       are  expanded  in filenames as described below under Tilde Expansion in the
       EXPANSION section. 123 (press h for help or q to quit)
 ESESCOBpage bash(1) line 124 (press h for help or q to quit)
       When bash is invoked as an interactive login shell, or as a non-interactive
       shell  with  the  --login option, it first reads and executes commands from
       the file /etc/profile, if that file exists.  After reading  that  file,  it
       looks  for  ~/.bash_profile,  ~/.bash_login, and ~/.profile, in that order,
       and reads and executes commands from the first one that exists and is read‐
       able.   The --noprofile option may be used when the shell is started to in‐
       hibit this behavior.31 (press h for help or q to quit)
 ESESCOBpage bash(1) line 132 (press h for help or q to quit)
       When an interactive login shell exits, or a non-interactive login shell ex‐
       ecutes  the exit builtin command, bash reads and executes commands from the
       file ~/.bash_logout, if it exists.r help or q to quit)
 ESESCOBpage bash(1) line 136 (press h for help or q to quit)
       When an interactive shell that is not a login shell is started, bash  reads
       and  executes  commands from /etc/bash.bashrc and ~/.bashrc, if these files
       exist.  This may be inhibited by using the  --norc  option.   The  --rcfile
       file  option will force bash to read and execute commands from file instead
       of /etc/bash.bashrc and ~/.bashrc.r help or q to quit)
 ESESCOBpage bash(1) line 142 (press h for help or q to quit)
       When bash is started non-interactively, to run a shell script, for example,
       it looks for the variable BASH_ENV in the environment, expands its value if
       it appears there, and uses the expanded value as the name of a file to read
       and execute.  Bash behaves as if the following command were executed:
              if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fit)
       but the value of the PATH variable is not used to search for the filename.
 ESESCOBpage bash(1) line 149 (press h for help or q to quit)
       If bash is invoked with the name sh, it tries to mimic the startup behavior
       of historical versions of sh as closely as possible,  while  conforming  to
       the POSIX standard as well.  When invoked as an interactive login shell, or
       a non-interactive shell with the --login option, it first attempts to  read
       and  execute commands from /etc/profile and ~/.profile, in that order.  The
       --noprofile option may be used to inhibit this behavior.  When  invoked  as
       an interactive shell with the name sh, bash looks for the variable ENV, ex‐
       pands its value if it is defined, and uses the expanded value as  the  name
       of  a  file  to read and execute.  Since a shell invoked as sh does not at‐
       tempt to read and execute commands from any other startup files, the  --rc‐
       file  option  has no effect.  A non-interactive shell invoked with the name
       sh does not attempt to read any other startup files.  When invoked  as  sh,
       bash enters posix mode after the startup files are read.
 ESESCOBpage bash(1) line 163 (press h for help or q to quit)
       When  bash  is  started in posix mode, as with the --posix command line op‐
       tion, it follows the POSIX standard for startup files.  In this  mode,  in‐
       teractive shells expand the ENV variable and commands are read and executed
       from the file whose name is the expanded value.  No other startup files are
       read. bash(1) line 168 (press h for help or q to quit)
 ESESCOBpage bash(1) line 169 (press h for help or q to quit)
       Bash  attempts  to  determine  when it is being run with its standard input
       connected to a network connection, as when executed by the  historical  re‐
       mote  shell daemon, usually rshd, or the secure shell daemon sshd.  If bash
       determines it is being run non-interactively in this fashion, it reads  and
       executes commands from /etc/bash.bashrc and ~/.bashrc, if these files exist
       and are readable.  It will not do this if invoked as sh.  The --norc option
       may  be  used to inhibit this behavior, and the --rcfile option may be used
       to force another file to be read, but neither rshd nor sshd  generally  in‐
       voke the shell with those options or allow them to be specified.
 ESESCOBpage bash(1) line 179 (press h for help or q to quit)
       If the shell is started with the effective user (group) id not equal to the
       real user (group) id, and the -p option is not supplied, no  startup  files
       are read, shell functions are not inherited from the environment, the SHEL‐
       LOPTS, BASHOPTS, CDPATH, and GLOBIGNORE variables, if they  appear  in  the
       environment, are ignored, and the effective user id is set to the real user
       id.  If the -p option is supplied at invocation, the  startup  behavior  is
       the same, but the effective user id is not reset.quit)
 ESESCOBpage bash(1) line 187 (press h for help or q to quit)
DEFINITIONSe bash(1) line 188 (press h for help or q to quit)
       The following definitions are used throughout the rest of this document.
       blank  A space or tab. (press h for help or q to quit)
       word   A  sequence  of characters considered as a single unit by the shell.
              Also known as a token. h for help or q to quit)
       name   A word consisting only of alphanumeric characters  and  underscores,
              and  beginning  with an alphabetic character or an underscore.  Also
              referred to as an identifier.help or q to quit)
       metacharacter line 196 (press h for help or q to quit)
              A character that, when unquoted, separates words.  One of  the  fol‐
              lowing:line 198 (press h for help or q to quit)
              |  & ; ( ) < > space tab newlinep or q to quit)
       control operatorne 200 (press h for help or q to quit)
              A  token that performs a control function.  It is one of the follow‐
              ing symbols:202 (press h for help or q to quit)
              || & && ; ;; ;& ;;& ( ) | |& <newline> to quit)
 ESESCOBpage bash(1) line 204 (press h for help or q to quit)
RESERVED WORDSash(1) line 205 (press h for help or q to quit)
       Reserved words are words that have a special meaning  to  the  shell.   The
       following  words  are  recognized  as reserved when unquoted and either the
       first word of a command (see SHELL GRAMMAR below), the third word of a case
       or  select  command  (only in is valid), or the third word of a for command
       (only in and do are valid):ss h for help or q to quit)
 ESESCOBpage bash(1) line 211 (press h for help or q to quit)
       ! case  coproc  do done elif else esac fi for function if  in  select  then
       until while { } time [[ ]]ess h for help or q to quit)
 ESESCOBpage bash(1) line 214 (press h for help or q to quit)
SHELL GRAMMARbash(1) line 215 (press h for help or q to quit)
       This section describes the syntax of the various forms of shell commands.
 ESESCOBpage bash(1) line 217 (press h for help or q to quit)
   Simple Commands1) line 218 (press h for help or q to quit)
       A simple command is a sequence of optional variable assignments followed by
       blank-separated words and redirections, and terminated by a control  opera‐
       tor.  The first word specifies the command to be executed, and is passed as
       argument zero.  The remaining words are passed as arguments to the  invoked
       command.sh(1) line 223 (press h for help or q to quit)
 ESESCOBpage bash(1) line 224 (press h for help or q to quit)
       The  return  value  of a simple command is its exit status, or 128+n if the
       command is terminated by signal n.r help or q to quit)
 ESESCOBpage bash(1) line 227 (press h for help or q to quit)
   Pipelines bash(1) line 228 (press h for help or q to quit)
       A pipeline is a sequence of one or more commands separated by  one  of  the
       control operators | or |&.  The format for a pipeline is:
 ESESCOBpage bash(1) line 231 (press h for help or q to quit)
              [time [-p]] [ ! ] command1 [ [|⎪|&] command2 ... ]
 ESESCOBpage bash(1) line 233 (press h for help or q to quit)
       The standard output of command1 is connected via a pipe to the standard in‐
       put of command2.  This connection  is  performed  before  any  redirections
       specified  by  the  command1(see  REDIRECTION  below).  If |& is used, com‐
       mand1's standard error, in addition to its standard output, is connected to
M       tor.  The first word specifies the command to be executed, and is passed as
M       blank-separated words and redirections, and terminated by a control  opera‐
M       A simple command is a sequence of optional variable assignments followed by
M   Simple Commands) line 235 (press h for help or q to quit)
MESESCOApage bash(1) line 234 (press h for help or q to quit)
M       This section describes the syntax of the various forms of shell commands.
MSHELL GRAMMARash(1) line 232 (press h for help or q to quit)
 ESESCOBpage bash(1) line 231 (press h for help or q to quit)
              [time [-p]] [ ! ] command1 [ [|⎪|&] command2 ... ]
 ESESCOBpage bash(1) line 233 (press h for help or q to quit)
       The standard output of command1 is connected via a pipe to the standard in‐
       put of command2.  This connection  is  performed  before  any  redirections
       specified  by  the  command1(see  REDIRECTION  below).  If |& is used, com‐
       mand1's standard error, in addition to its standard output, is connected to
       command2's  standard  input  through  the pipe; it is shorthand for 2>&1 |.
       This implicit redirection of the standard error to the standard  output  is
       performed after any redirections specified by command1.
 ESESCOBpage bash(1) line 241 (press h for help or q to quit)
       The return status of a pipeline is the exit status of the last command, un‐
       less the pipefail option is enabled.  If pipefail  is  enabled,  the  pipe‐
       line's  return  status is the value of the last (rightmost) command to exit
       with a non-zero status, or zero if all commands exit successfully.  If  the
       reserved  word  !  precedes a pipeline, the exit status of that pipeline is
       the logical negation of the exit status  as  described  above.   The  shell
       waits  for  all  commands  in  the pipeline to terminate before returning a
       value.bash(1) line 249 (press h for help or q to quit)
 ESESCOBpage bash(1) line 250 (press h for help or q to quit)
       If the time reserved word precedes a pipeline, the elapsed as well as  user
       and  system  time  consumed by its execution are reported when the pipeline
       terminates.  The -p option changes the output format to that  specified  by
       POSIX.   When  the  shell is in posix mode, it does not recognize time as a
       reserved word if the next token begins with a `-'.  The TIMEFORMAT variable
       may  be  set  to  a format string that specifies how the timing information
       should be displayed; see the description of TIMEFORMAT  under  Shell  Vari‐
       ables below.) line 258 (press h for help or q to quit)
 ESESCOBpage bash(1) line 259 (press h for help or q to quit)
       When  the  shell  is  in posix mode, time may be followed by a newline.  In
       this case, the shell displays the total user and system  time  consumed  by
       the shell and its children.  The TIMEFORMAT variable may be used to specify
       the format of the time information. help or q to quit)
 ESESCOBpage bash(1) line 264 (press h for help or q to quit)
       Each command in a multi-command pipeline, where pipes are created, is  exe‐
       cuted  in  a  subshell, which is a separate process.  See COMMAND EXECUTION
       ENVIRONMENT for a description of subshells and a subshell environment.   If
       the lastpipe option is enabled using the shopt builtin (see the description
       of shopt below), the last element of a pipeline may be  run  by  the  shell
       process when job control is not active.p or q to quit)
 ESESCOBpage bash(1) line 271 (press h for help or q to quit)
   Listspage bash(1) line 272 (press h for help or q to quit)
       A list is a sequence of one or more pipelines separated by one of the oper‐
       ators ;, &, &&, or ||, and optionally terminated by one of ;, &,  or  <new‐
       line>.bash(1) line 275 (press h for help or q to quit)
 ESESCOBpage bash(1) line 276 (press h for help or q to quit)
       Of these list operators, && and || have equal precedence, followed by ; and
       &, which have equal precedence. for help or q to quit)
 ESESCOBpage bash(1) line 279 (press h for help or q to quit)
       A sequence of one or more newlines may appear in a list instead of a  semi‐
       colon to delimit commands.ess h for help or q to quit)
 ESESCOBpage bash(1) line 282 (press h for help or q to quit)
       If  a  command  is terminated by the control operator &, the shell executes
       the command in the background in a subshell.  The shell does not  wait  for
       the  command  to finish, and the return status is 0.  These are referred to
       as asynchronous commands.  Commands separated by a ; are  executed  sequen‐
       tially;  the shell waits for each command to terminate in turn.  The return
       status is the exit status of the last command executed.
M   Listsage bash(1) line 289 (press h for help or q to quit)
       status is the exit status of the last command executed.
 ESESCOBpage bash(1) line 289 (press h for help or q to quit)
       AND and OR lists are sequences of one or more pipelines separated by the &&
       and || control operators, respectively.  AND and OR lists are executed with
       left associativity.  An AND list has the form to quit)
 ESESCOBpage bash(1) line 293 (press h for help or q to quit)
              command1 && command2ss h for help or q to quit)
 ESESCOBpage bash(1) line 295 (press h for help or q to quit)
       command2 is executed if, and only if, command1 returns an  exit  status  of
       zero (success).ine 297 (press h for help or q to quit)
 ESESCOBpage bash(1) line 298 (press h for help or q to quit)
       An OR list has the form(press h for help or q to quit)
 ESESCOBpage bash(1) line 300 (press h for help or q to quit)
              command1 || command2ss h for help or q to quit)
 ESESCOBpage bash(1) line 302 (press h for help or q to quit)
       command2 is executed if, and only if, command1 returns a non-zero exit sta‐
       tus.  The return status of AND and OR lists is the exit status of the  last
       command executed in the list. h for help or q to quit)
 ESESCOBpage bash(1) line 306 (press h for help or q to quit)
   Compound Commands line 307 (press h for help or q to quit)
       A compound command is one of the following.  In most cases a list in a com‐
       mand's description may be separated from the rest of the command by one  or
       more newlines, and may be followed by a newline in place of a semicolon.
 ESESCOBpage bash(1) line 311 (press h for help or q to quit)
       (list) list  is  executed  in a subshell (see COMMAND EXECUTION ENVIRONMENT
              below for a description of a subshell  environment).   Variable  as‐
              signments  and  builtin commands that affect the shell's environment
              do not remain in effect after the  command  completes.   The  return
              status is the exit status of list.or q to quit)
 ESESCOBpage bash(1) line 317 (press h for help or q to quit)
       { list; }h(1) line 318 (press h for help or q to quit)
              list is simply executed in the current shell environment.  list must
              be terminated with a newline or semicolon.  This is known as a group
              command.   The  return status is the exit status of list.  Note that
              unlike the metacharacters ( and ), { and } are  reserved  words  and
              must  occur  where  a  reserved  word is permitted to be recognized.
              Since they do not cause a word break, they must  be  separated  from
              list by whitespace or another shell metacharacter.
 ESESCOBpage bash(1) line 326 (press h for help or q to quit)
       ((expression))line 327 (press h for help or q to quit)
              The  expression  is evaluated according to the rules described below
              under ARITHMETIC EVALUATION.  If the value of the expression is non-
              zero, the return status is 0; otherwise the return status is 1.  The
              expression undergoes the same expansions as if it were within double
              quotes,  but  double  quote characters in expression are not treated
              specially and are removed.or help or q to quit)
 ESESCOBpage bash(1) line 334 (press h for help or q to quit)
       [[ expression ]]ne 335 (press h for help or q to quit)
              Return a status of 0 or 1 depending on the evaluation of the  condi‐
              tional  expression expression.  Expressions are composed of the pri‐
              maries described below under CONDITIONAL EXPRESSIONS.  The words be‐
              tween  the  [[ and ]] do not undergo word splitting and pathname ex‐
              pansion.  The shell performs tilde expansion, parameter and variable
              expansion,  arithmetic expansion, command substitution, process sub‐
              stitution, and quote removal on those  words  (the  expansions  that
              would  occur  if  the words were enclosed in double quotes).  Condi‐
              tional operators such as -f must be unquoted  to  be  recognized  as
              primaries.e 345 (press h for help or q to quit)
 ESESCOBpage bash(1) line 346 (press h for help or q to quit)
              When  used with [[, the < and > operators sort lexicographically us‐
              ing the current locale.h for help or q to quit)
 ESESCOBpage bash(1) line 349 (press h for help or q to quit)
       See the description of the test builtin command (section SHELL BUILTIN COM‐
       MANDS below) for the handling of parameters (i.e.  missing parameters).
 ESESCOBpage bash(1) line 352 (press h for help or q to quit)
       When the == and != operators are used, the string to the right of the oper‐
       ator is considered a pattern and matched according to the  rules  described
       below  under Pattern Matching, as if the extglob shell option were enabled.
       The = operator is equivalent to ==.  If the nocasematch shell option is en‐
       abled,  the  match  is  performed  without regard to the case of alphabetic
       characters.  The return value is 0 if the string matches (==) or  does  not
       match  (!=)  the  pattern, and 1 otherwise.  Any part of the pattern may be
       quoted to force the quoted portion to be matched as a string.
 ESESCOBpage bash(1) line 361 (press h for help or q to quit)
       An additional binary operator, =~, is available, with the  same  precedence
       as  == and !=.  When it is used, the string to the right of the operator is
       considered a POSIX extended regular expression and matched accordingly (us‐
       ing   the  POSIX  regcomp  and  regexec  interfaces  usually  described  in
       regex(3)).  The return value is 0 if the string matches the pattern, and  1
       otherwise.   If the regular expression is syntactically incorrect, the con‐
       ditional expression's return value is 2.  If the nocasematch  shell  option
       is enabled, the match is performed without regard to the case of alphabetic
       characters.  If any part of the pattern is quoted, the  quoted  portion  is
       matched  literally.   This  means  every  character  in  the quoted portion
       matches itself, instead of having any special pattern matching meaning.  If
       the  pattern  is stored in a shell variable, quoting the variable expansion
       forces the entire pattern to be matched literally.  Treat  bracket  expres‐
       sions  in  regular  expressions carefully, since normal quoting and pattern
       characters lose their meanings between brackets. quit)
 ESESCOBpage bash(1) line 377 (press h for help or q to quit)
       The pattern will match if it matches any part of the  string.   Anchor  the
       pattern using the ^ and $ regular expression operators to force it to match
       the entire string.  The array variable BASH_REMATCH records which parts  of
       the  string  matched the pattern.  The element of BASH_REMATCH with index 0
       contains the portion of the string matching the entire regular  expression.
       Substrings  matched  by parenthesized subexpressions within the regular ex‐
       pression are saved in the remaining BASH_REMATCH indices.  The  element  of
       BASH_REMATCH  with  index  n  is the portion of the string matching the nth
       parenthesized subexpression.  Bash sets BASH_REMATCH in the  global  scope;
       declaring it as a local variable will lead to unexpected results.
 ESESCOBpage bash(1) line 388 (press h for help or q to quit)
       Expressions  may  be  combined using the following operators, listed in de‐
       creasing order of precedence: h for help or q to quit)
 ESESCOBpage bash(1) line 391 (press h for help or q to quit)
              ( expression )2 (press h for help or q to quit)
                     Returns the value of expression.  This may be used  to  over‐
                     ride the normal precedence of operators.
              ! expression395 (press h for help or q to quit)
                     True if expression is false.r q to quit)
              expression1 && expression2or help or q to quit)
                     True if both expression1 and expression2 are true.
              expression1 || expression2or help or q to quit)
                     True if either expression1 or expression2 is true.
 ESESCOBpage bash(1) line 401 (press h for help or q to quit)
              The  && and || operators do not evaluate expression2 if the value of
              expression1 is sufficient to determine the return value of  the  en‐
              tire conditional expression. help or q to quit)
 ESESCOBpage bash(1) line 405 (press h for help or q to quit)
       for name [ [ in [ word ... ] ] ; ] do list ; donequit)
              The  list  of  words  following in is expanded, generating a list of
              items.  The variable name is set to each element  of  this  list  in
              turn,  and  list  is executed each time.  If the in word is omitted,
              the for command executes list once  for  each  positional  parameter
              that  is  set (see PARAMETERS below).  The return status is the exit
              status of the last command that executes.  If the expansion  of  the
              items  following  in  results in an empty list, no commands are exe‐
              cuted, and the return status is 0.or q to quit)
 ESESCOBpage bash(1) line 415 (press h for help or q to quit)
       for (( expr1 ; expr2 ; expr3 )) ; do list ; done quit)
              First, the arithmetic expression expr1 is evaluated according to the
              rules  described  below under ARITHMETIC EVALUATION.  The arithmetic
              expression expr2 is then evaluated repeatedly until it evaluates  to
              zero.   Each  time expr2 evaluates to a non-zero value, list is exe‐
              cuted and the arithmetic expression expr3 is evaluated.  If any  ex‐
              pression is omitted, it behaves as if it evaluates to 1.  The return
              value is the exit status of the last command in list  that  is  exe‐
              cuted, or false if any of the expressions is invalid.
 ESESCOBpage bash(1) line 425 (press h for help or q to quit)
       select name [ in word ] ; do list ; done or q to quit)
>ITINF25/lektion8/2.5 arithmetic expansion help or q to quit)
$ for ((expr1; expr2; expr3)); do
        list
done
for ((expr1; expr2; expr3)); do
        list
skostorlek=50skostorlek => 10 skostorlek++-=skostorlek-1



echo Skostorlek $skostorlek





Skostorlek 50
Skostorlek 49
Skostorlek 48
Skostorlek 47
Skostorlek 46
Skostorlek 45
Skostorlek 44
Skostorlek 43
Skostorlek 42
Skostorlek 41
Skostorlek 40
Skostorlek 39
Skostorlek 38
Skostorlek 37
Skostorlek 36
Skostorlek 35
Skostorlek 34
Skostorlek 33
Skostorlek 32
Skostorlek 31
Skostorlek 30
Skostorlek 29
Skostorlek 28
Skostorlek 27
Skostorlek 26
Skostorlek 25
Skostorlek 24
Skostorlek 23
Skostorlek 22
Skostorlek 21
Skostorlek 20
Skostorlek 19
Skostorlek 18
Skostorlek 17
Skostorlek 16
Skostorlek 15
Skostorlek 14
Skostorlek 13
Skostorlek 12
Skostorlek 11
ITINF25/lektion8/2.5 arithmetic expansion
=> 10 ; skostorlek = skostorlek - 1 )); d> 10 ; skostorlek = skostorlek - 1 )); do= 10 ; skostorlek = skostorlek - 1 )); dITINF25/lektion8/2.5 arithmetic expansion
$ for ((skostorlek=50; skostorlek >= 10 ; skostorlek = skostorlek - 1 )); do    echo Skostorlek $skostorlek; done

Skostorlek 50
Skostorlek 49
Skostorlek 48
Skostorlek 47
Skostorlek 46
Skostorlek 45
Skostorlek 44
Skostorlek 43
Skostorlek 42
Skostorlek 41
Skostorlek 40
Skostorlek 39
Skostorlek 38
Skostorlek 37
Skostorlek 36
Skostorlek 35
Skostorlek 34
Skostorlek 33
Skostorlek 32
Skostorlek 31
Skostorlek 30
Skostorlek 29
Skostorlek 28
Skostorlek 27
Skostorlek 26
Skostorlek 25
Skostorlek 24
Skostorlek 23
Skostorlek 22
Skostorlek 21
Skostorlek 20
Skostorlek 19
Skostorlek 18
Skostorlek 17
Skostorlek 16
Skostorlek 15
Skostorlek 14
Skostorlek 13
Skostorlek 12
Skostorlek 11
Skostorlek 10
ITINF25/lektion8/2.5 arithmetic expansion
= 10 ; skostorlek = skostorlek - 1 )); do> 10 ; skostorlek = skostorlek - 1 )); dcho Skostorlek $skostorlek; don

bash: ((: skostorlek => 10 : syntax error: operand expected (error token is "> 10 ")
ITINF25/lektion8/2.5 arithmetic expansion
$ for ((skostorlek=50; skostorlek => 10 ; skostorlek = skostorlek - 1 )); do    echo Skostorlek $skostorlek; done>=
 10 ; skostorlek = skostorlek - 1 )); do 
= 10 ; skostorlek = skostorlek - 1 )); do
=>



ITINF25/lektion8/2.5 arithmetic expansion
$ chmod +x exempel1







cd ../fu

ITINF25/lektion8
$ ls
'2.1 brace_expansion'	     aterblick	  strukturer
'2.5 arithmetic expansion'   recordings
ITINF25/lektion8
$ cd strukturer/funktion/
ITINF25/lektion8/strukturer/funktion
$ ITINF25/lektion8/strukturer/funktion
$ ls
exempel1
ITINF25/lektion8/strukturer/funktion
$ cjomhmod +x exempel1 
ITINF25/lektion8/strukturer/funktion
$ ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
Hej, kul att du är här Bosse
ITINF25/lektion8/strukturer/funktion
$ ./exempel1 ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
ITINF25/lektion8/strukturer/funktion
$ ./exempel1 ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
ITINF25/lektion8/strukturer/funktion
$ ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
Hej, kul att du är här Bosse
Hej, kul att du är här Bosse
ITINF25/lektion8/strukturer/funktion
$ ./exempel1 ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
Hej, kul att du är här Bosse
Sover
Sover
Sover
ITINF25/lektion8/strukturer/funktion
$ ./exempel1 ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
Hej, kul att du är här 8
ITINF25/lektion8/strukturer/funktion
$ ./exempel1 ITINF25/lektion8/strukturer/funktion
$ ./exempel1 
Hej, kul att du är här Pettsson
ITINF25/lektion8/strukturer/funktion
$ ./exempel12ITINF25/lektion8/strukturer/funktion
$ ./exempel2
Hej, kul att du är här Pettsson Martin
ITINF25/lektion8/strukturer/funktion
$ ./exempel2ITINF25/lektion8/strukturer/funktion
$ ./exempel2
Hej, kul att du är här Pettsson Martin Kalle
ITINF25/lektion8/strukturer/funktion
$ ./exempel3ITINF25/lektion8/strukturer/funktion
$ ./exempel3
Hej, kul att du är här Pettsson
Hej, kul att du är här Martin
Hej, kul att du är här Kalle
ITINF25/lektion8/strukturer/funktion
$ ITINF25/lektion8/strukturer/funktion
$ len
bash: len: command not found
ITINF25/lektion8/strukturer/funktion
$ lsl


ITINF25/lektion8/strukturer/funktion
$ source ex
empel4 
ITINF25/lektion8/strukturer/funktion
$ is_secure_password abc
ITINF25/lektion8/strukturer/funktion
$ is_secure_password abcdefg
ITINF25/lektion8/strukturer/funktion
$ is_secure_password abcdefgh
NAJS
ITINF25/lektion8/strukturer/funktion
$ ls acn






is_secure_password abcdefgITINF25/lektion8/strukturer/funktion
$ is_secure_password ab


is_secure_password ehejsanhopp
NAJS
ITINF25/lektion8/strukturer/funktion
$ source ex
empel4 ITINF25/lektion8/strukturer/funktion
$ source exempel4 
ITINF25/lektion8/strukturer/funktion
$ is_secure_password abcefgh
ITINF25/lektion8/strukturer/funktion
$ echo $?
1
ITINF25/lektion8/strukturer/funktion
is_secure_password abcefghITINF25/lektion8/strukturer/funktion
$ is_secure_password abcefgh &&d









e





echo VAD FINT
ITINF25/lektion8/strukturer/funktion
$ is_secure_password abcdefg && echo VAD FINh




VAD FINT
ITINF25/lektion8/strukturer/funktion
source exempel45ITINF25/lektion8/strukturer/funktion
$ source exempel5
ITINF25/lektion8/strukturer/funktion
$ co
ol Hejsan
Hejsan
ITINF25/lektion8/strukturer/funktion
$ cool HejsanITINF25/lektion8/strukturer/funktion
$ cool Hejsan
Hejsan
ITINF25/lektion8/strukturer/funktion
source exempel5ITINF25/lektion8/strukturer/funktion
$ source exempel5
ITINF25/lektion8/strukturer/funktion
cool Hejsanempel5
HEJSAN
ITINF25/lektion8/strukturer/funktion
$ exit
exit

Script done on 2025-09-30 16:04:49+02:00 [COMMAND_EXIT_CODE="0"]
